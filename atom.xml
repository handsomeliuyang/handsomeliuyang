<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘阳</title>
  
  <subtitle>LiuYang&#39;s blog</subtitle>
  <link href="https://handsomeliuyang.github.io/atom.xml" rel="self"/>
  
  <link href="https://handsomeliuyang.github.io/"/>
  <updated>2020-10-26T07:06:54.827Z</updated>
  <id>https://handsomeliuyang.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode插件开发之Markdown扩展功能</title>
    <link href="https://handsomeliuyang.github.io/2020/10/24/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/VSCode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8BMarkdown%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/"/>
    <id>https://handsomeliuyang.github.io/2020/10/24/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/VSCode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8BMarkdown%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/</id>
    <published>2020-10-23T16:00:00.000Z</published>
    <updated>2020-10-26T07:06:54.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>新的文档采用Git+Markdown实现，本地需要一个好Markdown编辑器，最后选择使用vscode轻量级文本编辑器。</p><p>Markdown是一种轻量级的标记语言，虽然优化很多，但有两个明显的缺点：</p><ol><li>图片添加及管理</li><li>表格添加及管理</li></ol><p>表格可以采用在线文档替代，再分享或截图添加，图片的管理方式主要是有如下几种：</p><ol><li>图片先上传到图床等cdn服务器，通过生成的网络地址引用</li><li>放置统一的目录，如根目录的img文件夹，再通过相对路径添加</li><li>通过文档名称创建文件夹，把markdown文件和图片资源统一放入</li></ol><p>每种方式都各有优缺点，最终考虑到文档的可读性及图片管理，采用了方案2和3的融合方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── 文档.md</span><br><span class="line">├── img</span><br><span class="line">    └── 文档</span><br><span class="line">        ├── a.png</span><br><span class="line">        └── b.png</span><br></pre></td></tr></table></figure><p>可以通过vscode的插件Paste Image实现从剪贴板自动复制图片到上述目录，如此插件有两个问题：</p><ol><li>文件目录需要手动创建，不能自动创建</li><li>显示的图片不能修改显示大小，需要手动改为img标签来修改</li></ol><p>通过git来管理文档还有比较严重的问题：无法快速的分享文档链接，需要通过web版git获取文档地址</p><h1 id="需求及效果"><a href="#需求及效果" class="headerlink" title="需求及效果"></a>需求及效果</h1><p>需求如下：</p><ol><li>从剪贴板自动复制图片，同时满足如下要求：<ol><li>图片保存到以当前Markdown文件命名的文件里</li><li>通过img标签添加，默认width=500</li></ol></li><li>获取当前文件的相对路径，并生成gitlab的在线地址</li></ol><p>效果如下：</p><p><img src="/../../hexo-img/VSCode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8BMarkdown%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/2020-10-26-11-23-44.png"></p><h1 id="VSCode插件开发流程"><a href="#VSCode插件开发流程" class="headerlink" title="VSCode插件开发流程"></a>VSCode插件开发流程</h1><p>参考官方文档：</p><ol><li><a href="https://code.visualstudio.com/api/get-started/your-first-extension">Your First Extension</a></li><li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publishing Extensions</a></li></ol><p>阅读上面官方文档，通过代码脚手架，生成Hello World模板工程。</p><p>关键点：extension要选择typescript类型，方便复用第三方插件源码。</p><p>常用命令：</p><ol><li>F5：运行</li><li>npm run publish：发布部署</li></ol><h1 id="Git-Markdown-Tools插件开发"><a href="#Git-Markdown-Tools插件开发" class="headerlink" title="Git Markdown Tools插件开发"></a>Git Markdown Tools插件开发</h1><p>vscode的插件开发很简单，如下图所示：</p><p><img src="/../../hexo-img/VSCode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8BMarkdown%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/2020-10-26-14-16-12.png"></p><h2 id="剪贴版复制图片，并设置默认大小"><a href="#剪贴版复制图片，并设置默认大小" class="headerlink" title="剪贴版复制图片，并设置默认大小"></a>剪贴版复制图片，并设置默认大小</h2><p>此功能是基于<a href="https://github.com/mushanshitiancai/vscode-paste-image">Paste Image</a>插件的源码做的微调，新增img选择，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> renderFilePath(languageId: string, <span class="attr">basePath</span>: string, <span class="attr">imageFilePath</span>: string): string &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">let</span> imageSyntaxPrefix = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> imageSyntaxSuffix = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (languageId) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;markdown&quot;</span>:</span><br><span class="line">                imageSyntaxPrefix = <span class="string">`![](`</span>;</span><br><span class="line">                imageSyntaxSuffix = <span class="string">`)`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;asciidoc&quot;</span>:</span><br><span class="line">                imageSyntaxPrefix = <span class="string">`image::`</span>;</span><br><span class="line">                imageSyntaxSuffix = <span class="string">`[]`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;img&quot;</span>: <span class="comment">// 新增标签类型</span></span><br><span class="line">                imageSyntaxPrefix = <span class="string">`&lt;img src=&quot;`</span>;</span><br><span class="line">                imageSyntaxSuffix = <span class="string">`&quot; width = &quot;500&quot; /&gt;`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在右键菜单里添加相应的快捷入口，只需要配置package.json文件即可，如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">....</span><br><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line">&quot;onCommand:git-markdown-tools.MarkdownImagePastePrimary&quot;,</span><br><span class="line">&quot;onCommand:git-markdown-tools.MarkdownImagePasteSubsidiary&quot;,</span><br><span class="line">],</span><br><span class="line">&quot;contributes&quot;: &#123;</span><br><span class="line">&quot;commands&quot;: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.MarkdownImagePastePrimary&quot;</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: <span class="string">&quot;粘贴图片-Primary&quot;</span>,</span><br><span class="line"><span class="attr">&quot;category&quot;</span>: <span class="string">&quot;58IGit&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.MarkdownImagePasteSubsidiary&quot;</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: <span class="string">&quot;粘贴图片-Subsidiary&quot;</span>,</span><br><span class="line"><span class="attr">&quot;category&quot;</span>: <span class="string">&quot;58IGit&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;menus&quot;: &#123;</span><br><span class="line">&quot;editor/context&quot;: [ // 编辑器界面</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.MarkdownImagePastePrimary&quot;</span>,</span><br><span class="line"><span class="attr">&quot;group&quot;</span>: <span class="string">&quot;navigation&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.MarkdownImagePasteSubsidiary&quot;</span>,</span><br><span class="line"><span class="attr">&quot;group&quot;</span>: <span class="string">&quot;navigation&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Paste Image插件本身有一个问题：不支持直接复制本地的图片文件。</p><p>通过分析Paste Image的源码了解到，剪贴板的操作不是通过javascript实现的，而是通过调用对应平台的脚本实现：</p><ol><li>mac：AppleScript脚本</li><li>linux：shell脚本</li></ol><p>在macOS里，直接复制图片文件到剪贴板时，剪贴板里只有相应的文件路径，没有相应的图片内容，Paste Image的AppleScript脚本不支持这种类型，这个是后续需要修改点。</p><h2 id="获取当前Markdown的远程Git地址"><a href="#获取当前Markdown的远程Git地址" class="headerlink" title="获取当前Markdown的远程Git地址"></a>获取当前Markdown的远程Git地址</h2><p>这个功能非常简单，主过程是如下：</p><ol><li>先获取当前Markdown文件相对路径</li><li>拼接上相应服务器的地址即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="function"><span class="title">copyRemoteUrlToClipboard</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// get current edit file path</span></span><br><span class="line">    <span class="keyword">let</span> editor = vscode.window.activeTextEditor;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!editor</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fileUri = editor.document.uri;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!fileUri</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件的相对路径，相对于项目根目录</span></span><br><span class="line">    <span class="keyword">let</span> filePath = fileUri.fsPath;</span><br><span class="line">    <span class="keyword">let</span> projectPath = vscode.workspace.rootPath;</span><br><span class="line">    <span class="keyword">let</span> fileRelativePath = filePath.replace(projectPath ?? <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过配置获取远程项目的url地址，git-markdown-tools.romoteurl，&#x27;http://igit.58corp.com/wuxian-doc/58app&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> projectRomoteUrlConfig = vscode.workspace.getConfiguration(<span class="string">&#x27;git-markdown-tools&#x27;</span>)[<span class="string">&#x27;romoteurl&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!projectRomoteUrlConfig) &#123;</span><br><span class="line">        Logger.showErrorMessage(<span class="string">`The config git-markdown-tools.romoteurl = &#x27;<span class="subst">$&#123;projectRomoteUrlConfig&#125;</span>&#x27; is invalid. please check your config.`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> remoteUrl = GitShare.getRemoteUrl(projectRomoteUrlConfig, <span class="string">&#x27;master&#x27;</span>, fileRelativePath);</span><br><span class="line"></span><br><span class="line">    vscode.env.openExternal(vscode.Uri.parse(remoteUrl));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 拼接远程url地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>projectRomoteUrl 用户配置，如：http://igit.58corp.com/wuxian-doc/58app</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>branch master分支，还是当前分支</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>fileRelativePath 当前文件的相对路径，如：技术文档/请求的Header过大调研.md</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">private <span class="keyword">static</span> getRemoteUrl(projectRomoteUrl: string, <span class="attr">branch</span>: string, <span class="attr">fileRelativePath</span>: string): string&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;projectRomoteUrl&#125;</span>/blob/<span class="subst">$&#123;branch&#125;</span><span class="subst">$&#123;fileRelativePath&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在右键菜单里添加相应的快捷入口，只需要配置package.json文件即可，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line"><span class="string">&quot;onCommand:git-markdown-tools.CopyRemoteUrlToClipboard&quot;</span></span><br><span class="line">],</span><br><span class="line">&quot;contributes&quot;: &#123;</span><br><span class="line">&quot;commands&quot;: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.CopyRemoteUrlToClipboard&quot;</span>,</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: <span class="string">&quot;打开远程Master地址&quot;</span>,</span><br><span class="line"><span class="attr">&quot;category&quot;</span>: <span class="string">&quot;58IGit&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;menus&quot;: &#123;</span><br><span class="line">&quot;editor/title/context&quot;: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.CopyRemoteUrlToClipboard&quot;</span>,</span><br><span class="line"><span class="attr">&quot;group&quot;</span>: <span class="string">&quot;navigation&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;editor/context&quot;: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;command&quot;</span>: <span class="string">&quot;git-markdown-tools.CopyRemoteUrlToClipboard&quot;</span>,</span><br><span class="line"><span class="attr">&quot;group&quot;</span>: <span class="string">&quot;navigation&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GitHub开源地址"><a href="#GitHub开源地址" class="headerlink" title="GitHub开源地址"></a>GitHub开源地址</h1><ol><li>源码地址：<a href="https://github.com/handsomeliuyang/vscode-git-markdown-tools.git">https://github.com/handsomeliuyang/vscode-git-markdown-tools.git</a></li><li>插件安装地址：<a href="https://marketplace.visualstudio.com/items?itemName=handsomeliuyang.git-markdown-tools&ssr=false#overview">https://marketplace.visualstudio.com/items?itemName=handsomeliuyang.git-markdown-tools&amp;ssr=false#overview</a></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol start="2"><li><a href="https://github.com/mushanshitiancai/vscode-paste-image">vscode-paste-image</a></li><li><a href="https://code.visualstudio.com/api/get-started/your-first-extension">Your First Extension</a></li><li><a href="https://github.com/eamodio/vscode-gitlens">vscode-gitlens</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;新的文档采用Git+Markdown实现，本地需要一个好Markdown编辑器，最后选择使用vscode轻量级文本编辑器。&lt;/p&gt;
&lt;p&gt;M</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="nodejs" scheme="https://handsomeliuyang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>双开系列：AIDL原理简介及动态扩展实现</title>
    <link href="https://handsomeliuyang.github.io/2020/08/09/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://handsomeliuyang.github.io/2020/08/09/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-08-09T04:32:34.000Z</published>
    <updated>2020-10-24T02:23:05.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AIDL的用法"><a href="#AIDL的用法" class="headerlink" title="AIDL的用法"></a>AIDL的用法</h1><p>定义接口，IRemoteService.aidl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.studydemo.binder;</span><br><span class="line"><span class="keyword">import</span> com.ly.studydemo.binder.MyData;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">MyData <span class="title">getMyData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器自动生成两个类：</p><ol><li>服务端：IRemoteService.Stub，继承Binder，真正的服务提供者</li><li>客户端：IRemoteService.Stub.Proxy，实现接口IRemoteService，与服务端通信，请求和结果传输</li></ol><p>服务端通过继承IRemoteService.Stub，提供服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真正的实现类</span></span><br><span class="line"><span class="keyword">private</span> val mBinder: IRemoteService.Stub = object:IRemoteService.Stub() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">getPid</span><span class="params">()</span>: Int </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;[RemoteService] getPid()=$&#123;android.os.Process.myPid()&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> android.os.Process.myPid()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getMyData</span><span class="params">()</span>: MyData? </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;[RemoteService] getMyData()=$&#123;this@RemoteService.mMyData&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span><span class="meta">@RemoteService</span>.mMyData</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端(如Activity)获取到IBinder对象后，转换为接口对象使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IRemoteService remoteService = IRemoteService.Stub.asInterface(service);</span><br></pre></td></tr></table></figure><p>客户端要获取IBinder对象有两种方式：</p><ol><li>异步获取：通过绑定Service获取</li><li>同步获取：通过ContentProvider获取</li></ol><p>整体过程如下图所示：<br><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/AIDL%E4%BD%BF%E7%94%A8.png"></p><h1 id="IRemoteService-Stub源码分析"><a href="#IRemoteService-Stub源码分析" class="headerlink" title="IRemoteService.Stub源码分析"></a>IRemoteService.Stub源码分析</h1><p>由于是跨进程通过，不可能真正持有IRemoteService的实现类，客户端持有仅仅只是一个Proxy对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">ly</span>.<span class="title">studydemo</span>.<span class="title">binder</span>.<span class="title">IRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">    Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRemote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">        <span class="keyword">int</span> _result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">boolean</span> _status = mRemote.transact(Stub.TRANSACTION_getPid, _data, _reply, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!_status &amp;&amp; getDefaultImpl() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDefaultImpl().getPid();</span><br><span class="line">            &#125;</span><br><span class="line">            _reply.readException();</span><br><span class="line">            _result = _reply.readInt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            _reply.recycle();</span><br><span class="line">            _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> com.ly.studydemo.binder.<span class="function">MyData <span class="title">getMyData</span><span class="params">()</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">        com.ly.studydemo.binder.MyData _result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">boolean</span> _status = mRemote.transact(Stub.TRANSACTION_getMyData, _data, _reply, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!_status &amp;&amp; getDefaultImpl() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDefaultImpl().getMyData();</span><br><span class="line">            &#125;</span><br><span class="line">            _reply.readException();</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">0</span> != _reply.readInt())) &#123;</span><br><span class="line">                _result = com.ly.studydemo.binder.MyData.CREATOR.createFromParcel(_reply);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _result = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            _reply.recycle();</span><br><span class="line">            _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> com.ly.studydemo.binder.IRemoteService sDefaultImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过mRemote.transact()，以code的方式传递需要调用的方法名，服务端收到code码后，会调用IRemoteService.Stub的实现类的对应方法，这就是远程过程调用（RPC）。</p><p><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/20200813104040407.png"></p><h1 id="Binder-IPC的内部实现"><a href="#Binder-IPC的内部实现" class="headerlink" title="Binder IPC的内部实现"></a>Binder IPC的内部实现</h1><p>Android的跨进程通信：</p><ol><li>Zygote进程通过Socket机制通信</li><li>应用进程通过Binder IPC通信</li></ol><p>进程之间之所以无法直接通信的原因是虚拟内存管理技术，进程分为两部分（以32位为例）：</p><ol><li>用户空间：0~3G，进程独有，即虚拟内存地址映射到的物理地址是独有，即使用不同的页表</li><li>内核空间：3G~4G，进程共享，即虚拟内存地址映射到的物理地址，其他进程也可以访问到，即使用同一个页表</li></ol><blockquote><p><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/%E8%BF%9B%E7%A8%8B%E9%A1%B5%E8%A1%A8%E9%9A%94%E7%A6%BB.png"><br>图片引用自<a href="https://juejin.im/post/6844904113046568973">Binder内存拷贝的本质和变迁</a></p></blockquote><p>用户空间和内核空间都使用虚拟内存管理技术，由于所有的内核空间的地址，使用同一个页表，可访问相同的物理地址。所以进程间通信要借助内核空间，有两种方式：</p><ol><li>共享内存：两个进程通过内核空间，共享同一块物理内存，都具有读写权限。需要处理同步问题。</li><li>内存拷贝：通常是两次拷贝，先从A进程的用户空间拷贝到共享的内核空间，再从共享的内核空间拷贝至B进程的用户空间。不用考虑同步问题，但性能有损失。</li></ol><p>Binder IPC也是采用内存拷贝，但通过mmap（内存映射技术），只需拷贝一次，提升了性能。<br><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/20200814100618132.png"></p><h1 id="AIDL的限制"><a href="#AIDL的限制" class="headerlink" title="AIDL的限制"></a>AIDL的限制</h1><p>AIDL虽然让跨进程通信变得很简单，但无法实现运行时，动态扩展功能。每次AIDL的接口变化，都需要重新编译。</p><p>在VirtualApp里，通过IPC总线，实现了运行时动态的扩展能力。</p><h1 id="IPC总线（IPCBus）"><a href="#IPC总线（IPCBus）" class="headerlink" title="IPC总线（IPCBus）"></a>IPC总线（IPCBus）</h1><p>AIDL自动生成的Stub和Stub.Proxy的主要功能：</p><ol><li>生成code，如TRANSACTION_getPid, TRANSACTION_getMyDatat，用于传输方法名的传输</li><li>传输方法名(即code)和方法参数，调用真正实现类对应的方法</li></ol><h2 id="总线实现"><a href="#总线实现" class="headerlink" title="总线实现"></a>总线实现</h2><p>通过IPC总线实现这两个能力后，就可以实现运行时增加通信能力，整体框架如下：</p><p><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/20200826033225943.png"></p><p><strong>动态生成code：替换AIDL的编译时生成</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerInterface</span></span>(<span class="keyword">val</span> interfaceClass: Class&lt;*&gt;) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> codeToInterfaceMethod: SparseArray&lt;IPCMethod&gt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> methodToIPCMethodMap: Map&lt;Method, IPCMethod&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> methods = interfaceClass.methods</span><br><span class="line">        codeToInterfaceMethod = SparseArray(methods.size)</span><br><span class="line">        methodToIPCMethodMap = HashMap(methods.size)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历接口的所有方法，生成方法对应的code</span></span><br><span class="line">        <span class="keyword">for</span>((index, method) <span class="keyword">in</span> methods.withIndex())&#123;</span><br><span class="line">            <span class="keyword">val</span> code = Binder.FIRST_CALL_TRANSACTION + index</span><br><span class="line">            <span class="keyword">val</span> ipcMethod = IPCMethod(code, method, interfaceClass.name)</span><br><span class="line">            codeToInterfaceMethod.put(code, ipcMethod)</span><br><span class="line">            methodToIPCMethodMap.put(method, ipcMethod)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端：通过动态代理替换IRemoteService.Stub.Proxy的功能</strong></p><p>IRemoteService.Stub.Proxy 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">ly</span>.<span class="title">studydemo</span>.<span class="title">binder</span>.<span class="title">IRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">        <span class="keyword">int</span> _result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">boolean</span> _status = mRemote.transact(Stub.TRANSACTION_getPid, _data, _reply, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!_status &amp;&amp; getDefaultImpl() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDefaultImpl().getPid();</span><br><span class="line">            &#125;</span><br><span class="line">            _reply.readException();</span><br><span class="line">            _result = _reply.readInt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            _reply.recycle();</span><br><span class="line">            _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _result;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPCBus的动态代理实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">get</span><span class="params">(interfaceClass: <span class="type">Class</span>&lt;*&gt;)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">val</span> serverInterface = ServerInterface(interfaceClass)</span><br><span class="line">    <span class="comment">// 通过AIDL:IServiceFetcher获取服务器注册的Binder对象</span></span><br><span class="line">    <span class="keyword">val</span> binder = getService(interfaceClass.name) ?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">        interfaceClass.classLoader,</span><br><span class="line">        arrayOf(interfaceClass),</span><br><span class="line">        IPCInvocationBridge(serverInterface, binder)</span><br><span class="line">    ) <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPCInvocationBridge</span></span>(<span class="keyword">val</span> serverInterface: ServerInterface, <span class="keyword">val</span> binder: IBinder) : InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(proxy: <span class="type">Any</span>?, method: <span class="type">Method</span>?, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;?)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">val</span> ipcMethod = serverInterface.getIPCMethod(method)</span><br><span class="line">            ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;Can not found the ipc method : &quot;</span> + method?.declaringClass?.name + <span class="string">&quot;@&quot;</span> + method?.name)</span><br><span class="line">        <span class="keyword">return</span> ipcMethod.callRemote(binder, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IPCMethod.callRemote</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">callRemote</span><span class="params">(server: <span class="type">IBinder</span>, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;?)</span></span>: Any? &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = Parcel.obtain()</span><br><span class="line">    <span class="keyword">val</span> reply = Parcel.obtain()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">data</span>.writeInterfaceToken(interfaceName)</span><br><span class="line">        <span class="keyword">data</span>.writeArray(args)</span><br><span class="line">        server.transact(code, <span class="keyword">data</span>, reply, <span class="number">0</span>)</span><br><span class="line">        reply.readException()</span><br><span class="line">        <span class="keyword">val</span> result = reply.readValue(<span class="keyword">this</span>.javaClass.classLoader)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">data</span>.recycle()</span><br><span class="line">        reply.recycle()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端：通过Binder实现类TransformBinder替换IRemoteService.Stub的功能</strong></p><p>IRemoteService.Stub实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">ly</span>.<span class="title">studydemo</span>.<span class="title">binder</span>.<span class="title">IRemoteService</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">        java.lang.String descriptor = DESCRIPTOR;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                reply.writeString(descriptor);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> TRANSACTION_getPid: &#123;</span><br><span class="line">                data.enforceInterface(descriptor);</span><br><span class="line">                <span class="keyword">int</span> _result = <span class="keyword">this</span>.getPid();</span><br><span class="line">                reply.writeNoException();</span><br><span class="line">                reply.writeInt(_result);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> TRANSACTION_getMyData: &#123;</span><br><span class="line">                data.enforceInterface(descriptor);</span><br><span class="line">                com.ly.studydemo.binder.MyData _result = <span class="keyword">this</span>.getMyData();</span><br><span class="line">                reply.writeNoException();</span><br><span class="line">                <span class="keyword">if</span> ((_result != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    reply.writeInt(<span class="number">1</span>);</span><br><span class="line">                    _result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reply.writeInt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPCBus里的TransformBinder实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransformBinder</span></span>(<span class="keyword">val</span> serverInterface: ServerInterface, <span class="keyword">val</span> server: Any) : Binder() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransact</span><span class="params">(code: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Parcel</span>, reply: <span class="type">Parcel</span>?, flags: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(code == Binder.INTERFACE_TRANSACTION) &#123;</span><br><span class="line">            reply?.writeString(serverInterface.getInterfaceName())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> ipcMethod = serverInterface.getIPCMethod(code)</span><br><span class="line">            ?: <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, <span class="keyword">data</span>, reply, flags)</span><br><span class="line">        ipcMethod.handleTransact(server, <span class="keyword">data</span>, reply)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IPCMethod.handleTransact()</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handleTransact</span><span class="params">(server: <span class="type">Any</span>, <span class="keyword">data</span>: <span class="type">Parcel</span>, reply: <span class="type">Parcel</span>?)</span></span>&#123;</span><br><span class="line">    <span class="keyword">data</span>.enforceInterface(interfaceName)</span><br><span class="line">    <span class="keyword">val</span> parameters = <span class="keyword">data</span>.readArray(<span class="keyword">this</span>.javaClass.classLoader)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> res: Any?</span><br><span class="line">        <span class="keyword">if</span> (parameters == <span class="literal">null</span>) &#123;</span><br><span class="line">            res = method.invoke(server)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = method.invoke(server, parameters)</span><br><span class="line">        &#125;</span><br><span class="line">        reply?.writeNoException()</span><br><span class="line">        reply?.writeValue(res)</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        reply?.writeException(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binder的单例管理"><a href="#Binder的单例管理" class="headerlink" title="Binder的单例管理"></a>Binder的单例管理</h2><p>因为跨进程通信最终还是通过IBinder实现，每个接口对应的IBinder对象应该复用，全局单例。<br><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/20200826040156423.png"></p><h2 id="AIDL搭桥传输IBinder对象"><a href="#AIDL搭桥传输IBinder对象" class="headerlink" title="AIDL搭桥传输IBinder对象"></a>AIDL搭桥传输IBinder对象</h2><p>首先通过AIDL创建跨进通信，用于传输动态IPC的Binder对象。</p><p><img src="/../../hexo-img/%E5%8F%8C%E5%BC%80%E7%B3%BB%E5%88%97%EF%BC%9AAIDL%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0/20200826041119691.png"></p><ol><li>通过ContentProvider传递AIDL(IServiceFetcher)对象</li><li>通过AIDL(IServiceFetcher)传递动态的Binder对象</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>IPCBus的关键是把编译时生成的code，改为动态生成，其他机制与自动生成的IRemoteService.Stub里的机制一样。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://juejin.im/post/6844904113046568973">Binder内存拷贝的本质和变迁</a></li><li><a href="https://github.com/asLody/VirtualApp">VirtualApp</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AIDL的用法&quot;&gt;&lt;a href=&quot;#AIDL的用法&quot; class=&quot;headerlink&quot; title=&quot;AIDL的用法&quot;&gt;&lt;/a&gt;AIDL的用法&lt;/h1&gt;&lt;p&gt;定义接口，IRemoteService.aidl&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ARCore实现iOS的AR效果</title>
    <link href="https://handsomeliuyang.github.io/2020/07/21/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/ARCore%E5%AE%9E%E7%8E%B0iOS%E7%9A%84AR%E6%95%88%E6%9E%9C/"/>
    <id>https://handsomeliuyang.github.io/2020/07/21/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/ARCore%E5%AE%9E%E7%8E%B0iOS%E7%9A%84AR%E6%95%88%E6%9E%9C/</id>
    <published>2020-07-21T07:35:45.000Z</published>
    <updated>2020-10-24T05:33:22.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS的AR效果"><a href="#iOS的AR效果" class="headerlink" title="iOS的AR效果"></a>iOS的AR效果</h1><img src="https://wos.58cdn.com.cn/IjGfEdCbIlr/ishare/pic_18767146674867936.gif" height="400" style="max-width: 100%; cursor: default;"><p>此AR效果可以分为两个过程：</p><ol><li>旋转显示“找工作卡片”</li><li>点击“找工作卡片”显示“帮帮3D动画效果”</li></ol><h1 id="ARCore实现的效果"><a href="#ARCore实现的效果" class="headerlink" title="ARCore实现的效果"></a>ARCore实现的效果</h1><p>由于ARCore发展比ARKit慢很多，加上终端上的差异，提供的能力比较弱，最新Sceneform-1.16.0版本，才支持glTF的animation。</p><p>iOS的这个效果是三年前实现的，由于之前的Sceneform不支持animation，一直无法完成ARCore的改写，只能借助第三方的SDK，如ViroCore。</p><p>直到最近Sceneform版本支持animation后，才完成改写。dae的3D模型转换失败，改为其他3D模型。</p><p><video src="https://wos.58cdn.com.cn/IjGfEdCbIlr/ishare/video_19920195115761207.mp4" controls="true" width="100%" height="400"></video></p><h1 id="ARCore简单理解"><a href="#ARCore简单理解" class="headerlink" title="ARCore简单理解"></a>ARCore简单理解</h1><blockquote><p>ARCore的主要三个功能</p><ol><li>运动跟踪：让手机可以理解和跟踪它相对于现实世界的位置。</li><li>环境理解：让手机可以检测各类表面（例如地面、咖啡桌或墙壁等水平、垂直和倾斜表面）的大小和位置。</li><li>光估测：让手机可以估测环境当前的光照条件。</li></ol></blockquote><p>AR效果的实现过程：</p><ol><li>通过识别摄像头每帧图像中的<strong>特征点</strong>，计算<strong>特征点</strong>的移动</li><li>将这些<strong>特征点</strong>的移动与手机惯性传感器的读数组合，估算出摄像头的正确位置和方向。</li><li>依据摄像头最新的位置和方向，调整观察坐标系，重新渲染3D模型，使3D模型看起来就像现实世界的一部分。</li></ol><h1 id="ARCore关键术语"><a href="#ARCore关键术语" class="headerlink" title="ARCore关键术语"></a>ARCore关键术语</h1><ol><li>feature points: 特征点</li><li>planes: 平面，一组特征点（clusters of feature points）</li><li>anchor: 锚点，世界坐标系中的一个固定点，随着手机移动，在观察坐标系里，坐标会不断进行变化。</li><li>trackable: 可追踪对象，平面和特征点可被称为trackable，即随着手机移动，可定位其在真实世界的位置</li><li>hit test: 基于屏幕的二维坐标，映射到世界坐标，返回一个可追踪对象（trackable），即平面或特征点</li><li>TrackingState: Camera当前的运动跟踪状态，只有当state为TRACKING时，当前的位置信息才可以使用</li></ol><h1 id="Sceneform"><a href="#Sceneform" class="headerlink" title="Sceneform"></a>Sceneform</h1><blockquote><p>Sceneform是一个3D框架，封装OpenGL，简化3D模型的加载，渲染和交互</p></blockquote><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>3D资源的格式有：obj、fbx、gltf等等多种格式</p><ol><li>obj：通用格式，大部分的3D工具都支持此格式，主要用于传输</li><li>glTF：最小的3D格式，去掉所有的冗余数据，类似于图片的JPEG格式，很适合移动端及web端。</li></ol><p>为了执行效率，Sceneform会将3D资源进行格式转换为sfa,sfb格式，再进行加载。</p><ol><li>转换插件：Google Sceneform Tools（Android Studio插件）</li><li>sfa文件：json文件，可阅读的描述文件，Task(createAsset-{asset-name})会依据最新的3D资源对此文件进行覆写。</li><li>sfb文件：Sceneform的3D资源的二进制数据，Task(compileAsset-{asset-name})将sfa编译到sfb中。</li></ol><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>Renderable是Sceneform加载3D资源（*.sfb）后的对象，由顶点，资源，纹理组成。</p><p>支持的加载来源有：xml布局文件；3D资源（*.sfb）；运行时创建简单的几何图形；加载动态3D资源</p><h3 id="xml布局文件"><a href="#xml布局文件" class="headerlink" title="xml布局文件"></a>xml布局文件</h3><p>通过ViewRenderable可加载xml布局文件，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ViewRenderable.builder()</span><br><span class="line">    .setView(context, R.layout.layout_ad)</span><br><span class="line">    .build()</span><br><span class="line">    .thenAccept(viewRenderable -&gt; &#123;</span><br><span class="line">        adRenderable = viewRenderable;</span><br><span class="line">    &#125;)</span><br><span class="line">    .exceptionally(</span><br><span class="line">            throwable -&gt; &#123;</span><br><span class="line">                Toast toast = Toast.makeText(context, <span class="string">&quot;Unable to load adRenderable&quot;</span>, Toast.LENGTH_LONG);</span><br><span class="line">                toast.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                toast.show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>build() 函数在子线程加载</li><li>成功回调(thenAccept)和异常回调(exceptionally)，都是在主线程执行</li></ol><p>效果如下所示：<br><img src="/../../hexo-img/ARCore%E5%AE%9E%E7%8E%B0iOS%E7%9A%84AR%E6%95%88%E6%9E%9C/20200722030845713.png"></p><h3 id="3D资源（-sfb）"><a href="#3D资源（-sfb）" class="headerlink" title="3D资源（*.sfb）"></a>3D资源（*.sfb）</h3><p>通过ModelRenderable加载内置的（*.sfb）文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ModelRenderable.builder()</span><br><span class="line">    .setSource(context, Uri.parse(<span class="string">&quot;andy_dance.sfb&quot;</span>))</span><br><span class="line">    .build()</span><br><span class="line">    .thenAccept(modelRenderable -&gt; mBangbangRenderable = modelRenderable)</span><br><span class="line">    .exceptionally(throwable -&gt; &#123;</span><br><span class="line">        Toast toast = Toast.makeText(context, <span class="string">&quot;Unable to load bangbangRenderable&quot;</span>, Toast.LENGTH_LONG);</span><br><span class="line">        toast.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        toast.show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>build() 函数在子线程加载</li><li>成功回调(thenAccept)和异常回调(exceptionally)，都是在主线程执行</li></ol><p>效果如下所示：<br><img src="/../../hexo-img/ARCore%E5%AE%9E%E7%8E%B0iOS%E7%9A%84AR%E6%95%88%E6%9E%9C/20200722030916442.png"></p><h3 id="加载动态3D资源"><a href="#加载动态3D资源" class="headerlink" title="加载动态3D资源"></a>加载动态3D资源</h3><p>运行时加载3D资源，暂不支持直接加载*.sfb文件，只支持glTF格式的3D资源的加载。也是通过ModelRenderable加载。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>有了上面的知识的储备，实现成本其实并不高。</p><h2 id="AR环境搭建"><a href="#AR环境搭建" class="headerlink" title="AR环境搭建"></a>AR环境搭建</h2><p>ARCore和Sceneform的依赖：app/build.gradle</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Provides ARCore Session and related resources.</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.ar:core:1.15.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&quot;com.google.ar.sceneform.ux:sceneform-ux:1.15.0&quot;</span></span><br><span class="line">    <span class="comment">// Alternatively, use ArSceneView without the UX dependency.</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.ar.sceneform:core:1.15.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&quot;com.google.ar.sceneform:animation:1.15.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">apply plugin: <span class="string">&#x27;com.google.ar.sceneform.plugin&#x27;</span></span><br></pre></td></tr></table></figure><p>插件依赖：build.gralde</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.android.tools.build:gradle:3.4.1&#x27;</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.google.ar.sceneform:plugin:1.15.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过com.google.ar.sceneform.ux.ArFragment快速构建AR环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.google.ar.sceneform.ux.ArFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/ux_fragment&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ARFragment的初始化及配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuba.sceneform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArFragment arFragment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 做AR支持检测</span></span><br><span class="line">        <span class="keyword">if</span> (!ARCoreUtils.checkIsSupportedDeviceOrFinish(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setContentView(R.layout.layout_main);</span><br><span class="line">        arFragment = (ArFragment) getSupportFragmentManager().findFragmentById(R.id.ux_fragment);</span><br><span class="line">        <span class="comment">// 移除引导动画</span></span><br><span class="line">        arFragment.getPlaneDiscoveryController().hide();</span><br><span class="line">        arFragment.getPlaneDiscoveryController().setInstructionView(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载3D资源"><a href="#加载3D资源" class="headerlink" title="加载3D资源"></a>加载3D资源</h2><p>“找工作”对象：从xml里加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ViewRenderable.builder()</span><br><span class="line">    .setView(context, R.layout.layout_ad)</span><br><span class="line">    .build()</span><br><span class="line">    .thenAccept(viewRenderable -&gt; &#123;</span><br><span class="line">        adRenderable = viewRenderable;</span><br><span class="line">    &#125;)</span><br><span class="line">    .exceptionally(</span><br><span class="line">            throwable -&gt; &#123;</span><br><span class="line">                Toast toast = Toast.makeText(context, <span class="string">&quot;Unable to load adRenderable&quot;</span>, Toast.LENGTH_LONG);</span><br><span class="line">                toast.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                toast.show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>“帮帮3D动画效果”对象：3D模型加载，利用Google Sceneform Tools插件，导入andy_dance.fbx资源，并通过ModelRenderable进行加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ModelRenderable.builder()</span><br><span class="line">    .setSource(context, Uri.parse(<span class="string">&quot;andy_dance.sfb&quot;</span>))</span><br><span class="line">    .build()</span><br><span class="line">    .thenAccept(modelRenderable -&gt; mBangbangRenderable = modelRenderable)</span><br><span class="line">    .exceptionally(throwable -&gt; &#123;</span><br><span class="line">        Toast toast = Toast.makeText(context, <span class="string">&quot;Unable to load bangbangRenderable&quot;</span>, Toast.LENGTH_LONG);</span><br><span class="line">        toast.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        toast.show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="移动找特征点，并显示“找工作”"><a href="#移动找特征点，并显示“找工作”" class="headerlink" title="移动找特征点，并显示“找工作”"></a>移动找特征点，并显示“找工作”</h2><p>要在真实世界上放置渲染对象，看起来像现实世界的一部分，就需要基于可追踪对象(trackable)，放置渲染对象。</p><p>步骤如下：</p><ol><li>监听摄像头的每帧图像处理</li><li>判断Camera.TrackingState是否是TRACKING</li><li>对当前图像帧做frame.hitTest()测试，获取可追踪对象(trackable)</li><li>基于可追踪对象(trackable)的Pose，创建Anchor，通过Anchor添加3D渲染对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听</span></span><br><span class="line">arFragment.getArSceneView().getScene().addOnUpdateListener(<span class="keyword">new</span> Scene.OnUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">(FrameTime frameTime)</span> </span>&#123;</span><br><span class="line">        arFragment.onUpdate(frameTime);</span><br><span class="line">        onSceneUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onSceneUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    View contentView = findViewById(android.R.id.content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> trackingChanged = updateTracking();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(trackingChanged)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isTracking)&#123;</span><br><span class="line">            contentView.getOverlay().add(pointer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            contentView.getOverlay().remove(pointer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        contentView.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isTracking)&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hitTestChanged = updateHitTest();</span><br><span class="line">        <span class="keyword">if</span>(hitTestChanged) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isHitting) &#123;</span><br><span class="line">                adManager.showAd(hitResult, arFragment);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;hitTestChanged .... &quot;</span> + isHitting);</span><br><span class="line"></span><br><span class="line">            pointer.setEnabled(isHitting);</span><br><span class="line">            contentView.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：很多trackable相距很近，“找工作”显示太密集？？</p><p><strong>解决方案：</strong>设置两个“找工作”对象之间的最小距离，计算其三维世界的距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isClose</span><span class="params">(Pose adPos, Pose hitPose)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Compute the difference vector between the two hit locations.</span></span><br><span class="line">    <span class="keyword">float</span> dx = adPos.tx() - hitPose.tx();</span><br><span class="line">    <span class="keyword">float</span> dy = adPos.ty() - hitPose.ty();</span><br><span class="line">    <span class="keyword">float</span> dz = adPos.tz() - hitPose.tz();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute the straight-line distance.</span></span><br><span class="line">    <span class="keyword">float</span> distanceMeters = (<span class="keyword">float</span>) Math.sqrt(dx*dx + dy*dy + dz*dz);</span><br><span class="line"></span><br><span class="line">    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;distanceMeters = &quot;</span> + distanceMeters);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// too close</span></span><br><span class="line">    <span class="keyword">if</span>(distanceMeters &lt; <span class="number">1.7</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="“找工作”点击显示机器人对象"><a href="#“找工作”点击显示机器人对象" class="headerlink" title="“找工作”点击显示机器人对象"></a>“找工作”点击显示机器人对象</h2><p>点击“找工作”对象后，修改当前Node的Renderable数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">transformableNode.setOnTapListener(<span class="keyword">new</span> Node.OnTapListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTap</span><span class="params">(HitTestResult hitTestResult, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class="line">        showBangBang(transformableNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBangBang</span><span class="params">(TransformableNode transformableNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mBangbangRenderable == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    transformableNode.setRenderable(mBangbangRenderable);</span><br><span class="line">    transformableNode.select();</span><br><span class="line">    startAnimation(transformableNode, mBangbangRenderable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>还有很多的问题没有解决，只是撑握了Api的使用，无法基于OpenGL做深度定制：</p><ol><li>四大厂商的手机如何配置ARCore环境？</li><li>dae转换为obj或gltf？</li><li>3D模型的二次编辑修改？</li><li>OpenGL深入研究，实现基于OpenGL版本？</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://developers.google.com/ar/discover">ARCore overview</a></li><li><a href="https://developers.google.com/sceneform/develop/emulator">Run Sceneform apps in Android Emulator</a></li><li><a href="https://codelabs.developers.google.com/codelabs/sceneform-intro/index.html#0">Introduction to Sceneform</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;iOS的AR效果&quot;&gt;&lt;a href=&quot;#iOS的AR效果&quot; class=&quot;headerlink&quot; title=&quot;iOS的AR效果&quot;&gt;&lt;/a&gt;iOS的AR效果&lt;/h1&gt;&lt;img src=&quot;https://wos.58cdn.com.cn/IjGfEdCbIlr/is</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>云服务搭建Anki Sync Server</title>
    <link href="https://handsomeliuyang.github.io/2020/01/08/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BAAnki-Sync-Server/"/>
    <id>https://handsomeliuyang.github.io/2020/01/08/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BAAnki-Sync-Server/</id>
    <published>2020-01-08T11:53:36.000Z</published>
    <updated>2020-10-24T05:36:33.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>知识的学习过程：懂，熟，巧</p></blockquote><ol><li>懂：通过看视频，看文章，写分享很容易达到懂的状态</li><li>熟：重复，重复，再重复</li><li>巧：实践，实践，再实践</li></ol><p>除了经常用到的知识外，很多知识点，我们都处于懂的阶段，之前的学过的知识，之前写过的分享，只要长时间不使用，就记不清了，导致相同的知识总是处于学习，忘记，再学习的过程。</p><blockquote><p>英国哲学家培根说：“一切知识的获得都是记忆”</p></blockquote><p>要熟练，就要记忆，而要记忆就要重复，如何高效率的重复呢？<a href="http://www.ankichina.net/anki20.html">Anki</a>就是一个使记忆变得容易的学习软件</p><p>其具有如下特点：</p><ol><li>科学安排复习间隔：艾宾浩斯遗忘曲线</li><li>通过主动召回测试，提升学习效率：卡片（问题|答案）</li><li>支持图像、音频、视频和LaTeX</li><li>跨端且开源，支持windows，mac，linux，android，iphone。注意：iphone未开源且收费，其他都免费且开源</li></ol><p>Anki由于是小众软件，没有商业化，所以其同步过程在国内很慢，而且经常还失败，同时有些卡片内容不想同步到server，就有想自己搭建Anki Sync Server的想法。</p><p>由于AnkiWeb没有开源，网上有个牛人把自己实现了一套Anki Sync Server。</p><ol><li>github地址为：<a href="https://github.com/tsudoko/anki-sync-server">tsudoko/anki-sync-server</a></li><li>docker安装：<a href="https://github.com/kuklinistvan/docker-anki-sync-server">kuklinistvan/docker-anki-sync-server</a></li></ol><h1 id="Anki-Sync-Server安装过程"><a href="#Anki-Sync-Server安装过程" class="headerlink" title="Anki Sync Server安装过程"></a>Anki Sync Server安装过程</h1><ol><li>安装docker：curl -sSL <a href="https://get.daocloud.io/docker">https://get.daocloud.io/docker</a> | sh</li><li>启动docker服务：service docker start</li><li>创建两个目录： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir anki-data // 用于存放Anki的数据</span><br><span class="line">mkdir anki-docker // 用于存放anki docker的shell脚本</span><br></pre></td></tr></table></figure></li><li>参考<a href="https://github.com/kuklinistvan/docker-anki-sync-server">kuklinistvan/docker-anki-sync-server</a>创建run.sh脚本： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cd anki-docker</span><br><span class="line">vim run.sh</span><br><span class="line">---------</span><br><span class="line">&#x2F;&#x2F; run.sh的内容如下：</span><br><span class="line">export DOCKER_USER&#x3D;root</span><br><span class="line">export ANKI_SYNC_DATA_DIR&#x3D;&#x2F;root&#x2F;liuyang&#x2F;anki_sync_server&#x2F;anki-data</span><br><span class="line">export HOST_PORT&#x3D;27701</span><br><span class="line"></span><br><span class="line">mkdir -p &quot;$ANKI_SYNC_DATA_DIR&quot;</span><br><span class="line">chown &quot;$DOCKER_USER&quot; &quot;$ANKI_SYNC_DATA_DIR&quot;</span><br><span class="line">chmod 700 &quot;$ANKI_SYNC_DATA_DIR&quot;</span><br><span class="line"></span><br><span class="line">docker run -itd \</span><br><span class="line">    --mount type&#x3D;bind,source&#x3D;&quot;$ANKI_SYNC_DATA_DIR&quot;,target&#x3D;&#x2F;app&#x2F;data \</span><br><span class="line">    -p &quot;$HOST_PORT&quot;:27701 \</span><br><span class="line">    --name anki-container \</span><br><span class="line">    --restart always \</span><br><span class="line">    kuklinistvan&#x2F;anki-sync-server:tsudoku-2.1.9</span><br><span class="line">---------</span><br></pre></td></tr></table></figure></li><li>添加用户： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入docker容器</span></span><br><span class="line">docker exec -it anki-container /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看添加用户的命令帮助</span></span><br><span class="line">/app/anki-sync-server # ./ankisyncctl.py --help</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加新用户及设置其密码</span></span><br><span class="line">/app/anki-sync-server # ./ankisyncctl.py adduser &lt;username&gt;</span><br><span class="line">Enter password for &lt;username&gt;: </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列表所有的用户</span></span><br><span class="line">/app/anki-sync-server # ./ankisyncctl.py lsuser</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改用户的密码</span></span><br><span class="line">/app/anki-sync-server # ./ankisyncctl.py passwd &lt;username&gt;</span><br><span class="line">Enter password for &lt;username&gt;:</span><br></pre></td></tr></table></figure></li></ol><h1 id="Android端配置"><a href="#Android端配置" class="headerlink" title="Android端配置"></a>Android端配置</h1><ol><li>对应的Android Apk的下载地址：链接:<a href="https://pan.baidu.com/s/1CemVYTOOZe0odjkYuKgKMg">https://pan.baidu.com/s/1CemVYTOOZe0odjkYuKgKMg</a>  密码:pesp</li><li>进入【设置】–&gt;【高级设置】–&gt;【自定义同步服务器】如下配置<ol><li>同步地址：http://云服务器的外网ip:27701/</li><li>媒体文件同步地址：http://云服务器的外网ip:27701/msync</li></ol></li><li>进入【设置】–&gt;【AnkiDroid】–&gt;【登录】：输入上面创建的账号与密码</li></ol><h1 id="桌面PC端Anki配置"><a href="#桌面PC端Anki配置" class="headerlink" title="桌面PC端Anki配置"></a>桌面PC端Anki配置</h1><ol><li>对应软件下载地址：<ol><li>mac：链接:<a href="https://pan.baidu.com/s/1xmdO5-IjlPOQnJ-vGLI_tA">https://pan.baidu.com/s/1xmdO5-IjlPOQnJ-vGLI_tA</a>  密码:2689</li><li>window：链接:<a href="https://pan.baidu.com/s/1f4KTJsm-MBNJkxUGAD4dqA">https://pan.baidu.com/s/1f4KTJsm-MBNJkxUGAD4dqA</a>  密码:oz3i</li></ol></li><li>启动软件，进入【工具】–&gt; 【附加组件】–&gt; 点击【获取插件】，输入代码：2124817646，点击【OK】，安装成功SyncRedirector插件</li><li>双击【SyncRedirector】，进行如下配置： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;msyncUrl&quot;: &quot;http:&#x2F;&#x2F;云服务器的外网ip:27701&#x2F;msync&#x2F;&quot;,</span><br><span class="line">    &quot;syncUrl&quot;: &quot;http:&#x2F;&#x2F;云服务器的外网ip:27701&#x2F;sync&#x2F;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启Anki</li><li>【文件】–&gt;【切换配置方案】，添加刚才创建的用户名，点击同步，输入刚才创建的用户名和密码</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/70269217">利用群晖Synology进行Anki同步</a></li><li><a href="https://github.com/kuklinistvan/docker-anki-sync-server">kuklinistvan/docker-anki-sync-server</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;知识的学习过程：懂，熟，巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;懂：通过看视频，看文章，写分享很</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="docker" scheme="https://handsomeliuyang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>58App/Android端的动态化框架实践与思考</title>
    <link href="https://handsomeliuyang.github.io/2019/11/22/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://handsomeliuyang.github.io/2019/11/22/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2019-11-22T12:16:45.000Z</published>
    <updated>2020-10-24T05:18:02.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="业务与动态化要求"><a href="#业务与动态化要求" class="headerlink" title="业务与动态化要求"></a>业务与动态化要求</h1><p>58业务需求特点：多端的快速开发，多套跨平台框架，业务跨App迁移。为了满足此业务要求，整体技术框架的实现手段有：</p><ol><li>业务层：转译框架，如WubaRN-M，京东-taro-react标准，MPVue-vue规划，Wepy-类vue规范，滴滴-Mpx-小程序语法等等</li><li>跨平台框架层：Hybrid，ReactNative，小程序，Flutter等等</li><li>基础能力层：统一Plugin</li></ol><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126045232976.png"></p><h1 id="58App动态化实践"><a href="#58App动态化实践" class="headerlink" title="58App动态化实践"></a>58App动态化实践</h1><p>每种技术都有期优缺点，无法做到完全统一，在实际的App里，一般都是多套框架并存，不同的业务采用不同的技术方案，58App里主要有三种技术方案：</p><ol><li>WubaRN：基于ReactNative的二次封装，主要用于追求动态和较高体验要求的需求</li><li>Hybrid：JS-Native框架，主要用于运营活动等需求</li><li>阿里的Tangram框架：用于列表等Native页面的布局动态化</li></ol><p>由于Hybrid框架比较简单，重点分析一下WubaRN与Tangram框架</p><h2 id="WubaRN"><a href="#WubaRN" class="headerlink" title="WubaRN"></a>WubaRN</h2><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126045250000.png"></p><p>基于ReactNative主要的封装点：</p><ol><li>业务组件与模板工程<ol><li>抹平UI组件的平台差异，扩展Native能力</li><li>统一技术栈，提供模板工程</li></ol></li><li>包大小瘦身及解决Bug<ol><li>减少平台支持版本，保留armeabi-v7a；统一Okhttp与Fresco</li><li>通过AOP修改字符码，解决原生Bug</li></ol></li><li>实现热更新<ol><li>Bundle拆分：Common Bundle内置，Business Bundle动态下发</li><li>分步加载：优化加载Common Bundle，具体业务再加载Business Bundle</li></ol></li></ol><p>ReactNative受制于其实现原理，在低端手机里，如果出现白屏，卡顿现象。如下所实现框架图：</p><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126045303449.png"></p><p>主要特点：</p><ol><li>三个线程：<ol><li>UI Thread：Native的UI渲染</li><li>Shadow Thread：yoga引擎，基于flexbox的语法糖转换为各端的扁平化框架</li><li>Javascript Thread：React执行环境，业务逻辑与diff操作执行环境</li></ol></li><li>通信方式：Json格式序列化，通过React Native Bridge</li></ol><p>产出的问题：</p><ol><li>列表滑动白屏：快速滑动，通信量大，过渡依赖Bridge</li><li>转输大数据慢：如图像的base64字符串信息</li><li>无线同步通信：通信都是异步</li><li>Javascritp Thread帧率低：Javascript解释执行，同时需要执行业务逻辑与diff操作，在低端手机里，快速滑动时，掉帧严重</li></ol><p>ReactNative的最新版本也在重新整体底层实现：</p><ol><li>Fabric：<ol><li>将Native API直接暴露给JavaScript，不通过bridge</li><li>允许 UI 线程与JS线程同步</li></ol></li><li>Fiber：利用requestIdleCallback()，实现动画优先</li><li>使用RecyclerView替换FlatList，实现ItemView的复用</li></ol><h2 id="布局动态化—Tangram"><a href="#布局动态化—Tangram" class="headerlink" title="布局动态化—Tangram"></a>布局动态化—Tangram</h2><blockquote><p>Tangram，七巧板，几块简单的积木就能拼出大千世界。我们用Tangram来命名这套界面方案，也是希望他能像七巧板一样可以通过几块积木就搭出丰富多彩的界面</p></blockquote><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050338349.png"></p><p>其在性能与灵活性上取了一个折中解决方案：</p><ol><li>设计原则：牺牲灵活性的情况下，追求极致性能</li><li>切入点：<ol><li>Native列表高性的同时，缺少灵活性</li><li>动态框架的内存与滑动控制的性能瓶颈</li></ol></li><li>目标：通过构建页面结构化描述，实现页面可运营的目的</li></ol><p>其主要的应用场景：</p><ol><li>常规业务：如业务稳定的列表等<ol><li>需求较稳定，对性能与稳定性有很高的要求</li><li>对局部样式有动态化要求，如标签等等</li></ol></li><li>基础业务：如首页<ol><li>需求稳定，对性能与稳定性有很高的要求</li><li>对局部样式有动态化要求，如推荐样式</li></ol></li></ol><p>其高性能的原因：</p><ol><li>基于Native的列表实现的基础上，解决灵活性，如RecyclerView</li><li>页面渲染：大量的计算工作在VM中完成，并缓存在VM组成的树形结构里</li><li>回收和复用：基于组件与控件实现回收复用</li></ol><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050351207.png"></p><p>但淘宝开源Trangram时，没有开源所有的工具，缺少一些模块：</p><ol><li>模板管理后台：负责发布、更新（版本、平台、组件版本、生效优先级）</li><li>页面生成工具（类似索尔平台）</li></ol><h1 id="其他动态化框架分析"><a href="#其他动态化框架分析" class="headerlink" title="其他动态化框架分析"></a>其他动态化框架分析</h1><p>除58App正在使用的技术外，还有其他跨平台的技术：</p><ol><li>小程序：微信小程序，百度小程序等等</li><li>全包型：Flutter，Qt</li><li>转译框架：taro，MPVue，Wepy，Mpx等等</li></ol><p>对于每一种技术选择一个来讲解其实现原理</p><h2 id="小程序-百度小程序"><a href="#小程序-百度小程序" class="headerlink" title="小程序-百度小程序"></a>小程序-百度小程序</h2><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050404831.png"></p><p>通过对百度小程序的已开源的源码分析，其整体框架如上图所示：</p><ol><li>逻辑层<ol><li>小程序Api：App()，Page()，布局标签</li><li>App()：创建App对象</li><li>Page()：存储在Map中，页面显示时，创建Page对象</li></ol></li><li>渲染层<ol><li>MVVM框架San渲染</li><li>编译期间，小程序标签转化为San的标签</li><li>Page()对应San的Page组件，Template为Swan.xml转译的内容</li></ol></li><li>交互<ol><li>渲染层接收用户的交互事件，由统一的函数处理后，通过消息总线传递到逻辑层的Page对象，再调用对应的函数</li><li>逻辑层依据用户操作，执行业务操作，修改data数据，通过消息总线传递到渲染层的组件里，San.Page组件会自动更新界面</li></ol></li></ol><p>不管是逻辑层与渲染层，其内部实现都还是通过H5来实现，其提升性能的思路：</p><ol><li>把逻辑层与渲染层分离</li><li>异步请求都由native来执行</li><li>编译期转换标签</li></ol><p>受制当前的实现机制，有一些短板：</p><ol><li>无法内嵌Native的View</li><li>通信机制：异步且序列化传递数据<ol><li>传递大数据较慢</li><li>setState()过于频繁时，影响性能</li></ol></li></ol><h2 id="全包型—Flutter"><a href="#全包型—Flutter" class="headerlink" title="全包型—Flutter"></a>全包型—Flutter</h2><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050450876.png"></p><p>Flutter借鉴了ReactNative的设计思路，采用响应式编程，同时实现统一跨平台样式，高性能</p><ol><li>高性能：<ol><li>Debug为字节码，Release为机器码</li><li>不依赖OEM Widgets</li><li>不依赖Bridge</li></ol></li><li>开发效率：<ol><li>声明式布局，一切都是Widget</li><li>热加载（hot reload）</li><li>不依赖OEM，基于Skia，统一UI</li></ol></li></ol><p>真正体验后：</p><ol><li>感受：<ol><li>开发调试非常的快，比Instant Run强</li><li>依赖库管理强，Plugin库</li><li>MVVM框架，声明式布局，便于组件化</li><li>代码精简，相比Java</li></ol></li><li>不足：<ol><li>iOS不支持热更新（思路：Dart转Javascript）</li><li>生态不完善，缺少必须的基础能力<ol><li>渐变Button，图片Button</li><li>崩溃日志收集</li><li>基础Plugin：相册，授权，视频等等</li></ol></li><li>定制开发学习成本高（RenderObject, CostomPaintObject）</li></ol></li></ol><h2 id="转译框架—Taro"><a href="#转译框架—Taro" class="headerlink" title="转译框架—Taro"></a>转译框架—Taro</h2><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050507685.png"></p><p>Taro的设计目标：</p><ol><li>用React写小程序，实现“工业化”<ol><li>PostCSS，Sass， Less</li><li>NPM 支持</li><li>ES6/ES7 语法糖</li><li>TypeScript 的强类型约束</li><li>React 的组件开发</li><li>Redux 的状态管理</li></ol></li><li>多端，统一语法<ol><li>多端转换：运行时和编译时</li><li>抹平多端差异：基础Api与基础组件</li></ol></li></ol><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050524898.png"><br><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050533235.png"></p><p>Taro是类React语法：以小程序为标准，对React语法删减，有如下限制：</p><ol><li>JSX的限制：<ol><li>render()之外不支持jsx</li><li>map 中不支持if 表达式</li><li>只支持Array.map</li><li>props中不支持匿名函数</li><li>props中不支持对象展开符</li><li>props不支持 JSX 元素</li></ol></li><li>不支持无状态组件，都必须使用class定义</li></ol><p>转译框架带来的问题：</p><ol><li>问题定位难：多一层转译</li><li>基础API与基础组件的维护</li></ol><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>现阶段没有真正能满足所有需求的框架，处于混合时期：依据不同的场景，采用不同的框架</p><ol><li>移动端：<ol><li>首页：布局动态化</li><li>列表，详情：Web技术型，如ReactNative</li><li>活动：Hybrid，小程序</li></ol></li><li>多端：编译框架，如Taro</li></ol><p><img src="/../../hexo-img/58App-Android%E7%AB%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/20191126050722611.png"></p><p>从长远看，真正有可能实现统一的框架：Flutter（全包型）</p><p>最关键的还是：持续关注，持续学习</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;业务与动态化要求&quot;&gt;&lt;a href=&quot;#业务与动态化要求&quot; class=&quot;headerlink&quot; title=&quot;业务与动态化要求&quot;&gt;&lt;/a&gt;业务与动态化要求&lt;/h1&gt;&lt;p&gt;58业务需求特点：多端的快速开发，多套跨平台框架，业务跨App迁移。为了满足此业务要求，整体</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter混合工程工程化编译改造系列：add to app源码分析</title>
    <link href="https://handsomeliuyang.github.io/2019/10/30/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Flutter%E7%9A%84add-to-app%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://handsomeliuyang.github.io/2019/10/30/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Flutter%E7%9A%84add-to-app%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2019-10-30T06:19:59.000Z</published>
    <updated>2020-10-24T05:46:46.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="add-to-app"><a href="#add-to-app" class="headerlink" title="add to app"></a>add to app</h1><p>详细教程文档：<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">Add Flutter to existing apps</a></p><p>主要步骤：</p><ol><li>创建FlutterModule：flutter create -t module xxx</li><li>在Host App的settings.gradle文件添加如下配置： <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyApp/settings.gradle</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;:app&#x27;</span>                                     <span class="comment">// assumed existing content</span></span><br><span class="line">setBinding(<span class="keyword">new</span> Binding([gradle: <span class="keyword">this</span>]))                                 <span class="comment">// new</span></span><br><span class="line">evaluate(<span class="keyword">new</span> <span class="keyword">File</span>(                                                      <span class="comment">// new</span></span><br><span class="line">  settingsDir.parentFile,                                               <span class="comment">// new</span></span><br><span class="line">  <span class="string">&#x27;my_flutter/.android/include_flutter.groovy&#x27;</span>                          <span class="comment">// new</span></span><br><span class="line">))   </span><br></pre></td></tr></table></figure></li><li>依赖flutter module库： <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  implementation <span class="keyword">project</span>(<span class="string">&#x27;:flutter&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>通过阅读Flutter官方文档，Flutter的源码分为两部分：</p><ol><li>Flutter Framework：<a href="https://github.com/flutter/flutter">源码地址</a></li><li>Flutter Engine: <a href="https://github.com/flutter/engine">源码地址</a></li></ol><p>Flutter Framework源码的环境配置与编译都比较容易，主要两步：</p><ol><li>clone代码后，把flutter/bin目录添加到环境变量里，执行任务flutter的命令，都会自动编译flutter tool</li><li>修改flutter tool源码后，重新编译flutter tool： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd flutter_sdk_path</span><br><span class="line">rm .&#x2F;bin&#x2F;cache&#x2F;flutter_tools.stamp</span><br><span class="line">rm .&#x2F;bin&#x2F;cache&#x2F;flutter_tools.snapshot</span><br></pre></td></tr></table></figure></li></ol><h2 id="flutter-create-t-module过程分析"><a href="#flutter-create-t-module过程分析" class="headerlink" title="flutter create -t module过程分析"></a>flutter create -t module过程分析</h2><p>flutter create的源码路径：flutter/packages/flutter_tools/lib/src/commands/create.dart</p><p><img src="/../../hexo-img/Flutter%E7%9A%84add-to-app%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/create%E6%B5%81%E7%A8%8B2.png"></p><p>flutter create 命令都是通过template来创建，但create app与create module的模板不一样，create module处于beta阶段：</p><ol><li>创建的Platform代码在.android文件里</li><li>执行flutter create, pub命令，会强制删除.android再重建</li></ol><h2 id="工程结构分析"><a href="#工程结构分析" class="headerlink" title="工程结构分析"></a>工程结构分析</h2><p>新增一个.android/Flutter Module的主要作用：</p><ol><li>提供一个Flutter类和FlutterFragment类<ol><li>初始化flutter: FlutterMain.startInitialization()</li><li>创建FlutterView：new FlutterView(activity, null, nativeView)</li></ol></li><li>注册Plugin插件</li><li>通过插flutter的gradle插件，编译整个Flutter工程，生成snapshot和libflutter.so文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply from: &quot;$flutterRoot&#x2F;packages&#x2F;flutter_tools&#x2F;gradle&#x2F;flutter.gradle&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="FlutterPlugin插件过程分析"><a href="#FlutterPlugin插件过程分析" class="headerlink" title="FlutterPlugin插件过程分析"></a>FlutterPlugin插件过程分析</h2><p>插件源码目录：flutter/packages/flutter_tools/gradle/flutter.gradle</p><p><img src="/../../hexo-img/Flutter%E7%9A%84add-to-app%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/flutterplugin.png"></p><p>从图中可了解到：</p><ol><li>对于flutter engine的依赖，是通过关联其aar实现的</li><li>debug编译时，Flutter的Dart工程，通过JIT编译，生成snapshot</li><li>release编译时，Flutter的Dart工程，通过AOT编译，生成libapp.so</li><li>release编译生成的libapp.so，通过打包成jar依赖</li><li>flutter的其他数据，如字体等等文件，复制到apk的assets目录下</li><li>Debug包的生成文件有：<ol><li>lib/xxx/libflutter.so</li><li>assets/flutter_assets</li></ol></li><li>Release包的生成文件有：<ol><li>lib/xxx/libflutter.so</li><li>lib/xxx/libapp.so</li><li>assets/flutter_assets</li></ol></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现有的add to app的一些问题：</p><ol><li>beta状态，只有master分支才支持，问题很多：<ol><li>.android文件夹执行flutter pub命令时，会被重新生成</li><li>同时master分支不稳定，无法生成可运行的release包</li></ol></li><li>开发期间编译很耗时，同时编译两个工程</li></ol><p>改造思路：</p><ol><li>基于稳定分支，分离Flutter Dart编译与Flutter Native编译过程</li><li>Flutter载体页支持usb或网络加载Flutter Dart的snapshot文件，并支持热更新</li></ol><p>敬请期待后续…</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/flutter/flutter/wiki/Setting-up-the-Framework-development-environment">Setting up the Framework development environment</a></li><li><a href="https://github.com/flutter/flutter/wiki/The-flutter-tool">The flutter tool</a></li><li><a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">Add Flutter to existing apps</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;add-to-app&quot;&gt;&lt;a href=&quot;#add-to-app&quot; class=&quot;headerlink&quot; title=&quot;add to app&quot;&gt;&lt;/a&gt;add to app&lt;/h1&gt;&lt;p&gt;详细教程文档：&lt;a href=&quot;https://github.com/flu</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Flutter" scheme="https://handsomeliuyang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>PageView滑动进入首页效果</title>
    <link href="https://handsomeliuyang.github.io/2019/09/18/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/PageView%E6%BB%91%E5%8A%A8%E8%BF%9B%E5%85%A5%E9%A6%96%E9%A1%B5%E6%95%88%E6%9E%9C/"/>
    <id>https://handsomeliuyang.github.io/2019/09/18/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/PageView%E6%BB%91%E5%8A%A8%E8%BF%9B%E5%85%A5%E9%A6%96%E9%A1%B5%E6%95%88%E6%9E%9C/</id>
    <published>2019-09-18T01:03:35.000Z</published>
    <updated>2020-10-24T05:39:13.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现后的效果"><a href="#实现后的效果" class="headerlink" title="实现后的效果"></a>实现后的效果</h1><iframe height= 520 width= 100% src="screen.mp4" frameborder=0 allowfullscreen></iframe><h1 id="使用PageView"><a href="#使用PageView" class="headerlink" title="使用PageView"></a>使用PageView</h1><p>按官方的文档，PageView的使用非常简单，如下是左右滑动的PageView例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PageView.builder(</span><br><span class="line">    scrollDirection: Axis.horizontal,</span><br><span class="line">    itemCount: itemCount,</span><br><span class="line">    itemBuilder: (BuildContext context, <span class="built_in">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;,</span><br><span class="line">    onPageChanged: (<span class="built_in">int</span> index)&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过PageView的源码可得知：</p><ol><li>PageView是一个StatefulWidget</li><li>PageView是基于Scrollable来实现的</li></ol><p>Flutter与Android的事件类型基本一致，都是down, move, up。但基包装处理类完全不一样。</p><h1 id="Android实现实现此效果的方式"><a href="#Android实现实现此效果的方式" class="headerlink" title="Android实现实现此效果的方式"></a>Android实现实现此效果的方式</h1><p>在Android里，实现对fling的拦截处理的方式是：使用GestureDetector，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlingableRelativeLayout</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> FLING_MIN_DISTANCE = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> FLING_MIN_VELOCITY = <span class="number">800</span>;</span><br><span class="line">    <span class="keyword">private</span> GestureDetector mGestureDetector;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SimpleOnGestureListener mOnGestureListener = <span class="keyword">new</span> SimpleOnGestureListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onFling</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> distance = e2.getX() - e1.getX();</span><br><span class="line">            <span class="keyword">if</span>(Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</span><br><span class="line">                <span class="keyword">if</span>(distance &gt; FLING_MIN_DISTANCE) &#123;</span><br><span class="line">                    <span class="comment">// 向右fling</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; -<span class="number">1</span> * FLING_MIN_DISTANCE) &#123;</span><br><span class="line">                    <span class="comment">// 向左fling</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlingableRelativeLayout</span><span class="params">(Context context, AttributeSet attributeSet, <span class="keyword">int</span> defStyle)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attributeSet, defStyle);</span><br><span class="line">        mGestureDetector = <span class="keyword">new</span> GestureDetector(getContext(), mOnGestureListener);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        mGestureDetector.onTouchEvent(ev);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        mGestureDetector.onTouchEvent(event);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flutter的PageView拦截对应事件"><a href="#Flutter的PageView拦截对应事件" class="headerlink" title="Flutter的PageView拦截对应事件"></a>Flutter的PageView拦截对应事件</h1><p>通过对PageView的源码分析发现，Scrollable对事件处理后，通过ScrollPhysics physics属性，对外暴露如下能力：</p><ol><li>滑动到min和max的时机</li><li>事件up的时机</li></ol><p>PageView通过自定义ScrollPhysics来实现up后，smoothscroll到合适的page页面，如下所示：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageScrollPhysics</span> <span class="keyword">extends</span> <span class="title">ScrollPhysics</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">Creates physics for a [PageView].</span></span></span><br><span class="line">    <span class="keyword">const</span> PageScrollPhysics(&#123; ScrollPhysics parent &#125;) : <span class="keyword">super</span>(parent: parent);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    PageScrollPhysics applyTo(ScrollPhysics ancestor) &#123;</span><br><span class="line">        <span class="keyword">return</span> PageScrollPhysics(parent: buildParent(ancestor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Simulation createBallisticSimulation(ScrollMetrics position, <span class="built_in">double</span> velocity) &#123;</span><br><span class="line">        <span class="comment">// If we&#x27;re out of range and not headed back in range, defer to the parent</span></span><br><span class="line">        <span class="comment">// ballistics, which should put us back in range at a page boundary.</span></span><br><span class="line">        <span class="keyword">if</span> ((velocity &lt;= <span class="number">0.0</span> &amp;&amp; position.pixels &lt;= position.minScrollExtent) ||</span><br><span class="line">        (velocity &gt;= <span class="number">0.0</span> &amp;&amp; position.pixels &gt;= position.maxScrollExtent)) &#123;</span><br><span class="line">            <span class="comment">// 滑动到min或max了，显示阴影效果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.createBallisticSimulation(position, velocity);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// event up后，scroll到合适的page</span></span><br><span class="line">        <span class="keyword">final</span> Tolerance tolerance = <span class="keyword">this</span>.tolerance;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">double</span> target = _getTargetPixels(position, tolerance, velocity);</span><br><span class="line">        <span class="keyword">if</span> (target != position.pixels)</span><br><span class="line">            <span class="keyword">return</span> ScrollSpringSimulation(spring, position.pixels, target, velocity, tolerance: tolerance);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="built_in">bool</span> <span class="keyword">get</span> allowImplicitScrolling =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PageView通过重写createBallisticSimulation()方法，实现回到合适的page与阴影效果</p><h1 id="实现滑动到Max后，继续滑动进入首页效果"><a href="#实现滑动到Max后，继续滑动进入首页效果" class="headerlink" title="实现滑动到Max后，继续滑动进入首页效果"></a>实现滑动到Max后，继续滑动进入首页效果</h1><p>在PageView的PageScrollPhysics基础上，重新createBallisticSimulation()方法，拦截max后的滑动：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeadingPageScrollPhysics</span> <span class="keyword">extends</span> <span class="title">PageScrollPhysics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> LeadingPageScrollPhysics(&#123; ScrollPhysics parent &#125;) : <span class="keyword">super</span>(parent: parent);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    PageScrollPhysics applyTo(ScrollPhysics ancestor) &#123;</span><br><span class="line">        <span class="keyword">return</span> LeadingPageScrollPhysics(parent: ancestor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Simulation createBallisticSimulation(ScrollMetrics position,</span><br><span class="line">        <span class="built_in">double</span> velocity) &#123;</span><br><span class="line">        <span class="comment">// 最后向左滑动</span></span><br><span class="line">        <span class="keyword">if</span> (velocity &gt; <span class="number">0.0</span> &amp;&amp; position.pixels &gt;= position.maxScrollExtent) &#123;</span><br><span class="line">            debugPrint(<span class="string">&#x27;createBallisticSimulation has left&#x27;</span>);</span><br><span class="line">            navigatorKey.currentState.pushReplacementNamed(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.createBallisticSimulation(position, velocity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再配置PageView的physics属性，如下所示：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PageView.builder(</span><br><span class="line">    physics: LeadingPageScrollPhysics(),</span><br><span class="line">    scrollDirection: Axis.horizontal,</span><br><span class="line">    itemCount: itemCount,</span><br><span class="line">    itemBuilder: (BuildContext context, <span class="built_in">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;,</span><br><span class="line">    onPageChanged: (<span class="built_in">int</span> index)&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现后的效果&quot;&gt;&lt;a href=&quot;#实现后的效果&quot; class=&quot;headerlink&quot; title=&quot;实现后的效果&quot;&gt;&lt;/a&gt;实现后的效果&lt;/h1&gt;&lt;iframe height= 520 width= 100% src=&quot;screen.mp4&quot; framebor</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
    <category term="Flutter" scheme="https://handsomeliuyang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter与Android工程的混合开发</title>
    <link href="https://handsomeliuyang.github.io/2019/09/17/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>https://handsomeliuyang.github.io/2019/09/17/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</id>
    <published>2019-09-17T00:59:52.000Z</published>
    <updated>2020-10-24T06:13:48.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>Flutter与现有Android工程融合后的要求：</p><ol><li>Flutter工程与Android工程解耦</li><li>扩展能力通过Flutter Plugin实现</li><li>Flutter工程能独立运行</li><li>包大小要求：只保留armeabi下的so</li></ol><h1 id="add-to-app"><a href="#add-to-app" class="headerlink" title="add to app"></a>add to app</h1><p>细节参考官网文档：<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">Add Flutter to existing apps</a></p><blockquote><p>Last updated August 23, 2019.<br>The “add-to-app” support is in preview, and is so far only available on the master channel.</p></blockquote><p>注意点：要使用Flutter的master分支的代码</p><h2 id="创建Flutter-Module"><a href="#创建Flutter-Module" class="headerlink" title="创建Flutter Module"></a>创建Flutter Module</h2><p>在Android项目的同级目录下，创建Flutter Module：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create -t module --org com.example wuba_flutter</span><br></pre></td></tr></table></figure><p>创建后的项目结构：<br><img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917092102520.png"></p><p>主要结构与正常的Flutter项目一致，主要的区别是：</p><ol><li>android目录，改为了.android</li><li>多了一个Flutter module，同时app module依赖Flutter module<ol><li>具体的内容：<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917092452530.png"></li><li>提供用于创建自定Flutter Activity的Api</li><li>注册所有的插件</li><li>注意：引Flutter module是通过Flutter tooling自动生成的</li></ol></li><li>include_flutter.groovy的作用：<ol><li>设置对外暴露的项目名称：:flutter</li><li>关联Flutter Plugin：通过解析flutter项目的.flutter-plugins文件，获取所有的依赖插件</li></ol></li><li>pubspec.yaml比独立的Flutter项目，多出了如下配置：具体作用可以直接读其注释<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917093500924.png"></li></ol><h2 id="以module的方式融合到Android工程"><a href="#以module的方式融合到Android工程" class="headerlink" title="以module的方式融合到Android工程"></a>以module的方式融合到Android工程</h2><p>第一步：修改Android工程的settings.gradle文件，添加如下配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Flutter项目</span></span><br><span class="line">setBinding(<span class="keyword">new</span> Binding([gradle: <span class="keyword">this</span>]))                                 <span class="comment">// new</span></span><br><span class="line">evaluate(<span class="keyword">new</span> <span class="keyword">File</span>(                                                      <span class="comment">// new</span></span><br><span class="line">    settingsDir.parentFile,                                               <span class="comment">// new</span></span><br><span class="line">    <span class="string">&#x27;wuba_flutter/.android/include_flutter.groovy&#x27;</span>                          <span class="comment">// new</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>第二步：依赖flutter，创建Flutter Activity：</p><ol><li>依赖flutter <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="keyword">project</span>(<span class="string">&#x27;:flutter&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>利用Flutter Api，创建Flutter Activity <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuba.flutter;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.<span class="keyword">annotation</span>.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentActivity;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> io.flutter.facade.Flutter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WubaFlutterActivity</span> <span class="title">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="meta">@Nullable</span> Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        FragmentTransaction tx = getSupportFragmentManager().beginTransaction();</span><br><span class="line">        tx.replace(android.R.id.content, Flutter.createFragment(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置Manifest文件 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.wuba.flutter.WubaFlutterActivity&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hardwareAccelerated</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;adjustResize&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>Flutter的加载过程：</p><ol><li>初始化，加载flutter engine <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FlutterMain.startInitialization(activity.getApplicationContext());</span><br><span class="line">FlutterMain.ensureInitializationComplete(activity.getApplicationContext(), <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></li><li>为当前的Activity，创建FlutterView <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> FlutterNativeView nativeView = <span class="keyword">new</span> FlutterNativeView(activity);</span><br><span class="line"><span class="keyword">final</span> FlutterView flutterView = <span class="keyword">new</span> FlutterView(activity, <span class="keyword">null</span>, nativeView) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>注意点：</p><ol><li>FlutterApplication，FlutterActivity是配套使用的，一个做初始化，一个用于创建FlutterView</li><li>通过Flutter.createFragment()，创建多个自定义的Activity，会不会造成多次初始化？答案是不会，原因如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startInitialization</span><span class="params">(<span class="meta">@NonNull</span> Context applicationContext, <span class="meta">@NonNull</span> FlutterMain.Settings settings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isRunningInRobolectricTest) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() != Looper.getMainLooper()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;startInitialization must be called on the main thread&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sSettings == <span class="keyword">null</span>) &#123; <span class="comment">// 通过静态变量sSettings来保证不会重复初始化</span></span><br><span class="line">            sSettings = settings;</span><br><span class="line">            <span class="keyword">long</span> initStartTimestampMillis = SystemClock.uptimeMillis();</span><br><span class="line">            initConfig(applicationContext);</span><br><span class="line">            initResources(applicationContext);</span><br><span class="line">            System.loadLibrary(<span class="string">&quot;flutter&quot;</span>);</span><br><span class="line">            VsyncWaiter.getInstance((WindowManager)applicationContext.getSystemService(<span class="string">&quot;window&quot;</span>)).init();</span><br><span class="line">            <span class="keyword">long</span> initTimeMillis = SystemClock.uptimeMillis() - initStartTimestampMillis;</span><br><span class="line">            FlutterJNI.nativeRecordStartTimestamp(initTimeMillis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>如果使用稳定版本的Flutter SDK编译，编译也会成功，但运行时会报错？<br>原因：isolate_snapshot_data默认情况下，只在build/intermediates/flutter/debug/android-arm/flutter_assets/生成，不在build/intermediates/library_assets/目录下生成，但多个lib库之间的assets合并，只合并library_assets目录下的文件</p><h2 id="以aar的方式融合到Android工程"><a href="#以aar的方式融合到Android工程" class="headerlink" title="以aar的方式融合到Android工程"></a>以aar的方式融合到Android工程</h2><p>请参考<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">Add Flutter to existing apps</a></p><h1 id="包大小要求：只保留armeabi下的so"><a href="#包大小要求：只保留armeabi下的so" class="headerlink" title="包大小要求：只保留armeabi下的so"></a>包大小要求：只保留armeabi下的so</h1><p>Flutter通过JIT编译后，apk里的存在形式：</p><blockquote><p><img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917100312871.png"><br>参考：<a href="https://medium.com/@takahirom/exploring-flutter-in-android-533598ba17d2">Exploring Flutter in Android</a></p></blockquote><p>主要是两个文件：</p><ol><li>flutter engine：libflutter.so<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917100708404.png"></li><li>dart代码编译后的snapshot：存在assets/flutter_assets目录下<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917100923888.png"></li></ol><p>Flutter Engine（libflutter.so）：</p><ol><li>包含哪些模块：<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917101647274.png"></li><li>编译过程：通过flutter engine的源码编译：<a href="https://github.com/flutter/engine">https://github.com/flutter/engine</a></li><li>开发期间生成过程：使用的是Flutter SDK里已经生成好的，路径地址：flutter sdk/bin/cache/artifacts/engine<ol><li>包括arm，arm64，x86，x64：<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917102005624.png"></li><li>每个目录下都含有flutter.jar文件<br> <img src="/../../hexo-img/Flutter%E4%B8%8EAndroid%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/20190917102219764.png"></li></ol></li></ol><p>问题：Flutter SDK里携带的flutter engine没有armeabi下的so，只有armeabi-v7a的so，如何实现只保留armeabi的so？<br>解决方案：</p><ol><li>把armeabi-v7a下的libflutter.so复制到armeabi目录下 — 现在使用的方案</li><li>通过flutter engine的源码整体编译一次，产出armeabi的so，<a href="https://github.com/flutter/flutter/wiki/Compiling-the-engine">编译方法</a></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">Add Flutter to existing apps</a></li><li><a href="https://medium.com/@takahirom/exploring-flutter-in-android-533598ba17d2">Exploring Flutter in Android</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;Flutter与现有Android工程融合后的要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Flutter工程与Android工程解耦&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
    <category term="Flutter" scheme="https://handsomeliuyang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter的任务队列与Dart语法</title>
    <link href="https://handsomeliuyang.github.io/2019/08/24/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Flutter%E7%9A%84%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B8%8EDart%E8%AF%AD%E6%B3%95/"/>
    <id>https://handsomeliuyang.github.io/2019/08/24/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Flutter%E7%9A%84%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B8%8EDart%E8%AF%AD%E6%B3%95/</id>
    <published>2019-08-24T02:16:54.000Z</published>
    <updated>2020-10-24T06:13:40.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart语法"><a href="#Dart语法" class="headerlink" title="Dart语法"></a>Dart语法</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于同时进行多个项目，不同项目之间使用不同的语言，如Java，Dart，Javascript，Kotlin。每种语言之间虽然大体相同，但还是有一些细节差异，为了提升开发效率，总结Dart的语法差异点并记忆。</p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ol><li>一切都是对象，数字，方法，null都是对象，对象都继承于object</li><li>入口函数为main()，支持函数式编程</li><li>如何定义私有类和私有变量：标识符以 (_) 开头，则该标识符 在库内是私有的</li><li>变量定义：<ol><li>不指名类型：var name;</li><li>指定类型：String name;</li><li>所有变量的默认值是null</li></ol></li><li>定义常量：final 或 const，const为编译时常量</li><li>类型：<ol><li>num类型：int，double</li><li>字符串：<ol><li>单引号，双引号都可以</li><li>支持表达式：’${s.toUpperCase()} is very handy!’</li><li>多行字符串：三个单引号 或 三个双引号</li></ol></li><li>布尔类型：<ol><li>bool，true, false</li><li>只有为true时，才是真，其他都为false</li></ol></li><li>数据与列表：List<ol><li>创建：List list = [1, 2, 3];</li><li>长度：length属性</li></ol></li><li>Key-Value：Map<ol><li>创建：Map map = {key:value};</li><li>赋值：map[‘key’] = ‘value’;</li><li>长度：length属性</li></ol></li></ol></li><li>方法：<ol><li>方法也是对象，对应Function类</li><li>定义：返回值 方法名(参数){}</li><li>命名参数：<ol><li>定义：{bool bold, bool hidden}</li><li>使用：enableFlags(bold: true, hidden: false);</li></ol></li><li>可选参数：<ol><li>定义：[String device]</li><li>使用：可不传入</li></ol></li></ol></li><li>匿名函数 或 lambda 或者 closure闭包<ol><li>定义：(参数){}，简写：(参数) =&gt; 一行语句</li></ol></li><li>类型判断：<ol><li>类型转换：as</li><li>类型判断：is，is!</li></ol></li></ol><h1 id="Flutter的任务队列"><a href="#Flutter的任务队列" class="headerlink" title="Flutter的任务队列"></a>Flutter的任务队列</h1><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p>Flutter是默认是单线程+两个队列，所有的Future都运行在UI线程里，即主Isolate里，对于真正需要异步的任务，可以通过compute()来实现，由于compute方法，每次都是创建一个新的isolate，极端情况下，同时可能会有多个isolate运行。</p><p>需求：是否能实现类似线程池的能力，能整体控制同时运行的isolate数量</p><h2 id="思路与实现"><a href="#思路与实现" class="headerlink" title="思路与实现"></a>思路与实现</h2><p>经过测试，发现Flutter有如下限制：</p><ol><li>Isolate只有在创建时，通过spawn()方法，才能传递方法对象，isolate创建后，不能传递方法对象</li><li>Isolate不支持反射库 —- 为了保证‘tree-shaking’的效果</li><li>两个Isolate之间，不共享内存，所以无法通过单例共享数据，由于httpclient本身已经在异步执行，为了httpclient能获取CommonHeader，不要把httpclient请求放在异步isolate里</li></ol><p>实现思路：把任务保存到Queue队列里，整理控制Isolate的数量，如后台同时只能运行一个isolate</p><p>难点：</p><ol><li>任务进入队列后，如果通知调用方？—- 通过查看compute()源码得知：通过Completer</li><li>队列里的传入类型不确定，无法使用泛型？—– 去掉compute()的泛型，整体使用dynamic</li></ol><p>DioManager管理类：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Task</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Function</span> callback;</span><br><span class="line">    <span class="built_in">dynamic</span> message;</span><br><span class="line">    Completer&lt;<span class="built_in">dynamic</span>&gt; result;</span><br><span class="line"></span><br><span class="line">    _Task(&#123;</span><br><span class="line">        <span class="keyword">this</span>.callback,</span><br><span class="line">        <span class="keyword">this</span>.message,</span><br><span class="line">        <span class="keyword">this</span>.result</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsolateManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> IsolateManager _isolateManager = <span class="keyword">new</span> IsolateManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> IsolateManager getInstance()&#123;</span><br><span class="line">        <span class="keyword">return</span> _isolateManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;<span class="built_in">Object</span>&gt; _queue = Queue&lt;<span class="built_in">Object</span>&gt;();</span><br><span class="line">    <span class="built_in">bool</span> _running = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    IsolateManager();</span><br><span class="line"></span><br><span class="line">    Future&lt;<span class="built_in">dynamic</span>&gt; compute(<span class="built_in">Function</span> callback, <span class="built_in">dynamic</span> message) <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="comment">// 先入队列，再整体分配，不然可能会同时创建过多的isolate</span></span><br><span class="line">        <span class="keyword">final</span> Completer&lt;<span class="built_in">dynamic</span>&gt; result = Completer&lt;<span class="built_in">dynamic</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入队列</span></span><br><span class="line">        _Task _task = _Task(callback: callback, message: message, result: result);</span><br><span class="line">        _queue.add(_task);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发队列执行</span></span><br><span class="line">        taskDispatch();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> taskDispatch() <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="comment">// 先判断当是否有任务在执行</span></span><br><span class="line">        <span class="keyword">if</span>(_running) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(_queue.isEmpty)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _running = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 获取列队并执行</span></span><br><span class="line">        _Task task = _queue.removeFirst();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> IsolateIo.compute(task.callback, task.message, task.result);</span><br><span class="line"></span><br><span class="line">        _running = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继承任务分发</span></span><br><span class="line">        taskDispatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_isolate_io类：通过修改compute源码实现</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">dynamic</span>&gt; compute(<span class="built_in">Function</span> callback, <span class="built_in">dynamic</span> message, Completer&lt;<span class="built_in">dynamic</span>&gt; result) <span class="keyword">async</span> &#123;</span><br><span class="line"><span class="comment">//    if (!kReleaseMode) &#123;</span></span><br><span class="line">    <span class="built_in">String</span> debugLabel = callback.toString();</span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">final</span> Flow flow = Flow.begin();</span><br><span class="line">    Timeline.startSync(<span class="string">&#x27;<span class="subst">$debugLabel</span>: start&#x27;</span>, flow: flow);</span><br><span class="line">    <span class="keyword">final</span> ReceivePort resultPort = ReceivePort();</span><br><span class="line">    <span class="keyword">final</span> ReceivePort errorPort = ReceivePort();</span><br><span class="line">    Timeline.finishSync();</span><br><span class="line">    <span class="keyword">final</span> Isolate isolate = <span class="keyword">await</span> Isolate.spawn(</span><br><span class="line">        _spawn,</span><br><span class="line">        _IsolateConfiguration(</span><br><span class="line">            callback,</span><br><span class="line">            message,</span><br><span class="line">            resultPort.sendPort,</span><br><span class="line">            debugLabel,</span><br><span class="line">            flow.id,</span><br><span class="line">        ),</span><br><span class="line">        errorsAreFatal: <span class="keyword">true</span>,</span><br><span class="line">        onExit: resultPort.sendPort,</span><br><span class="line">        onError: errorPort.sendPort,</span><br><span class="line">    );</span><br><span class="line"><span class="comment">//    final Completer&lt;R&gt; result = Completer&lt;R&gt;();</span></span><br><span class="line">    errorPort.listen((<span class="built_in">dynamic</span> errorData) &#123;</span><br><span class="line">        <span class="keyword">assert</span>(errorData <span class="keyword">is</span> <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;);</span><br><span class="line">        <span class="keyword">assert</span>(errorData.length == <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">final</span> Exception exception = Exception(errorData[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">final</span> StackTrace stack = StackTrace.fromString(errorData[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (result.isCompleted) &#123;</span><br><span class="line">            Zone.current.handleUncaughtError(exception, stack);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.completeError(exception, stack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    resultPort.listen((<span class="built_in">dynamic</span> resultData) &#123;</span><br><span class="line"><span class="comment">//        assert(resultData == null || resultData is R);</span></span><br><span class="line">        <span class="keyword">assert</span>(resultData != <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (!result.isCompleted)</span><br><span class="line">            result.complete(resultData);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> result.future;</span><br><span class="line">    Timeline.startSync(<span class="string">&#x27;<span class="subst">$debugLabel</span>: end&#x27;</span>, flow: Flow.end(flow.id));</span><br><span class="line">    resultPort.close();</span><br><span class="line">    errorPort.close();</span><br><span class="line">    isolate.kill();</span><br><span class="line">    Timeline.finishSync();</span><br><span class="line">    <span class="keyword">return</span> result.future;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_IsolateConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _IsolateConfiguration(</span><br><span class="line">        <span class="keyword">this</span>.callback,</span><br><span class="line">        <span class="keyword">this</span>.message,</span><br><span class="line">        <span class="keyword">this</span>.resultPort,</span><br><span class="line">        <span class="keyword">this</span>.debugLabel,</span><br><span class="line">        <span class="keyword">this</span>.flowId,</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Function</span> callback;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">dynamic</span> message;</span><br><span class="line">    <span class="keyword">final</span> SendPort resultPort;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> debugLabel;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> flowId;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dynamic</span> apply() =&gt; callback(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _spawn(_IsolateConfiguration configuration) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">dynamic</span> result;</span><br><span class="line">    <span class="keyword">await</span> Timeline.timeSync(</span><br><span class="line">        <span class="string">&#x27;<span class="subst">$&#123;configuration.debugLabel&#125;</span>&#x27;</span>,</span><br><span class="line">            () <span class="keyword">async</span> &#123; result = <span class="keyword">await</span> configuration.apply(); &#125;,</span><br><span class="line">        flow: Flow.step(configuration.flowId),</span><br><span class="line">    );</span><br><span class="line">    Timeline.timeSync(</span><br><span class="line">        <span class="string">&#x27;<span class="subst">$&#123;configuration.debugLabel&#125;</span>: returning result&#x27;</span>,</span><br><span class="line">            () &#123; configuration.resultPort.send(result); &#125;,</span><br><span class="line">        flow: Flow.step(configuration.flowId),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://dart.goodev.org/guides/language/language-tour">Dart 语法预览</a></li><li><a href="https://codingwithjoe.com/dart-fundamentals-isolates/">Dart Fundamentals – Isolates</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart语法&quot;&gt;&lt;a href=&quot;#Dart语法&quot; class=&quot;headerlink&quot; title=&quot;Dart语法&quot;&gt;&lt;/a&gt;Dart语法&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
    <category term="Flutter" scheme="https://handsomeliuyang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习笔记3：纹理</title>
    <link href="https://handsomeliuyang.github.io/2019/08/17/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%EF%BC%9A%E7%BA%B9%E7%90%86/"/>
    <id>https://handsomeliuyang.github.io/2019/08/17/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%EF%BC%9A%E7%BA%B9%E7%90%86/</id>
    <published>2019-08-17T03:56:19.000Z</published>
    <updated>2020-10-24T05:44:22.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h1><p>关键点：</p><ol><li>纹理Texture的作用：通过指定顶点的颜色来设置效果，实现成本非常大，通过Textures（一张2D图片）来实现，成本就会低很多</li><li>映射过程：为顶点指定Textures上的纹理坐标（Texture Coordinate）</li><li>纹理坐标：坐标原点在<strong>左下角</strong>，范围[0, 1]</li><li>纹理映射过程称为：Sampling（采样）</li><li>纹理Texture的Paramete有两种：<ol><li>Texture Wrapping（纹理环绕方式）<ol><li>如默认值为GL_REPEAT</li><li>设置方式是按坐标轴设置，2D的是s,t, 如果是使用3D纹理那么还有一个r</li><li>代码：<ol><li>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);</li><li>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</li></ol></li></ol></li><li>Texture Filtering（纹理过滤），用于处理放大或缩小后的处理方式<ol><li>放大后出现素颗粒效果：GL_NEAREST（邻近过滤，默认过滤方式）</li><li>放大后出现虚化效果：GL_LINEAR（线性过滤，计算近似值）</li></ol></li><li>最佳设置方式：<ol><li>缩小时邻近过滤：glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);</li><li>放大时线性过滤：glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</li></ol></li></ol></li><li>当物体距离观察者越来越远时，物体越来越小，使用高清纹理Sampling，出现采样困难和内存浪费问题<ol><li>解决方案：Mipmap（多级渐远纹理），其原理：距离观察者的距离超过一定的阈值，会使用不同的纹理图</li><li>Mipmap可以设置不同的纹理过滤效果，用于解决两个不同级别的多级渐远纹理层之间会产生生硬边界</li></ol></li><li>纹理图片加载：<ol><li>方式：通过stb_image.h库，把图片加载内存中</li><li>注意：图片的原点坐标在左上角，但纹理在左下角，图片默认会倒立，可通过stb_image的方法纠正：stbi_set_flip_vertically_on_load(true);</li></ol></li><li>纹理生成：<ol><li>方式：通过api：glTexImage2D生成纹理</li></ol></li><li>传递给着色器：<ol><li>方式：通过激活纹理单元<ol><li>glActiveTexture(GL_TEXTURE1);</li><li>着色器：uniform sampler2D texture1</li></ol></li><li>目的：同时支持多个Texture，一般至少可以支持0…16个纹理</li></ol></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/06%20Textures/">纹理</a></li><li><a href="https://learnopengl.com/Getting-started/Textures">Textures</a></li><li><a href="http://docs.gl/gl3/glTexImage2D">opengl的api文档</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;纹理&quot;&gt;&lt;a href=&quot;#纹理&quot; class=&quot;headerlink&quot; title=&quot;纹理&quot;&gt;&lt;/a&gt;纹理&lt;/h1&gt;&lt;p&gt;关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;纹理Texture的作用：通过指定顶点的颜色来设置效果，实现成本非常大，通过Textures（一张2D图</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="OpenGL" scheme="https://handsomeliuyang.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>部落详情页RN化（ReactNative实现高度不确定的评论类列表）</title>
    <link href="https://handsomeliuyang.github.io/2019/07/28/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/"/>
    <id>https://handsomeliuyang.github.io/2019/07/28/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/</id>
    <published>2019-07-28T03:17:46.000Z</published>
    <updated>2020-10-24T05:21:21.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题及思路"><a href="#问题及思路" class="headerlink" title="问题及思路"></a>问题及思路</h1><iframe height= 520 width= 100% src="/2019/07/28/部落详情页RN化/tridedetail_native.mp4" frameborder=0 allowfullscreen></iframe><p>如上视频所示，上述效果里，有很多的无法确定字体数量及高度的回复类消息，此类列表消息，通过FlatList等控件，实现后的效果会很差。</p><p>针对此问题的优化思路：</p><ol><li>使用recyclerlistview控件替换flatlist控件，实现对Item的复用</li><li>提前通过Native计算Text的高度</li></ol><h1 id="具体实现过程"><a href="#具体实现过程" class="headerlink" title="具体实现过程"></a>具体实现过程</h1><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>框架结构：</p><ol><li>依据官方文档，基于0.57.8创建ReactNative项目</li><li>安装依赖库：<ol><li>状态管理：（注意：要安装对应版本，不能安装最新版本）<ol><li>redux-3.7.2（4.0.1不会起效果）</li><li>react-redux-5.0.7（6.0.0，7.0.0会报错）</li><li>中间件：<ol><li>异步：redux-thunk</li><li>日志：redux-logger</li></ol></li></ol></li><li>路由：react-navigation</li><li>Prop类型：prop-types</li></ol></li><li>目录结构，并实现基础框架能力：入口，Route，Redux，中间件等等。</li></ol><h2 id="recyclerlistview"><a href="#recyclerlistview" class="headerlink" title="recyclerlistview"></a>recyclerlistview</h2><p>详情页整体是一个列表，可选择的列表控件有：ListView，FlatList，RecyclerListView。其中RecylerListView的性能最好，其灵感来源于Android-RecyclerView和iOS-UICollectionView的实现思路。</p><p>recyclerlistview的使用很简单，主要是三个属性：</p><ol><li>dataProvider：数据源</li><li>layoutProvider：指定Item的type，同时指定对应Item的width和height</li><li>rowRenderer：具体Item的render</li></ol><p>recyclerlistview高性能的原因：</p><ol><li>对View的复用</li><li>通过提前得到的Item宽度和高度，当快速滑动时，只绘制显示区域的内容</li></ol><p>对于无法提前准确预估Item高度的情况下，通过forceNonDeterministicRendering=true，会通过实际高度进行纠正，当预估值与实现值差距较大时，对性能影响很大。</p><p>具体的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDetail</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props, forceNonDeterministicRendering</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>._forceNonDeterministicRendering = forceNonDeterministicRendering;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取屏幕的宽度</span></span><br><span class="line">    <span class="keyword">let</span> &#123; width &#125; = Dimensions.get(<span class="string">&quot;window&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> dataProvider = <span class="keyword">new</span> DataProvider(<span class="function">(<span class="params">r1, r2</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> r1 !== r2;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create the layout provider</span></span><br><span class="line">    <span class="comment">// First method: given an index return the type of item</span></span><br><span class="line">    <span class="comment">// Second: Given a type and object, set the height and width for that type on given object</span></span><br><span class="line">    <span class="built_in">this</span>._layoutProvider = <span class="keyword">new</span> LayoutProvider(</span><br><span class="line">      index =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">this</span>.state.dataProvider.getDataForIndex(index);</span><br><span class="line">        <span class="comment">// 返回对应index的VIEW_TYPE</span></span><br><span class="line">        <span class="comment">//if(data.user)&#123;</span></span><br><span class="line">        <span class="comment">//  return UserInfo.VIEW_TYPE;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;EMPTY&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      (type, dim, index) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">this</span>.state.dataProvider.getDataForIndex(index);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">          <span class="comment">// 返回对应view的预估高度和宽度</span></span><br><span class="line">          <span class="comment">// case UserInfo.VIEW_TYPE:</span></span><br><span class="line">          <span class="comment">//  dim.width = width;</span></span><br><span class="line">          <span class="comment">//  dim.height = UserInfo.ITEM_HEIGHT;</span></span><br><span class="line">          <span class="comment">//  break;</span></span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            dim.width = <span class="number">0</span>;</span><br><span class="line">            dim.height = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._rowRenderer = <span class="built_in">this</span>._rowRenderer.bind(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      dataProvider: dataProvider.cloneWithRows([])</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_rowRenderer</span>(<span class="params">type, data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; width &#125; = Dimensions.get(<span class="string">&quot;window&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="comment">// 返回具体的View</span></span><br><span class="line">      <span class="comment">// case UserInfo.VIEW_TYPE:</span></span><br><span class="line">      <span class="comment">//  return (</span></span><br><span class="line">      <span class="comment">//    &lt;UserInfo url=&#123;data.user.avator&#125; name=&#123;data.user.name&#125; tag=&#123;data.user.time&#125;/&gt;</span></span><br><span class="line">      <span class="comment">//  );</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;fetchMoreAnswerList, tribeDetail&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一页的loading</span></span><br><span class="line">    <span class="keyword">let</span> renderFooter;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.state.dataProvider.getSize() === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">      renderFooter = <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      renderFooter = <span class="xml"><span class="tag">&lt;<span class="name">LoadingMore</span> <span class="attr">loadingStatus</span>=<span class="string">&#123;</span> <span class="attr">tribeDetail.loadingStatus</span> || <span class="attr">0</span> &#125;/&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">backgroundColor</span>: <span class="string">&#x27;#ffffff&#x27;</span>, <span class="attr">flex</span>: <span class="number">1</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;RecyclerListView</span><br><span class="line">          layoutProvider=&#123;<span class="built_in">this</span>._layoutProvider&#125;</span><br><span class="line">          dataProvider=&#123;<span class="built_in">this</span>.state.dataProvider&#125;</span><br><span class="line">          rowRenderer=&#123;<span class="built_in">this</span>._rowRenderer&#125;</span><br><span class="line">          forceNonDeterministicRendering=&#123;<span class="built_in">this</span>._forceNonDeterministicRendering&#125;</span><br><span class="line">          onEndReachedThreshold=&#123;<span class="number">30</span>&#125;</span><br><span class="line">          onEndReached=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fetchMoreAnswerList();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          renderFooter=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> renderFooter;</span><br><span class="line">          &#125;&#125;/&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应Item组件的模板代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  StyleSheet,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXX</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 常量，指定当前View的预估高度和VIEW_TYPE</span></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">74</span>;</span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;XXXX&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;...&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">          ...</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex:<span class="number">1</span>, <span class="comment">// 最外层的布局需要添加，使width达到fill_parent效果</span></span><br><span class="line">    height: UserInfo.ITEM_HEIGHT,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Item-UserInfo"><a href="#Item-UserInfo" class="headerlink" title="Item: UserInfo"></a>Item: UserInfo</h2><p><strong>数据</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;action&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line"><span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic7.58cdn.com.cn/m1/bigimage/n_v279754383953a416b9d5ede99694d806e.jpg?t=1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;荣光依旧&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time&quot;</span>: <span class="string">&quot;7月10日&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/userinfo.png"></p><p><strong>实现</strong></p><p>通过Item模板，创建UserInfo组件类，通过Flexbox布局即可实现，注意两个细节：</p><ol><li>圆角图片：通过css属性roundAsCircle即可实现</li><li>按钮：ReactNative的Button组件的定制能力很差</li></ol><p>具体代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">74</span>;</span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;UserInfo&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    url: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    tag: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    url: PropTypes.string,</span><br><span class="line">    name: PropTypes.string,</span><br><span class="line">    tag: PropTypes.string</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;url, name, tag&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Image</span><br><span class="line">          style=&#123;styles.image&#125;</span><br><span class="line">          roundAsCircle=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">          source=&#123;&#123;<span class="attr">uri</span>: url&#125;&#125;/&gt;</span><br><span class="line">        &lt;View style=&#123;styles.content&#125;&gt;</span><br><span class="line">          &lt;Text style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;#071A1D&#x27;</span>, <span class="attr">fontSize</span>: <span class="number">14</span>&#125;&#125;&gt;&#123;name&#125;&lt;/Text&gt;</span><br><span class="line">          &lt;Text style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;#858688&#x27;</span>, <span class="attr">fontSize</span>: <span class="number">11</span>&#125;&#125;&gt;&#123;tag&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">        &lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            title=<span class="string">&#x27;+ 关注&#x27;</span></span><br><span class="line">            color=<span class="string">&#x27;#FFCE06&#x27;</span></span><br><span class="line">            onPress=&#123;<span class="function">()=&gt;</span>alert(<span class="string">&#x27;click 关注&#x27;</span>)&#125;/&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex:<span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    height: UserInfo.ITEM_HEIGHT,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;#ffffff&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  image: &#123;</span><br><span class="line">    width: <span class="number">36</span>,</span><br><span class="line">    height: <span class="number">36</span>,</span><br><span class="line">    marginLeft: <span class="number">15</span>,</span><br><span class="line">    borderRadius: <span class="number">35</span></span><br><span class="line">  &#125;,</span><br><span class="line">  button: &#123;</span><br><span class="line">    height: <span class="number">27</span>,</span><br><span class="line">    marginRight: <span class="number">15</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;flex-start&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    marginLeft: <span class="number">8</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="图文混排控件：FacialText"><a href="#图文混排控件：FacialText" class="headerlink" title="图文混排控件：FacialText"></a>图文混排控件：FacialText</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;许多人，活着没有选择的权利，只有干[努力]，无论怎样的环境，怎样的境遇，扛着的是家，担着的是责任[你最棒]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/FacialText.png"></p><p><strong>实现</strong></p><p>在RN实现图文混排，主要是通过Text里的嵌套功能：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text&gt;</span><br><span class="line">    许多人，活首没有选择的权利，只有干</span><br><span class="line">    &lt;Image srouce=&#123;努力&#125; style=&#123;&#123;<span class="attr">width</span>: fontSize, <span class="attr">heigth</span>: fontSize&#125;&#125;/&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/Text&gt;</span><br></pre></td></tr></table></figure><p>主要的工作量是在对传入的文本进行转换处理，把传入的文本字符串，转换为数组，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FacialText</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 支持的表情</span></span><br><span class="line">  <span class="keyword">static</span> FACIAL_IMAGES = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;[努力]&#x27;</span>: <span class="built_in">require</span>(<span class="string">&#x27;./tribe_facial_25.png&#x27;</span>),</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defalutProps = &#123;</span><br><span class="line">    facialText: <span class="literal">null</span>,</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    fontSize: <span class="number">12</span>,</span><br><span class="line">    color: <span class="string">&#x27;#000000&#x27;</span>,</span><br><span class="line">    onLayout: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    facialText: PropTypes.object,</span><br><span class="line">    content: PropTypes.string,</span><br><span class="line">    fontSize: PropTypes.number,</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">    onLayout: PropTypes.func,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 对文本转换</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">handleFacial</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> spanArray = [];</span><br><span class="line">    <span class="keyword">var</span> computerHeightText = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> imageCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> span = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> index=<span class="number">0</span>; index &lt; content.length; index++</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> char = content[index];</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">!span</span>)</span> &#123;</span><br><span class="line">        span = &#123;</span><br><span class="line">          type: char === <span class="string">&#x27;[&#x27;</span>?<span class="string">&#x27;image&#x27;</span>:<span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">          start: index</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">char === <span class="string">&#x27;[&#x27;</span></span>)</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">span &amp;&amp; span.type===<span class="string">&#x27;text&#x27;</span></span>)</span> &#123;</span><br><span class="line">          span.end = index-<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">const</span> text = content.substring(span.start, span.end+<span class="number">1</span>);</span><br><span class="line">          span.content = text;</span><br><span class="line">          spanArray.push(span);</span><br><span class="line">          computerHeightText += text;</span><br><span class="line"></span><br><span class="line">          span = &#123;</span><br><span class="line">            type: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">            start: index</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">char === <span class="string">&#x27;]&#x27;</span></span>)</span>&#123;</span><br><span class="line">        span.end = index;</span><br><span class="line">        <span class="keyword">const</span> text = content.substring(span.start, span.end+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> facialImage = FacialText.FACIAL_IMAGES[text];</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">facialImage</span>)</span> &#123;</span><br><span class="line">          span.content = facialImage;</span><br><span class="line">          imageCount++;</span><br><span class="line">          computerHeightText += <span class="string">&#x27;图&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          span.content = text;</span><br><span class="line">          span.type = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">          computerHeightText += text;</span><br><span class="line">        &#125;</span><br><span class="line">        spanArray.push(span);</span><br><span class="line"></span><br><span class="line">        span = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">span</span>)</span>&#123;</span><br><span class="line">      span.end = content.length-<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">const</span> text = content.substring(span.start, span.end+<span class="number">1</span>);</span><br><span class="line">      span.content = text;</span><br><span class="line">      spanArray.push(span);</span><br><span class="line">      computerHeightText += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      spanArray: spanArray,</span><br><span class="line">      computerHeightText: computerHeightText,</span><br><span class="line">      imageCount: imageCount,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;content, fontSize, color, onLayout&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">var</span> &#123;facialText&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提前计算高度时，会提前对文本串进行处理，不用重复处理</span></span><br><span class="line">    facialText = facialText || FacialText.handleFacial(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text style=&#123;&#123;<span class="attr">fontSize</span>: fontSize, <span class="attr">color</span>: color&#125;&#125; onLayout=&#123;onLayout&#125;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          facialText.spanArray.map(<span class="function">(<span class="params">value, index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">value.type === <span class="string">&#x27;image&#x27;</span></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">source</span>=<span class="string">&#123;value.content&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">fontSize</span>, <span class="attr">height:</span> <span class="attr">fontSize</span>&#125;&#125;/&gt;</span></span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> value.content;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/Text&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Item-Content"><a href="#Item-Content" class="headerlink" title="Item: Content"></a>Item: Content</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;白天平均温度36°，真佩服工地里的建筑工人们，在这里大大的给他们一个赞。&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/Content.png"></p><p><strong>实现</strong></p><p>此文本控件非常简单，注意点：</p><ol><li>需要在文本控件上嵌套一层View，原因：用于使用onLayout时，获取的是其实际高度。</li><li>预估的高度很不准确，改进思路：<ol><li>通过js的方式，通过文本预估实际高度</li><li>通过module，由native提前预估实际高度</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FacialText <span class="keyword">from</span> <span class="string">&#x27;../facialIcon/facialText&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentText</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">100</span>; <span class="comment">// 这个值很不准备</span></span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;ContentText&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    facialText: <span class="literal">null</span>,</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    onLayout: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    facialText: PropTypes.object,</span><br><span class="line">    content: PropTypes.string,</span><br><span class="line">    onLayout: PropTypes.func</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;content, onLayout, facialText&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span>:<span class="number">1</span>, <span class="attr">marginRight</span>: <span class="number">15</span>, <span class="attr">marginLeft</span>: <span class="number">15</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;FacialText facialText=&#123;facialText&#125; onLayout=&#123;onLayout&#125; content=&#123;content&#125; fontSize=&#123;<span class="number">17</span>&#125; color=<span class="string">&#x27;#57595BFF&#x27;</span>/&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Item-PictureArea"><a href="#Item-PictureArea" class="headerlink" title="Item: PictureArea"></a>Item: PictureArea</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;picture_area&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;height&quot;</span>: <span class="number">1080</span>,</span><br><span class="line">        <span class="attr">&quot;pic&quot;</span>: <span class="string">&quot;https://pic8.58cdn.com.cn/mobile/big/n_v2bda58b4d3d464ec4b9b104c7a7c744bb.jpg?t=1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;width&quot;</span>: <span class="number">1440</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/PictureArea.png"></p><p><strong>实现</strong></p><p>图片控件的布局很简单，关键点：</p><ol><li>通过图片的长宽比，屏幕的宽度，计算出实际高度</li><li>图片的圆角，通过css的borderRadius属性实现</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PictureArea</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;PictureArea&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    uri: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    width: <span class="number">0</span>,</span><br><span class="line">    height: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    uri: PropTypes.string,</span><br><span class="line">    width: PropTypes.number,</span><br><span class="line">    height: PropTypes.number</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;uri, width, height&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Image</span><br><span class="line">        source=&#123;&#123;<span class="attr">uri</span>: uri&#125;&#125;</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">          width: width,</span><br><span class="line">          height: height,</span><br><span class="line">          marginLeft: <span class="number">15</span>,</span><br><span class="line">          marginRight: <span class="number">15</span>,</span><br><span class="line">          borderRadius: <span class="number">5</span>,</span><br><span class="line">          marginTop: <span class="number">10</span></span><br><span class="line">        &#125;&#125;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Item-Related"><a href="#Item-Related" class="headerlink" title="Item: Related"></a>Item: Related</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;related&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cbd&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: ...,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;建筑工基地&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;https://a.58cdn.com.cn/app58/icons/buluo/Rectangle1122@3x.png&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;大庆 其他&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/Related.png"></p><p><strong>实现</strong></p><p>此控件实现非常简单，直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Related</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">50</span>;</span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;Related&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    locationicon: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    location: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    cbdname: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    width: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    locationicon: PropTypes.string,</span><br><span class="line">    location: PropTypes.string,</span><br><span class="line">    cbdname: PropTypes.string,</span><br><span class="line">    width: PropTypes.number</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;locationicon, location, cbdname, width&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Image source=&#123;&#123;<span class="attr">uri</span>:locationicon&#125;&#125; style=&#123;styles.image&#125;/&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.location&#125;&gt;&#123;location&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>&#125;&#125;/&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.cbdfrom&#125;&gt;来自&lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.cbdname&#125;&gt;&#123;cbdname&#125;&lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    paddingLeft: <span class="number">15</span>,</span><br><span class="line">    paddingRight: <span class="number">15</span>,</span><br><span class="line">    height: Related.ITEM_HEIGHT,</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  image: &#123;</span><br><span class="line">    width: <span class="number">16</span>,</span><br><span class="line">    height: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  location: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#585C5D&#x27;</span>,</span><br><span class="line">    fontSize: <span class="number">13</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cbdfrom: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#585C5D&#x27;</span>,</span><br><span class="line">    fontSize: <span class="number">13</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cbdname: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#FFBD03&#x27;</span>,</span><br><span class="line">    fontSize: <span class="number">13</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Item-Interactive"><a href="#Item-Interactive" class="headerlink" title="Item: Interactive"></a>Item: Interactive</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;interactive&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;like_users&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;total&quot;</span>: <span class="number">798</span>, </span><br><span class="line">            <span class="attr">&quot;users&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic7.58cdn.com.cn/m1/bigimage/n_v27275ddfd821d4962baaa52f50450f4c0.jpg?t=1&quot;</span>,</span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic5.58cdn.com.cn/m1/bigimage/n_v2572c4e76c66d4ceea964e381fa17360d.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic6.58cdn.com.cn/m1/bigimage/n_v25847dcf051e04cb29fb746c5833489b8.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic6.58cdn.com.cn/m1/bigimage/n_v27c8a2a1c51a8428799fd59ed79dfab79.jpg?t=1&quot;</span>,</span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic1.58cdn.com.cn/m1/bigimage/n_19781820677644.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic1.58cdn.com.cn/m1/bigimage/n_v2341a33e689c0477ead4674ca8aafedd6.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic4.58cdn.com.cn/m1/bigimage/n_v2ce8072ad0635446ba708b8f4c9f70d89.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic3.58cdn.com.cn/m1/bigimage/n_v232f07077747642efa41308a0cf03db5f.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic7.58cdn.com.cn/m1/bigimage/n_v23cd90550c2904669ad72af0b0e549db6.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic1.58cdn.com.cn/m1/bigimage/n_v2f34d5473ebf4419483d7bcada829f83e.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic1.58cdn.com.cn/m1/bigimage/n_v2e5b7cc2f976245768bd3248572466eac.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic5.58cdn.com.cn/m1/bigimage/n_v24eb6218a11f34d6bb0eea50e1da20d9d.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;avator&quot;</span>: <span class="string">&quot;https://pic7.58cdn.com.cn/m1/bigimage/n_v2cea9a16d8abd464f8db80111352fce00.jpg?t=1&quot;</span>, </span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/Interactive.png"></p><p><strong>实现</strong></p><p>关键点：</p><ol><li>叠加布局的实现（相当于Android里的相对布局）：<ol><li>通过position:’absolute’，实现叠加</li><li>通过相对于parent的top, bottom, left, right来实现定位</li></ol></li><li>Android里的Shape的属性stoke和corners的实现方案：使用css的borderWidth，borderColor，borderRadius属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Interactive</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">250</span>;</span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&quot;Interactive&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    likeTotal: <span class="number">0</span>,</span><br><span class="line">    users: []</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    likeTotal: PropTypes.number,</span><br><span class="line">    users: PropTypes.array</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;likeTotal, users&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据进行转换处理，转换为两行显示</span></span><br><span class="line">    <span class="keyword">let</span> firstUsers = [];</span><br><span class="line">    <span class="keyword">let</span> secondUsers = [];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++</span>)</span>&#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">i &lt; users.length</span>)</span> &#123;</span><br><span class="line">        firstUsers.push(users[i].avator);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        firstUsers.push(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">(i+<span class="number">7</span>) &lt; users.length</span>)</span> &#123;</span><br><span class="line">        secondUsers.push(users[i+<span class="number">7</span>].avator);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        secondUsers.push(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;styles.firstRow&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.shareBtn&#125;&gt;</span><br><span class="line">            &lt;Image</span><br><span class="line">              source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./tribe_detail_share_icon.png&#x27;</span>)&#125;</span><br><span class="line">              style=&#123;&#123;<span class="attr">width</span>: <span class="number">22</span>, <span class="attr">height</span>: <span class="number">22</span>, <span class="attr">marginRight</span>: <span class="number">3</span>&#125;&#125;/&gt;</span><br><span class="line">            &lt;Text style=&#123;&#123;<span class="attr">fontSize</span>: <span class="number">13</span>, <span class="attr">color</span>: <span class="string">&#x27;#06191C&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">              分享</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">            &lt;Image</span><br><span class="line">              source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./tribe_coin.png&#x27;</span>)&#125;</span><br><span class="line">              style=&#123;&#123;<span class="attr">width</span>: <span class="number">16</span>, <span class="attr">height</span>: <span class="number">16</span>, <span class="attr">position</span>: <span class="string">&#x27;absolute&#x27;</span>, <span class="attr">bottom</span>:<span class="number">1</span>, <span class="attr">left</span>: <span class="number">25</span>&#125;&#125;/&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">          &lt;View style=&#123;styles.likeBtn&#125;&gt;</span><br><span class="line">            &lt;Image</span><br><span class="line">              source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./tribe_detail_liked_icon.png&#x27;</span>)&#125;</span><br><span class="line">              style=&#123;&#123;<span class="attr">width</span>: <span class="number">22</span>, <span class="attr">height</span>: <span class="number">22</span>, <span class="attr">marginRight</span>: <span class="number">3</span>&#125;&#125;/&gt;</span><br><span class="line">            &lt;Text style=&#123;&#123;<span class="attr">fontSize</span>: <span class="number">13</span>, <span class="attr">color</span>: <span class="string">&#x27;#06191C&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">              &#123;likeTotal&#125;</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Text style=&#123;styles.likeText&#125;&gt;&#123;likeTotal&#125;人已点赞&lt;/Text&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View style=&#123;styles.iconRow&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.iconLine1&#125;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              firstUsers.map(<span class="function">(<span class="params">user, index</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                  &lt;Image</span><br><span class="line">                    key=&#123;index&#125;</span><br><span class="line">                    style=&#123;styles.icon&#125;</span><br><span class="line">                    source=&#123;&#123;<span class="attr">uri</span>: user&#125;&#125;/&gt;</span><br><span class="line">                );</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">          &lt;View style=&#123;styles.iconLine1&#125;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              secondUsers.map(<span class="function">(<span class="params">user, index</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                  &lt;Image</span><br><span class="line">                    key=&#123;index&#125;</span><br><span class="line">                    style=&#123;styles.icon&#125;</span><br><span class="line">                    source=&#123;&#123;<span class="attr">uri</span>: user&#125;&#125;/&gt;</span><br><span class="line">                );</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;flex-start&#x27;</span>,</span><br><span class="line">    height: Interactive.ITEM_HEIGHT,</span><br><span class="line">  &#125;,</span><br><span class="line">  firstRow: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;space-around&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    height: <span class="number">96</span>,</span><br><span class="line">    marginLeft: <span class="number">25</span>,</span><br><span class="line">    marginRight: <span class="number">25</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  shareBtn: &#123;</span><br><span class="line">    width: <span class="number">110</span>,</span><br><span class="line">    height: <span class="number">36</span>,</span><br><span class="line">    borderWidth: <span class="number">1</span>,</span><br><span class="line">    borderColor: <span class="string">&#x27;#E9EEEF&#x27;</span>,</span><br><span class="line">    borderRadius: <span class="number">18</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  likeBtn: &#123;</span><br><span class="line">    width: <span class="number">110</span>,</span><br><span class="line">    height: <span class="number">36</span>,</span><br><span class="line">    borderWidth: <span class="number">1</span>,</span><br><span class="line">    borderColor: <span class="string">&#x27;#FED40D&#x27;</span>,</span><br><span class="line">    borderRadius: <span class="number">18</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  likeText: &#123;</span><br><span class="line">    fontSize: <span class="number">12</span>,</span><br><span class="line">    color: <span class="string">&#x27;#84898B&#x27;</span>,</span><br><span class="line">    marginBottom: <span class="number">20</span>,</span><br><span class="line">    alignSelf: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  iconRow: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">    marginLeft: <span class="number">21.5</span>,</span><br><span class="line">    marginRight: <span class="number">12.5</span>,</span><br><span class="line">    marginBottom: <span class="number">30</span></span><br><span class="line">  &#125;,</span><br><span class="line">  iconLine1: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    height: <span class="number">46</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;space-around&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  icon: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    marginRight: <span class="number">5</span>,</span><br><span class="line">    marginLeft: <span class="number">5</span>,</span><br><span class="line">    height: <span class="number">40</span>,</span><br><span class="line">    borderRadius: <span class="number">35</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Item-SectionGap"><a href="#Item-SectionGap" class="headerlink" title="Item: SectionGap"></a>Item: SectionGap</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;section_gap&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;#F7F7F7&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;height&quot;</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/SectionGap.png"></p><p><strong>实现</strong></p><p>实现非常简单，高度由数据控制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SectionGap</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;SectionGap&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    height: <span class="number">0</span>,</span><br><span class="line">    color: <span class="string">&#x27;#ffffff&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    height: PropTypes.number,</span><br><span class="line">    color: PropTypes.string</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;height, color&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span>:<span class="number">1</span>, <span class="attr">height</span>: height, <span class="attr">backgroundColor</span>: color&#125;&#125;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Item-ReplyTitle"><a href="#Item-ReplyTitle" class="headerlink" title="Item: ReplyTitle"></a>Item: ReplyTitle</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;reply_title&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;replytype&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;热门回复&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/ReplyTitle.png"></p><p><strong>实现</strong></p><p>效果简单，直接帖代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplyTitle</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">52</span>;</span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;ReplyTitle&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    text: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    total: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    text: PropTypes.string,</span><br><span class="line">    total: PropTypes.number</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;text, total&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.title&#125;&gt;&#123;text&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.num&#125;&gt;(&#123;total&#125;条)&lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    paddingBottom: <span class="number">15</span>,</span><br><span class="line">    paddingTop: <span class="number">20</span>,</span><br><span class="line">    paddingLeft: <span class="number">16</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    height: ReplyTitle.ITEM_HEIGHT</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    fontSize: <span class="number">16</span>,</span><br><span class="line">    color: <span class="string">&#x27;#06191C&#x27;</span>,</span><br><span class="line">    fontWeight: <span class="string">&#x27;bold&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  num: &#123;</span><br><span class="line">    fontSize: <span class="number">11</span>,</span><br><span class="line">    color: <span class="string">&#x27;#06191C&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Item-Replay"><a href="#Item-Replay" class="headerlink" title="Item: Replay"></a>Item: Replay</h2><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;reply&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;https://pic1.58cdn.com.cn/m1/bigimage/n_v1bl2lwkibms4fmhw2fica.jpg?t=1&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;许多人，活着没有选择的权利，只有干[努力]，无论怎样的环境，怎样的境遇，扛着的是家，担着的是责任[你最棒]&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;like_count&quot;</span>: <span class="number">66</span>, </span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;康安佳&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;sub_reply_list&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;说的太好了&quot;</span>, </span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;专业培训&quot;</span>, </span><br><span class="line">                <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;7月13日&quot;</span>, </span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;这是化工企业吧&quot;</span>, </span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;时675***&quot;</span>, </span><br><span class="line">                <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;7月14日&quot;</span>, </span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;赞同&quot;</span>, </span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;中国公民&quot;</span>, </span><br><span class="line">                <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;7月14日&quot;</span>, </span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;7月13日&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/../../hexo-img/%E9%83%A8%E8%90%BD%E8%AF%A6%E6%83%85%E9%A1%B5RN%E5%8C%96/Replay.png"></p><p><strong>实现</strong></p><p>此控件的效果实现不难，由于回复文字高度不确定，无法提前预估整理高度，其实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FacialText <span class="keyword">from</span> <span class="string">&#x27;../facialIcon/facialText&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Reply</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ITEM_HEIGHT = <span class="number">450</span>;</span><br><span class="line">  <span class="keyword">static</span> VIEW_TYPE = <span class="string">&#x27;Reply&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    avatar: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    username: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    likeNum: <span class="number">0</span>,</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    facialText: <span class="literal">null</span>,</span><br><span class="line">    postData: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    subReplyList: [],</span><br><span class="line">    onLayout: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    avatar: PropTypes.string,</span><br><span class="line">    username: PropTypes.string,</span><br><span class="line">    likeNum: PropTypes.number,</span><br><span class="line">    content: PropTypes.string,</span><br><span class="line">    facialText: PropTypes.object,</span><br><span class="line">    postData: PropTypes.string,</span><br><span class="line">    subReplyList: PropTypes.array,</span><br><span class="line">    onLayout: PropTypes.func,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;avatar, username, likeNum, facialText, content, postData, subReplyList, onLayout&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> subReplyView;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">subReplyList.length &gt; <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">      subReplyView = (</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flexDirection</span>: <span class="string">&#x27;column&#x27;</span>, <span class="attr">paddingLeft</span>: <span class="number">10</span>, <span class="attr">paddingRight</span>: <span class="number">10</span>, <span class="attr">paddingTop</span>: <span class="number">15</span>, <span class="attr">paddingBottom</span>: <span class="number">2</span>,</span><br><span class="line">          backgroundColor: <span class="string">&#x27;#F8F9FB&#x27;</span>, <span class="attr">borderRadius</span>: <span class="number">4</span>, <span class="attr">marginBottom</span>: <span class="number">16</span>&#125;&#125;&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            subReplyList.map(<span class="function">(<span class="params">item, index</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> (</span><br><span class="line">                &lt;Text key=&#123;index&#125; style=&#123;&#123;<span class="attr">fontSize</span>: <span class="number">14</span>, <span class="attr">color</span>: <span class="string">&#x27;#27C2E4&#x27;</span>, <span class="attr">paddingBottom</span>: <span class="number">14</span>&#125;&#125;&gt;&#123;item.name&#125;：&#123;item.content&#125;&lt;/Text&gt;</span><br><span class="line">              );</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;styles.container&#125; onLayout=&#123;onLayout&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.reply&#125;&gt;</span><br><span class="line">            &lt;Image</span><br><span class="line">              source=&#123;&#123;<span class="attr">uri</span>: avatar&#125;&#125;</span><br><span class="line">              style=&#123;styles.avatar&#125;/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View style=&#123;styles.content&#125;&gt;</span><br><span class="line">              &lt;View style=&#123;styles.first&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;styles.username&#125;&gt;&#123;username&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;View style=&#123;&#123;<span class="attr">flexDirection</span>:<span class="string">&#x27;row&#x27;</span>, <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">                  &lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./tribe_reply_unlike.png&#x27;</span>)&#125; style=&#123;&#123;<span class="attr">width</span>:<span class="number">17</span>, <span class="attr">height</span>:<span class="number">17</span>&#125;&#125;/&gt;</span><br><span class="line">                  &lt;Text style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;#585C5D&#x27;</span>, <span class="attr">fontSize</span>: <span class="number">12</span>&#125;&#125;&gt;&#123;likeNum&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">              &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">              &lt;FacialText facialText=&#123;facialText&#125; content=&#123;content&#125; fontSize=&#123;<span class="number">16</span>&#125; color=<span class="string">&#x27;#06191C&#x27;</span>/&gt;</span><br><span class="line"></span><br><span class="line">              &lt;View style=&#123;&#123;<span class="attr">flexDirection</span>: <span class="string">&#x27;row&#x27;</span>, <span class="attr">marginTop</span>: <span class="number">16</span>, <span class="attr">marginBottom</span>: <span class="number">16</span>, <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123;<span class="attr">fontSize</span>: <span class="number">12</span>, <span class="attr">color</span>: <span class="string">&#x27;#84898B&#x27;</span>&#125;&#125;&gt;&#123;postData&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">2</span>, <span class="attr">height</span>: <span class="number">2</span>, <span class="attr">backgroundColor</span>: <span class="string">&#x27;#84898B&#x27;</span>, <span class="attr">marginLeft</span>: <span class="number">6</span>, <span class="attr">marginRight</span>: <span class="number">6</span>&#125;&#125;/&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123;<span class="attr">fontSize</span>: <span class="number">12</span>, <span class="attr">color</span>: <span class="string">&#x27;#06191C&#x27;</span>&#125;&#125;&gt;回复Ta&lt;/Text&gt;</span><br><span class="line">              &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">              &#123;subReplyView&#125;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">          &lt;View style=&#123;styles.sectionLine&#125;/&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">    paddingTop: <span class="number">15</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  reply: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    marginRight: <span class="number">15</span>,</span><br><span class="line">    marginLeft: <span class="number">15</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;flex-start&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  avatar: &#123;</span><br><span class="line">    width: <span class="number">34</span>,</span><br><span class="line">    height: <span class="number">34</span>,</span><br><span class="line">    borderRadius: <span class="number">35</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  username: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#84898B&#x27;</span>,</span><br><span class="line">    fontSize: <span class="number">14</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  first: &#123;</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;space-between&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    height: <span class="number">33</span>,</span><br><span class="line">    marginLeft: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  sectionLine: &#123;</span><br><span class="line">    height: <span class="number">1</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;#ECECEC&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  loadMore: &#123;</span><br><span class="line">    height: <span class="number">80</span>,</span><br><span class="line">    marginTop: <span class="number">8</span>,</span><br><span class="line">    marginBottom: <span class="number">30</span>,</span><br><span class="line">    flexDirection: <span class="string">&#x27;row&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    <span class="comment">// backgroundColor: &#x27;#E6E6FA&#x27;,</span></span><br><span class="line">    borderRadius: <span class="number">50</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;#F6F7F7&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="RecyclerListView自动纠错"><a href="#RecyclerListView自动纠错" class="headerlink" title="RecyclerListView自动纠错"></a>RecyclerListView自动纠错</h2><p>上面的代码实现完后，有两个问题：</p><ol><li>Content组件的高度无法正解预估</li><li>Reply组件的高度无法正解预估</li></ol><p>利用RecyclerListView的forceNonDeterministicRendering=true属性，可以实现实际渲染后，自动纠正。</p><p>使用forceNonDeterministicRendering=true的注意点：</p><ol><li>默认Item的width不是fill_parent，需添加flex:1</li><li>预估值可以通过实际绘制成功后，通过onLayout回调纠正预估值 —– 经测试后，作用不大，无法纠正首次显示</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchTribeDetail, fetchMoreAnswerList &#125; <span class="keyword">from</span> <span class="string">&#x27;../../actions/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> BaseDetail <span class="keyword">from</span> <span class="string">&#x27;./baseDetail&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">BaseDetail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">&#x27;详情页-非强制指定高度&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(props, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fetchTribeDetail &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    fetchTribeDetail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps: Readonly&lt;P&gt;, nextContext: any): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;tribeDetail&#125; = nextProps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> list = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">tribeDetail &amp;&amp; tribeDetail.data &amp;&amp; tribeDetail.data.list</span>)</span>&#123;</span><br><span class="line">      list = tribeDetail.data.list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      dataProvider: <span class="built_in">this</span>.state.dataProvider.cloneWithRows(list)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tribeDetail: state.tribeDetail</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123; fetchTribeDetail, fetchMoreAnswerList &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Detail)</span><br></pre></td></tr></table></figure><iframe height= 520 width= 100% src="/2019/07/28/部落详情页RN化/non_height.mp4" frameborder=0 allowfullscreen></iframe><h2 id="提前计算Text的高度"><a href="#提前计算Text的高度" class="headerlink" title="提前计算Text的高度"></a>提前计算Text的高度</h2><p>提前计算Text的高度有两种方案：</p><ol><li>Js计算</li><li>通过Native计算</li></ol><p>这里主要通过Native计算的方式：</p><ol><li>安装开源库<a href="https://github.com/aMarCruz/react-native-text-size">react-native-text-size</a>，添加计算Module</li><li>在给recyclerlistview设置数据之前，遍历计算data里的text的高度，并保持到data里</li><li>图文混排的文本计算方式：因为图片的显示大小与单个汉字的显示大小一样，只需要把表情符替换为一个汉字就行</li></ol><p>整体效果还是很不错，但还是有两个问题：</p><ol><li>预处理数据，导致白屏时间较长</li><li>Native计算的结果与实现的绘制还是有一些误差，误差比较，在接受范围内</li><li>针对误差的改进办法：利用onLayout的回调，纠正提前预估值。经测试，此方法不推荐，原因如下：<ol><li>要超过一定的范围时，才进行纠正，不然滑动其间会有抖动</li><li>极速滑动时，onLayout的回调结果也不一致 —- 这个无法解决</li></ol></li></ol><iframe height= 520 width= 100% src="/2019/07/28/部落详情页RN化/precomputer_height.mp4" frameborder=0 allowfullscreen></iframe><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Dimensions,</span><br><span class="line">  NativeModules</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchTribeDetail, fetchMoreAnswerList &#125; <span class="keyword">from</span> <span class="string">&#x27;../../actions/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> BaseDetail <span class="keyword">from</span> <span class="string">&#x27;./baseDetail&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> FacialText <span class="keyword">from</span> <span class="string">&#x27;./facialIcon/facialText&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Reply <span class="keyword">from</span> <span class="string">&quot;./reply&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">BaseDetail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">&#x27;详情页-提前计算Text高度（Native）&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(props, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">this</span>.updateData = <span class="built_in">this</span>.updateData.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fetchTribeDetail &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    fetchTribeDetail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps: Readonly&lt;P&gt;, nextContext: any): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;tribeDetail&#125; = nextProps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> list = [];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">tribeDetail &amp;&amp; tribeDetail.data &amp;&amp; tribeDetail.data.list</span>)</span>&#123;</span><br><span class="line">      list = tribeDetail.data.list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.updateData(list);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> updateData(list):<span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> width = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> list</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> item = list[i];</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">item.content</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 已经计算过了，就直接跳过</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">item.content.height</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        item.content.facialText = FacialText.handleFacial(item.content.text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> size = <span class="keyword">await</span> NativeModules.RNTextSize.measure(&#123;</span><br><span class="line">          text: item.content.facialText.computerHeightText,            <span class="comment">// text to measure, can include symbols</span></span><br><span class="line">          width: width - <span class="number">30</span>,            <span class="comment">// max-width of the &quot;virtual&quot; container</span></span><br><span class="line">          fontSize: <span class="number">17</span>,     <span class="comment">// RN font specification</span></span><br><span class="line">        &#125;);</span><br><span class="line">        item.content.height = size.height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">item.reply</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 已经计算过了，就直接跳过</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">item.reply.replyHeight</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        item.reply.facialText = FacialText.handleFacial(item.reply.content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> replyContentSize = <span class="keyword">await</span> NativeModules.RNTextSize.measure(&#123;</span><br><span class="line">          text: item.reply.facialText.computerHeightText,             <span class="comment">// text to measure, can include symbols</span></span><br><span class="line">          width: width - (<span class="number">34</span>+<span class="number">15</span>*<span class="number">2</span>),            <span class="comment">// max-width of the &quot;virtual&quot; container</span></span><br><span class="line">          fontSize: <span class="number">16</span>,     <span class="comment">// RN font specification</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> subReplyHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">item.reply.sub_reply_list</span>)</span>&#123;</span><br><span class="line">          <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j <span class="keyword">in</span> item.reply.sub_reply_list</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> subReply = item.reply.sub_reply_list[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> subReplyContentSize = <span class="keyword">await</span> NativeModules.RNTextSize.measure(&#123;</span><br><span class="line">              text: subReply.name+<span class="string">&#x27;：&#x27;</span>+subReply.content,             <span class="comment">// text to measure, can include symbols</span></span><br><span class="line">              width: width - (<span class="number">34</span>+<span class="number">15</span>*<span class="number">2</span>) - <span class="number">20</span>,            <span class="comment">// max-width of the &quot;virtual&quot; container</span></span><br><span class="line">              fontSize: <span class="number">16</span>,     <span class="comment">// RN font specification</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            subReplyHeight += subReplyContentSize.height + <span class="number">14</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="title">if</span>(<span class="params">subReplyHeight &gt; <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">            subReplyHeight += <span class="number">15</span> + <span class="number">2</span> + <span class="number">16</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        item.reply.replyHeight = <span class="number">92</span> + replyContentSize.height + subReplyHeight;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      dataProvider: <span class="built_in">this</span>.state.dataProvider.cloneWithRows(list)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tribeDetail: state.tribeDetail</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123; fetchTribeDetail, fetchMoreAnswerList &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Detail)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="开发中遇到的问题"><a href="#开发中遇到的问题" class="headerlink" title="开发中遇到的问题"></a>开发中遇到的问题</h2><ol><li>每次重新加载，都需要拿起来摇一摇</li><li>只有调试状态，才能看到console.log的日志</li><li>调试时，需要把ip地址改为localhost</li><li>基于0.57.8的ReactNative项目，依赖第三方库时，要选择对应版本，不能直接通过npm install xxx安装</li><li>颜色区别：Android里是ARGB，RN里是RGBA，不能直接复制android的颜色值</li></ol><h2 id="性能上遇到的问题"><a href="#性能上遇到的问题" class="headerlink" title="性能上遇到的问题"></a>性能上遇到的问题</h2><ol><li>当非常快速滑动时，虽然会快速显示出内容，但还是会看到白屏，无法与纯Native开发的效果对比</li><li>当js与native通过jsbridge频繁交互时（如通过native埋点交互），js的帧率会下降的很快</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>为了提升发性能，应尽量减少js与native的交互，如减少交互频率，交互数据量等等</li><li>对开发效率与性能问题应整体思考：<ol><li>学习Expo，完善脚手架：<ol><li>提前包含第三方的依赖库，解决依赖版本的问题</li><li>支持状态管理，路由支持，Prop类型支持</li><li>Component的模板</li></ol></li><li>学习Expo，实现界面化开发工具，具备如下功能：<ol><li>显示关键信息：<ol><li>自动显示issues信息</li><li>非调试模试下，显示console.log()的日志</li><li>显示metro的编译信息</li><li>显示测试手机信息</li></ol></li><li>通过二维码扫描，打开RN页面，不用手动查IP再输入</li><li>可切换到生产模式，方便测试生产模式的效果</li><li>直接与发布平台对接，可直接进行发布，同时发布时，自动把图片等资源上传到CDN（通过固定资源的目录，如assets目录实现）</li></ol></li><li>学习Expo，实现手机的工具功能（iOS-工具页面，android-通知栏）：<ol><li>通知栏支持Reload与当前的bundle项目名称</li><li>同步显示bundle的编译进度，同时显示编译结果</li><li>提供Module与ReactNative原生组件与自定义组件的Demo页面</li></ol></li><li>学习Expo，优化文档平台和跨平台<ol><li>文档融合ReactNative对应版本的文档，如Module，View等等</li><li>文档上的Demo，可支持二维码扫描后，直接运行</li><li>实现支持跨平台的基础组件，高级组件由基础组件实现</li></ol></li><li>学习Expo，支持两套ReactNative版本，减少版本升级的影响，实现平稳过渡</li><li>学习Expo的异常处理流程：<ol><li>dev状态：出错后，直接显示红色的出错页面</li><li>prod状态：<ol><li>JS使用Sentry来捕获js的异常 —- 重点</li><li>重大js异常：出错后，重新reload；reload还出错，显示出错页面，让用户手动reload</li></ol></li></ol></li></ol></li></ol><p>结论：</p><ol><li>要追求极致体验，还是Native最合适，只有当ReactNative像Flutter一样，真正改变交互方式，不要过渡依赖jsbridge，才会有比较大的改善</li><li>ReactNative的开发效率比Native要快很多，基于MVVM的组件化开发，比Native的开发方式更加合理</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://docs.expo.io/versions/latest/">Getting to know Expo</a></li><li><a href="https://www.jianshu.com/p/8fb7df931eea">react-native项目中从零开始使用redux</a></li><li><a href="http://zhenhua-lee.github.io/react/redux.html">解读redux工作原理</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题及思路&quot;&gt;&lt;a href=&quot;#问题及思路&quot; class=&quot;headerlink&quot; title=&quot;问题及思路&quot;&gt;&lt;/a&gt;问题及思路&lt;/h1&gt;&lt;iframe height= 520 width= 100% src=&quot;/2019/07/28/部落详情页RN化/tri</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="ReactNative" scheme="https://handsomeliuyang.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习笔记2：着色器和C++</title>
    <link href="https://handsomeliuyang.github.io/2019/07/10/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9A%E7%9D%80%E8%89%B2%E5%99%A8%E5%92%8CC++/"/>
    <id>https://handsomeliuyang.github.io/2019/07/10/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9A%E7%9D%80%E8%89%B2%E5%99%A8%E5%92%8CC++/</id>
    <published>2019-07-10T01:04:38.000Z</published>
    <updated>2020-10-24T05:44:56.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-笔记"><a href="#C-笔记" class="headerlink" title="C++笔记"></a>C++笔记</h1><p>关键点：</p><ol><li>C++单个文件的编译及运行：<ol><li>安装编译器：GNU的gcc编译器</li><li>编译：g++ hello.cpp，生成a.out可执行文件</li><li>运行：./a.out</li></ol></li><li>数据类型：大部分与Java类似，差异点如下：<ol><li>布尔类型：bool</li><li>字符：<ol><li>char, 1字节，-128~127</li><li>unsigned，1字节，0~256</li></ol></li><li>整型：<ol><li>short int，2字节</li><li>int，4字节</li><li>long int，8字节</li></ol></li><li>浮点型：<ol><li>float，4字节</li><li>double，8字节</li><li>long double，16字节</li></ol></li><li>计算类型真正所占大小：sizeof(int|float|double)</li><li>类型声明：typedef type newname</li><li>枚举：enum enum-name {} var-list;</li></ol></li><li>声明：函数需声明才能调用<ol><li>变量声明：extern int c;</li><li>函数声明：int func();</li></ol></li><li>定义常量的方法：<ol><li>使用 #define 预处理器</li><li>使用 const 关键字</li></ol></li><li>位运算符：<ol><li>与：&amp;</li><li>或：| </li><li>异或： ^</li><li>非：~</li><li>左移右移：&lt;&lt;  &gt;&gt;</li></ol></li><li>函数：支持默认值及重载</li><li>c风格的字符串：通过char[]数组实现，以’\0’结尾</li><li>C++风格的字符串：string</li><li>指针：<ol><li>指针变量：type *name;</li><li>&amp;：表示取地址符</li><li>*：取值符，表示取指针变量的指针值所指向的变量值</li></ol></li><li>创建对象：<ol><li>Person p(1, 2); // 声明时，对象已经创建</li><li>Person* p; p = new Person(); // 动态内存，与java类似</li></ol></li><li>引用：<ol><li>引用变量是变量的别名，必须定义时，赋值，且无法再修改</li><li>语法：int i = 17; int&amp; r = i;</li></ol></li><li>数据结构：struct，访问成员的方法：<ol><li>变量：book.title</li><li>指针：book-&gt;title</li></ol></li><li>面向对象：class（类）<ol><li>语法：<ol><li>权限：public:</li><li>命名空间：namespace — 相当于包名，与文件名和路径无关<ol><li>定义：namespace name {// 代码}</li><li>使用：<ol><li>using namespace name;</li><li>name::fun;</li></ol></li></ol></li><li>继承：class Rectangle: public Shape（public的作用：统一修改基类里的公有和保护成员在子类里的权限，一般都为public）</li><li>支持运算符重载，java不支持</li><li>抽象方法：virtual修饰的方法</li><li>没有接口关键字，接口通过抽象类实现</li></ol></li><li>多继承</li></ol></li><li>异常处理：捕获所有的异常，方式：catch(…)，或者使用std::exception</li><li>动态内存：<ol><li>栈：局变量都在栈里分配</li><li>堆：动态内存，通过new 或 malloc() 分配</li><li>与java的差异：Object obj;的内存分配：<ol><li>出现在函数内部，在栈上创建对象</li><li>类的成员变量，取决于类的对象如何创建：<ol><li>Class *pClass = new Class; // 堆</li><li>Class class; // 栈</li></ol></li></ol></li><li>栈和堆的区别：<ol><li>生命周期：函数执行后，要保留生命周期，只能选择堆，但堆内存不会自动回收</li><li>性能：在堆里创建，会出现磁盘碎片</li><li>大小：栈的大小有限制，堆可以很大</li></ol></li></ol></li><li>模板：相当于java的泛型<ol><li>分为函数模板与类模板</li><li>模板的关键字：template <type T></li></ol></li><li>预处理：在编译器时期，完成的指令<ol><li>创建宏：#define</li><li>条件编译：#ifndef xxx，只对部分代码编译</li></ol></li><li>信号处理：<ol><li>进程之间，可以通过信号来传递指令，比如结束当前进程</li><li>监听信号：signal()，在main()函数里，监听并添加监听处理类</li><li>发送信号：raise()，接收方是本进程的监听，通过ctrl+C可以对本进程发送中断程序的信号</li></ol></li><li>多线程：C++本身不支持多线程能力，依赖操作系统支持</li><li>常用库及功能：<ol><li>cmath库：<ol start="2"><li>x的y次方：pow(double, double)</li><li>平方根：sqrt(double)</li><li>绝对值：abs(int)</li><li>向下取余：floor(double)</li></ol></li><li>随机数：伪随机<ol><li>设置种子：srand()</li><li>生成随机数：rand()</li></ol></li><li>c风格字符串的操作：<ol><li>复制：std::strcpy(s1, s2)</li><li>连接：std::strcat(s1, s2)</li><li>长度：std::strlen(s1)</li><li>比较：std::strcmp(s1, s2)</li><li>字符串查找：std::strstr(s1, s2)，返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置</li></ol></li><li>iostream库：<ol><li>标准输出：std::cout &lt;&lt; “” &lt;&lt; std::endl; </li><li>标准输入：std::cin &gt;&gt; name</li><li>标准错误：std::cerr &lt;&lt; “” &lt;&lt; std::endl;</li></ol></li><li>文件操作，fstream库：<ol><li>ofstream：输出文件流</li><li>ifstream：输入文件流</li><li>fstream：同时具有ofstream, ifstream的功能</li><li>文件操作流程：<ol><li>打开文件：<ol><li>只写打开：ofstream outfile；outfile.open(“afile.dat”);</li><li>只读打开：ifstream infile; infile.open(“afile.dat”);</li></ol></li><li>读文件：infile &gt;&gt; data</li><li>写文件：outfile &lt;&lt; data &lt;&lt; endl;</li></ol></li></ol></li></ol></li></ol><h1 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h1><p>关键点：</p><ol><li>着色器是使用一种叫GLSL的类C语言写成的</li><li>着色器的结构：<ol><li>版本声明：#version version_number</li><li>变量：in type xxx; out type xxx; uniform type xxx;</li><li>main函数</li></ol></li><li>顶点差色器的输入为顶点属性（Vertex Attribute）：<ol><li>一般情况的上线为16个包含4分量的顶点属性</li><li>与硬件有关，通过GL_MAX_VERTEX_ATTRIBS查询：glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &amp;nrAttributes);</li></ol></li><li>着色器语言除C的基本数据类型外，还包含向量(Vector)和矩阵(Matrix)<ol><li>Vector相关的api：<ol><li>访问4个属性：vec.x, vec.y, vec.z, vec.w</li><li>重组：vec2, vec3, vec4</li></ol></li></ol></li><li>GLSL输入与输出：<ol><li>两个着色器之间，输入和输出的类型和名称一样，就会自动匹配 —- 与顺序无关</li><li>顶点着色器的输入：通过layout来指定输入变量</li><li>片段着色器的输出：vec4颜色输出变量，指定片段最终的颜色</li></ol></li><li>GLSL的uniform：<ol><li>作用：CPU直接向GPU的着色器发送数据的方式</li><li>uniform是全局唯一</li><li>着色器里的定义：uniform type xxx;</li><li>opengl代码设置uniform的值：<ol><li>获取地址：glGetUniformLocation(shaderProgram, “uniform名称”)</li><li>使用着色器程序后，设置值：<ol><li>glUseProgram(shaderProgram);</li><li>glUniform4f(location, 0.0f, greenValue, 0.0f, 1.0f);</li></ol></li></ol></li></ol></li><li>改变三角形颜色的方法：<ol><li>通过uniform传值给片段着色器</li><li>顶点数据里，添加颜色数据，再通过顶点着色器传给片段着色器</li></ol></li><li>注意：片段着色器每次处理一个顶点，而不是一个图形</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/05%20Shaders/">着色器</a></li><li><a href="http://docs.gl/gl3/glGetProgram">opengl的api文档</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-笔记&quot;&gt;&lt;a href=&quot;#C-笔记&quot; class=&quot;headerlink&quot; title=&quot;C++笔记&quot;&gt;&lt;/a&gt;C++笔记&lt;/h1&gt;&lt;p&gt;关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++单个文件的编译及运行：&lt;ol&gt;
&lt;li&gt;安装编译器：GNU的gcc编译器&lt;/l</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="OpenGL" scheme="https://handsomeliuyang.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>B-树和B+树学习笔记</title>
    <link href="https://handsomeliuyang.github.io/2019/06/30/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://handsomeliuyang.github.io/2019/06/30/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-06-30T03:15:46.000Z</published>
    <updated>2020-10-24T06:13:31.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h1><p>关键点：</p><ol><li>B-树的读法：读做B树，而不是B减树</li><li>背景：<ol><li>磁盘操作（如数据库），数据库索引是存储在磁盘上的，当数据量比较大时：<ol><li>索引非常大，可能有几个G甚至更多，无法全部加载到内存，只能逐一加载磁盘页</li><li>磁盘页存储的数据是固定的，对应索引树的节点，即搜索树的节点数据是受磁盘页的大小决定</li></ol></li><li>由于磁盘的IO操作比内部的数据比较更加耗时，减少磁盘的IO操作次数是提升定位索引的关键</li><li>二叉搜索树虽然其查找次数为lgn，但其磁盘的IO操作也是lgn，并不是最优的，需要更加‘矮胖’的数据结构：B-树</li></ol></li><li>定义：B-树是多路平衡查找树，每个节点最多包含m个孩子，m被称为B-树的阶，m的大小由磁盘页的大小决定，m阶的B-树的特征：<ol><li>若根结点不是终端结点，则至少有2棵子树</li><li>内部结点包含k-1个元素和k个孩子，其中m/2 &lt;= k &lt;= m，即M阶的B-树，内部节点最多含有m-1个元素，最多含有m个孩子，同时至少要有m/2个孩子</li><li>所有的叶子节点处于同一层<blockquote><p><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630121219458.png"></p></blockquote></li></ol></li><li>操作：<ol><li>查找：与二叉搜索树的查找过程类似</li><li>删除与添加：如果破坏了B-树的特征，就要进行节点的拆分来恢复特征<ol><li>3阶的添加操作：<blockquote><p><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630121110226.png"><br><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630121120434.png"></p></blockquote></li><li>3阶的删除操作：<blockquote><p><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630121134614.png"><br><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630121140115.png"><br><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630121145164.png"></p></blockquote></li></ol></li></ol></li><li>应用场景：<ol><li>B-树：非关系型数据库的索引实现，如MongoDB</li><li>B+树：关系型数据库的索引实现，如Mysql</li></ol></li></ol><h1 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h1><p>关键点：</p><ol><li>M阶B+树的特征：<ol><li>内部节点有k个元素（B-树有k-1个元素），同时有k个孩子，内部节点不保存索引</li><li>所有叶子节点包含所有的元素信息（包括内部节点的元素），同时包含所有的索引，关键字自小而大顺序链接</li><li>如3阶的B+树：<blockquote><p><img src="/../../hexo-img/B-%E6%A0%91%E5%92%8CB+%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630122103063.png"></p></blockquote></li></ol></li><li>比较B-树的优势：<ol><li>内部节点存储更多的元素，使得查询的IO次数更少。</li><li>所有查询都要查找到叶子节点，查询性能稳定</li><li>所有叶子节点形成有序链表，便于范围查询，B-树要进行中序遍历才行</li></ol></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190965&idx=1&sn=53f78fa037386f85531832cd5322d2a0&chksm=8c9909efbbee80f90512f0c36356c31cc74c388c46388dc2317d43c8f8597298f233ca9c29e9&scene=21#wechat_redirect">漫画：什么是B-树？</a></li><li><a href="https://juejin.im/entry/5b0cb64e518825157476b4a9">重温数据结构：理解 B 树、B+ 树特点及使用场景</a></li><li><a href="https://mp.weixin.qq.com/s/jRZMMONW3QP43dsDKIV9VQ">漫画：什么是B+树？</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;B-树&quot;&gt;&lt;a href=&quot;#B-树&quot; class=&quot;headerlink&quot; title=&quot;B-树&quot;&gt;&lt;/a&gt;B-树&lt;/h1&gt;&lt;p&gt;关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B-树的读法：读做B树，而不是B减树&lt;/li&gt;
&lt;li&gt;背景：&lt;ol&gt;
&lt;li&gt;磁盘操作（如数据</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>编译ReactNative-0.57.8的64位so</title>
    <link href="https://handsomeliuyang.github.io/2019/06/25/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91ReactNative-0.57.8%E7%9A%8464%E4%BD%8Dso/"/>
    <id>https://handsomeliuyang.github.io/2019/06/25/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91ReactNative-0.57.8%E7%9A%8464%E4%BD%8Dso/</id>
    <published>2019-06-25T01:44:45.000Z</published>
    <updated>2020-10-24T05:19:55.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>支持64位so的要求：</p><ol><li>Google Play要求在2019-8月之后的所有更新包都必须支持64位</li><li>方舟编译器也需要支持64位</li></ol><p>ReactNative从0.58.0版本开始，支持64位，但更新ReactNative的版本的成本非常之高，升级频率一般在1年左右</p><p>ReactNative已经开源，理论上只要利用其源码编译出64位的so就可以</p><h1 id="ReactNative的源码编译"><a href="#ReactNative的源码编译" class="headerlink" title="ReactNative的源码编译"></a>ReactNative的源码编译</h1><p>参考文章：<a href="https://github.com/facebook/react-native/wiki/Building-from-source">Building from source</a></p><p>步骤：</p><ol><li>下载0.57.8的源码：<a href="https://github.com/facebook/react-native/releases/tag/v0.57.8">v0.57.8源码</a> 或 从github下载对应的Tag也可以</li><li>创建一个ReactNative项目：<ol><li>参考文档：<a href="https://facebook.github.io/react-native/docs/0.57/getting-started">Getting Started</a></li><li>npm install -g react-native-cli</li><li>react-native init AwesomeProject –version 0.57.8</li></ol></li><li>修改项目的编译参数：<ol><li>打开文件：AwesomeProject/android/build.gradle</li><li>修改如下参数及对应值：—- 因为reactnative-0.57.8的依赖<ol><li>minSdkVersion = 16</li><li>compileSdkVersion = 27</li><li>targetSdkVersion = 26</li><li>buildToolsVersion = “27.0.3”</li></ol></li></ol></li><li>下载Android-NDK：<a href="http://dl.google.com/android/repository/android-ndk-r17c-darwin-x86_64.zip">android-ndk-r17c</a></li><li>修改环境变量<ol><li>vim ~/.bash_profile</li><li>添加如下配置：<ol><li>export ANDROID_SDK=android-sdk路径</li><li>export ANDROID_NDK=android-ndk-r17c路径</li></ol></li></ol></li><li>添加local.properties文件：<ol><li>位置：AwesomeProject/android/</li><li>内容：<ol><li>sdk.dir=android-sdk路径</li><li>ndk.dir=android-ndk-r17c路径</li></ol></li></ol></li><li>替换AwesomeProject/node_modules目录下的react-native：<ol><li>删除AwesomeProject/node_modules/react-native文件夹</li><li>复react-native-0.57.8的源码到目录AwesomeProject/node_modules下，并修改目录名为react-native</li><li>在AwesomeProject/node_modules/react-native目录下，执行npm install脚本</li></ol></li><li>修改AwesomeProject/android/build.gradle文件： <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.android.tools.build:gradle:3.2.1&#x27;</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;de.undercouch:gradle-download-task:3.4.3&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>修改AwesomeProject/android/settings.gradle文件： <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;:ReactAndroid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(<span class="string">&#x27;:ReactAndroid&#x27;</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(</span><br><span class="line">    rootProject.projectDir, <span class="string">&#x27;../node_modules/react-native/ReactAndroid&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>修改AwesomeProject/android/app/build.gradle文件： <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">&#x27;libs&#x27;</span>, <span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:appcompat-v7:$&#123;rootProject.ext.supportLibVersion&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">&#x27;:ReactAndroid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>Android Studio打开项目： Import project，选择 AwesomeProject/android 文件夹</li><li>编译：app [assembleDebug]</li></ol><h1 id="编译64位so"><a href="#编译64位so" class="headerlink" title="编译64位so"></a>编译64位so</h1><p><strong>修改配置，编译64位so：</strong></p><ol><li>ReactAndroid/src/main/jni/Application.mk：添加arm64-v8a, x86_64 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">APP_ABI :&#x3D; armeabi-v7a x86 arm64-v8a x86_64</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>android/app/build.gradle：添加arm64-v8a, x86_64 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ndk &#123;</span><br><span class="line">    abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;arm64-v8a&quot;, &quot;x86_64&quot;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>Clean工程：注意保留ReactAndroid/build/downloads目录，每次下载时间很长</li><li>编译：app [assembleDebug]</li><li>结果：<font color="#ff0000">编译出错，无法找到jsc的64位so</font></li></ol><p><strong>问题原因分析：ReactNative的jni代码依赖了第三方库的C代码，如下所示：</strong></p><ol><li>boost：源码依赖，先下载源码，再编译</li><li>double-conversion：源码依赖，先下载源码，再编译</li><li>folly：源码依赖，先下载源码，再编译</li><li>glibc：c的运行库</li><li>glog：源码依赖，先下载源码，再编译</li><li>jsc：依赖aar（org.webkit:android-jsc:r174650），但此aar里，只有armeabi armeabi-v7a x86，没有64位的so，分析过程如下：<ol><li>查找jsc的task： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:ReactAndroid:downloadJSCHeaders</span><br><span class="line">:ReactAndroid:prepareJSC</span><br></pre></td></tr></table></figure></li><li>prepareJSC： <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create Android.mk library module based on so files from mvn + include headers fetched from webkit.org</span></span><br><span class="line"><span class="keyword">task</span> prepareJSC(dependsOn: dependenciesPath ? [] : [downloadJSCHeaders]) &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">copy</span> &#123;</span><br><span class="line">        <span class="keyword">from</span> zipTree(<span class="keyword">configurations</span>.<span class="keyword">compile</span>.fileCollection &#123; dep -&gt; dep.name == <span class="string">&#x27;android-jsc&#x27;</span> &#125;.singleFile)</span><br><span class="line">        <span class="keyword">from</span> dependenciesPath ? <span class="string">&quot;$dependenciesPath/jsc-headers&quot;</span> : &#123;downloadJSCHeaders.dest&#125;</span><br><span class="line">        <span class="keyword">from</span> <span class="string">&#x27;src/main/jni/third-party/jsc/Android.mk&#x27;</span></span><br><span class="line">        <span class="keyword">include</span> <span class="string">&#x27;jni/**/*.so&#x27;</span>, <span class="string">&#x27;*.h&#x27;</span>, <span class="string">&#x27;Android.mk&#x27;</span></span><br><span class="line">        filesMatching(<span class="string">&#x27;*.h&#x27;</span>, &#123; fname -&gt; fname.path = <span class="string">&quot;JavaScriptCore/$&#123;fname.path&#125;&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">into</span> <span class="string">&quot;$thirdPartyNdkDir/jsc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的依赖</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.webkit:android-jsc:r174650&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>从prepareJSC的逻辑：当下载了org.webkit:android-jsc:r174650文件后，读取其中so文件</li><li>下载org.webkit:android-jsc:r174650文件，修改后缀为.zip，解压，发现没有64位so：<br><img src="/../../hexo-img/%E7%BC%96%E8%AF%91ReactNative-0.57.8%E7%9A%8464%E4%BD%8Dso/20190626095023347.png"></li></ol></li></ol><p><strong>分析0.58.0的解决方案：（注意：react-native-0.58.0版本已经支持了64位so）</strong></p><ol><li>下载0.58.0的源码：<a href="https://github.com/facebook/react-native/releases/tag/v0.58.0">0.58.0</a></li><li>其依赖jsc的方式没有变：依赖aar，版本号也没有变，还是r174650 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">task prepareJSC(dependsOn: dependenciesPath ? [] : [downloadJSCHeaders]) &lt;&lt; &#123;</span><br><span class="line">    copy &#123;</span><br><span class="line">        from zipTree(configurations.compile.fileCollection &#123; dep -&gt; dep.name &#x3D;&#x3D; &#39;android-jsc&#39; &#125;.singleFile)</span><br><span class="line">        from dependenciesPath ? &quot;$dependenciesPath&#x2F;jsc-headers&quot; : &#123;downloadJSCHeaders.dest&#125;</span><br><span class="line">        from &#39;src&#x2F;main&#x2F;jni&#x2F;third-party&#x2F;jsc&#39;</span><br><span class="line">        include &#39;jni&#x2F;**&#x2F;*.so&#39;, &#39;*.h&#39;, &#39;Android.mk&#39;</span><br><span class="line">        filesMatching(&#39;*.h&#39;, &#123; fname -&gt; fname.path &#x3D; &quot;JavaScriptCore&#x2F;$&#123;fname.path&#125;&quot;&#125;)</span><br><span class="line">        into &quot;$thirdPartyNdkDir&#x2F;jsc&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile &#39;org.webkit:android-jsc:r174650&#39;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>但ReactAndroid/src/main/third-party/jsc目录有变化，内置了arm64-v8a和x86_64的so进来：<br> <img src="/../../hexo-img/%E7%BC%96%E8%AF%91ReactNative-0.57.8%E7%9A%8464%E4%BD%8Dso/20190626095753373.png"></li></ol><p><strong>解决方案：</strong> 由于android-jsc的版本号一样，那0.58.0内置的jsc的64位so，在0.57.8版本里也可以使用</p><ol><li>完整复制0.58.0下的jsc64位so到0.57.8的对应目录下</li><li>修改ReactAndroid/build.gradle脚本：使用文件对比工具FileMerge，查看0.58.0与jsc有关的改动点：<ol><li>prepareJSC里，copy命令修改：from ‘src/main/jni/third-party/jsc/Android.mk’ 改为 from ‘src/main/jni/third-party/jsc’<br><img src="/../../hexo-img/%E7%BC%96%E8%AF%91ReactNative-0.57.8%E7%9A%8464%E4%BD%8Dso/20190626101740578.png"></li><li>jniLibs.srcDirs的目录修改：jniLibs.srcDir “$buildDir/react-ndk/exported” 改为 jniLibs.srcDirs = [“$buildDir/react-ndk/exported”, ‘src/main/jni/third-party/jsc/jni’]<br><img src="/../../hexo-img/%E7%BC%96%E8%AF%91ReactNative-0.57.8%E7%9A%8464%E4%BD%8Dso/20190626101926159.png"></li></ol></li><li>编译：app [assembleDebug]</li><li>编译后的so：链接:<a href="https://pan.baidu.com/s/1f-O6mcmrUxVu6g4DOXXqkA">https://pan.baidu.com/s/1f-O6mcmrUxVu6g4DOXXqkA</a>  密码:qk83</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;支持64位so的要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Google Play要求在2019-8月之后的所有更新包都必须支持64位&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="ReactNative" scheme="https://handsomeliuyang.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习笔记1：绘制三角形</title>
    <link href="https://handsomeliuyang.github.io/2019/06/17/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9A%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%A3%E5%BD%A2/"/>
    <id>https://handsomeliuyang.github.io/2019/06/17/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9A%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%A3%E5%BD%A2/</id>
    <published>2019-06-17T01:06:28.000Z</published>
    <updated>2020-10-24T06:14:25.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习教程"><a href="#学习教程" class="headerlink" title="学习教程"></a>学习教程</h1><blockquote><p>零基础开始学习OpenGL的最佳教程learnOpenGL：<a href="https://learnopengl-cn.github.io/intro/">https://learnopengl-cn.github.io/intro/</a></p></blockquote><p>此笔记的学习章节：</p><ol><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/01%20OpenGL/">OpenGL</a></li><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/">创建窗口</a></li><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/03%20Hello%20Window/">你好，窗口</a></li><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/">你好，三角形</a></li></ol><h1 id="OpenGL介绍"><a href="#OpenGL介绍" class="headerlink" title="OpenGL介绍"></a>OpenGL介绍</h1><p>关键点：</p><ol><li>OpenGL仅仅是一个规范，具体实现方是显卡的生产商。所以常常需要升级显示的驱动程序。</li><li>OpenGL自身是一个巨大的状态机(State Machine)，OpenGL的上下文-Context管理这些状态，通过修改状态，改变渲染的图像</li></ol><h1 id="Xcode环境搭建"><a href="#Xcode环境搭建" class="headerlink" title="Xcode环境搭建"></a>Xcode环境搭建</h1><p>关键点：</p><ol><li>GLFW编译：<ol><li>下载GLFW的<a href="https://www.glfw.org/download.html">源码</a> —- GLWF用于创建OpenGL的Context，及创建显示窗口</li><li><a href="https://cmake.org/download/">下载</a>并安装CMake</li><li>运行CMake生成Xcode的工程文件</li><li>启动Xcode，直接点击【运行】编译GLFW的源码</li><li>需要的文件：<ol><li>编译后的静态库：.a，路径：build/src/Debug/libglfw3.a</li><li>头文件：include目录下的.h文件，路径：glfw-3.3/include/GLFW</li></ol></li></ol></li><li>引入GLAD：因为OpenGL只是一个标准/规范，具体实现为显卡驱动，需要在运行时，进行动态的链接，GLAD封装了此过程。<ol><li>打开GLAD的<a href="http://glad.dav1d.de/">在线服务</a>，进行如下配置：<ol><li>将语言(Language)设置为C/C++，</li><li>在API选项中，选择3.3以上的OpenGL(gl)版本</li><li>之后将模式(Profile)设置为Core，并且保证生成加载器(Generate a loader)的选项是选中的。</li><li>点击生成(Generate)按钮来生成库文件</li></ol></li><li>下载zip，提取文件：<ol><li>头文件：include/</li><li>源码文件：glad.c</li></ol></li></ol></li><li>Xcode的Demo：<ol><li>通过xcode创建一个command line项目，c++</li><li>创建lib目录，把.a, .h文件拖到目录中<ol><li>GLFW的静态库：libglfw3.a</li><li>GLAD的源文件：glad.c</li></ol></li><li>引入libglfw3.a依赖的库，【Build Phases】–&gt; 【Link Binary With Libraries】里添加库：Cocoa.framework, IOKit.framework, CoreVideo.framework</li><li>在本地创建libs/目录，把GLFW和GLAD的头文件移入，移入后的目录结构：<br><img src="/../../hexo-img/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9A%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%A3%E5%BD%A2/20190617081604675.png"></li><li>设置Xcode的头文件查找路径：【Build Settings】–&gt; 【Header Search Paths】的Debug和Release里添加include的路径</li><li>引入方式：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glad/glad.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="Demo：绘制三角形"><a href="#Demo：绘制三角形" class="headerlink" title="Demo：绘制三角形"></a>Demo：绘制三角形</h1><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p>关键点：</p><ol><li>通过GLFW实例化窗口</li><li>监听窗口变化，动态调整OpenGL的视口的大小</li><li>初始化GLAD，即绑定OpenGL的函数指针</li><li>创建渲染循环</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建GLFW</span></span><br><span class="line">    glfwInit();</span><br><span class="line">    <span class="comment">// 配置GLFW：主版本号(Major)为3</span></span><br><span class="line">    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 配置GLFW：次版本号(Minor)为3</span></span><br><span class="line">    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 配置GLFW：使用核心模式(Core-profile)</span></span><br><span class="line">    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mac需要添加此句</span></span><br><span class="line">    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;LearnOpenGL&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (window == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        glfwTerminate();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    glfwMakeContextCurrent(window);</span><br><span class="line">    <span class="comment">// 监听GLFW的窗口变化</span></span><br><span class="line">    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在调用OpenGL Api之前，需要通过GLAD初始化函数指针</span></span><br><span class="line">    <span class="keyword">if</span>(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render Loop</span></span><br><span class="line">    <span class="keyword">while</span>(!glfwWindowShouldClose(window))&#123;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        processInput(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换缓存，调用事件</span></span><br><span class="line">        glfwSwapBuffers(window);</span><br><span class="line">        glfwPollEvents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    glfwTerminate();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 设置视口，前两个参数设置左下角的位置</span></span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow *window)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 点击返回按钮后，关闭窗口</span></span><br><span class="line">    <span class="keyword">if</span>(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)&#123;</span><br><span class="line">        glfwSetWindowShouldClose(window, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h2><p>关键点：</p><ol><li>OpenGL的主要任务是：3D坐标转换为2D坐标，并转变为实际的有颜色的像素。<ol><li>原因：在OpenGL中，任何事物处于3D空间中，但屏幕却是2D的</li><li>转换过程称为：图形渲染管线（Graphics Pipeline）</li></ol></li><li>图形渲染管线：由几个独立的阶段组成，每个阶段将会把前一个阶段的输出做为输入，这些阶段可以称为着色器（Shader），Shader运行在GPU上，部分Shader可以由开发者自己配置，由OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的，如下图所示：<br> <img src="/../../hexo-img/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9A%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%A3%E5%BD%A2/20190618090215071.png"><ol><li>Vertex Shader：把3D坐标转为另一种3D坐标</li><li>Primitive Assembly（图元装配）阶段：装配成指定图元的形状</li><li>Geometry Shader（几何着色器）：可以通过新的顶点，构建其他图元</li><li>Rasterization Stage（光栅化阶段）：图元映射为最终屏幕上相应的像素，同时对超出视图外的像素执行裁切(Clipping)</li><li>Fragment Shader（片段着色器）：计算一个像素的最终颜色，需要考虑光照、阴影、光的颜色等等因素</li><li>Testing And Blending（测试与混合）：通过Alpha考虑混合效果</li></ol></li><li>默认情况下，OpenGL没有提供顶点着色器和一个片段着色器，需要自定义</li><li>项点坐标输入的显示流程：<ol><li>输入的3D坐标可以任意的，但只有在标准化设备坐标(Normalized Device Coordinates)范围内的坐标才会最终呈现在屏幕上，即（x、y和z）上都为-1.0到1.0的范围内</li><li>标准化设备坐标转换为屏幕空间坐标(Screen-space Coordinates)，即通过glViewport函数指定的</li><li>屏幕空间坐标又会被变换为片段，输入到片段着色器中</li></ol></li><li>顶点数据传输给OpenGL的过程：<ol><li>创建 VAO(Vertex Array Object), VBO(Vertex Buffer Object), EBO(Index Buffer Object)：<ol><li>创建VAO：glGenVertexArrays</li><li>创建VBO和EBO：glGenBuffers</li></ol></li><li>绑定缓存类型，并传数据：<ol><li>绑定VAO：glBindVertexArray</li><li>绑定VBO和EBO：glBindBuffer</li><li>传数据：glBufferData</li></ol></li><li>设置顶点属性指针，顶点如何解析：<ol><li>顶点属性指针：glVertexAttribPointer</li><li>开关：glEnableVertexAttribArray</li></ol></li></ol></li><li>创建与编译着色器的过程：<ol><li>创建着色器对象(Shader Object)，绑定source，编译，判断：<ol><li>创建：glCreateShader</li><li>使用着色器语言GLSL(OpenGL Shading Language)编写顶点着色器</li><li>绑定source：glShaderSource</li><li>编译：glCompileShader</li><li>判断：<ol><li>glGetShaderiv</li><li>glGetShaderInfoLog</li></ol></li></ol></li><li>创建着色器程序(Shader Program), 绑定所有的着色器对象(shader object)，链接着色器程序，对接每个输出与输入<ol><li>创建：glCreateProgram</li><li>绑定：glAttachShader</li><li>链接：glLinkProgram</li><li>判断：<ol><li>glGetProgramiv</li><li>glGetProgramInfoLog</li></ol></li><li>删除着色器对象：glDeleteShader</li></ol></li></ol></li><li>绘制三角形的过程：<ol><li>设置着色器程序：glUseProgram</li><li>设置顶点数组对象VAO：glBindVertexArray</li><li>调用画图形的API，设置图元着色器的状态：glDrawArrays</li></ol></li><li>绘制距形的过程：<ol><li>由多个三角形组成为距形</li><li>为了减少重复顶点数据，使用索引缓存数据来按顺序绘制三角形<ol><li>EBO，GL_ELEMENT_ARRAY_BUFFER</li></ol></li><li>调用使用索引缓存数据的绘制方法：glDrawElements</li></ol></li><li>设置绘制模式：<ol><li>线框模式：glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *vertexShaderSource = <span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">    <span class="string">&quot;layout (location = 0) in vec3 aPos;\n&quot;</span> <span class="comment">// create a variable aPos of type vec3</span></span><br><span class="line">    <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;</span> <span class="comment">// Assign a value to the predefined variable gl_Position, gl_Position is the output of this Shader</span></span><br><span class="line">    <span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *fragmentShaderSource = <span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">    <span class="string">&quot;out vec4 FragColor;\n&quot;</span> <span class="comment">// create a out variable of type vec4</span></span><br><span class="line">    <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#125;\n\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建GLFW</span></span><br><span class="line">    glfwInit();</span><br><span class="line">    <span class="comment">// 配置GLFW：主版本号(Major)为3</span></span><br><span class="line">    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 配置GLFW：次版本号(Minor)为3</span></span><br><span class="line">    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 配置GLFW：使用核心模式(Core-profile)</span></span><br><span class="line">    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 经过测试，在macOS-10.14.1版本里</span></span><br><span class="line">    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;LearnOpenGL&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (window == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        glfwTerminate();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    glfwMakeContextCurrent(window);</span><br><span class="line">    <span class="comment">// 监听GLFW的窗口变化</span></span><br><span class="line">    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在调用OpenGL Api之前，需要通过GLAD初始化函数指针</span></span><br><span class="line">    <span class="keyword">if</span>(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// build and compile out shader program</span></span><br><span class="line">    <span class="comment">// ------------------------------------</span></span><br><span class="line">    <span class="comment">// vertex shader</span></span><br><span class="line">    <span class="comment">// create empty vertex shader</span></span><br><span class="line">    <span class="keyword">int</span> vertexShader = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">    <span class="comment">// insert vertex shader source to shader object, the second parameter indicates the number of strings</span></span><br><span class="line">    glShaderSource(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// compile the shader object that attached the source</span></span><br><span class="line">    glCompileShader(vertexShader);</span><br><span class="line">    <span class="comment">// check for shader compile errors</span></span><br><span class="line">    <span class="keyword">int</span> success;</span><br><span class="line">    <span class="keyword">char</span> infoLog[<span class="number">512</span>];</span><br><span class="line">    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        glGetShaderInfoLog(vertexShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Frame Shader</span></span><br><span class="line">    <span class="comment">// create empty frame shader object</span></span><br><span class="line">    <span class="keyword">int</span> fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">    <span class="comment">// insert frame shader source to shader object, the second parameter indices the number of strings</span></span><br><span class="line">    glShaderSource(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// compile the frame shader that attached the source</span></span><br><span class="line">    glCompileShader(fragmentShader);</span><br><span class="line">    <span class="comment">// check for shader compile errors</span></span><br><span class="line">    glGetShaderiv(fragmentShader, GL_FRAGMENT_SHADER, &amp;success);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        glGetShaderInfoLog(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// link shader objects to shader program</span></span><br><span class="line">    <span class="comment">// create a shader program</span></span><br><span class="line">    <span class="keyword">int</span> shaderProgram = glCreateProgram();</span><br><span class="line">    <span class="comment">// attached a compiled shader object to a shader program</span></span><br><span class="line">    glAttachShader(shaderProgram, vertexShader);</span><br><span class="line">    glAttachShader(shaderProgram, fragmentShader);</span><br><span class="line">    <span class="comment">// links all attached shader object in one shader program</span></span><br><span class="line">    <span class="comment">// During the linking step, each output is matched to each input of shaders and whenever something is not right linking fails.</span></span><br><span class="line">    glLinkProgram(shaderProgram);</span><br><span class="line">    <span class="comment">// check for linking errors</span></span><br><span class="line">    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        glGetProgramInfoLog(shaderProgram, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// removes shader object, clearing all allocated memory</span></span><br><span class="line">    glDeleteShader(vertexShader);</span><br><span class="line">    glDeleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up vertex data and buffer and configure vertex attributes</span></span><br><span class="line">    <span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 3D coordinates, using one-dimensional array storage</span></span><br><span class="line">    <span class="keyword">float</span> vertices[] = &#123;</span><br><span class="line">        <span class="number">0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// top right</span></span><br><span class="line">        <span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom right</span></span><br><span class="line">        <span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom left</span></span><br><span class="line">        <span class="number">-0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>  <span class="comment">// top left</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> indices[] = &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create VAO(Vertex Array Object), VBO(Vertex Buffer Object), EBO(Index Buffer Object)</span></span><br><span class="line">    <span class="comment">// VAO automatically associates VBO and EBO</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO, EBO;</span><br><span class="line">    glGenVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">    glGenBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">    glGenBuffers(<span class="number">1</span>, &amp;EBO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When using OpenGL to draw graphics, use vertex array objects, vertex array object associate vertex buffer object and vertex attributes</span></span><br><span class="line">    glBindVertexArray(VAO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binds a vertex buffer object to array buffer type</span></span><br><span class="line">    glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class="line">    <span class="comment">// stores vertex data in initialized memory bound to vertex buffer object</span></span><br><span class="line">    glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binds a index buffer object to element array buffer type</span></span><br><span class="line">    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class="line">    <span class="comment">// stores index data in initialized memory bound to index buffer object</span></span><br><span class="line">    glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// specifies how OpenGL should interpret the vertex buffer data</span></span><br><span class="line">    glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), (<span class="keyword">void</span> *)<span class="number">0</span>);</span><br><span class="line">    glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// safely unbind</span></span><br><span class="line">    glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>);</span><br><span class="line">    glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sets the polygon rasterization mode of how OpenGL should draw its primitives.</span></span><br><span class="line">    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render Loop</span></span><br><span class="line">    <span class="keyword">while</span>(!glfwWindowShouldClose(window))&#123;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        processInput(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clear the screen with specified color</span></span><br><span class="line">        glClearColor(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Using a shader program</span></span><br><span class="line">        glUseProgram(shaderProgram);</span><br><span class="line">        <span class="comment">// bind the vertex array object</span></span><br><span class="line">        glBindVertexArray(VAO);</span><br><span class="line">        <span class="comment">// Draw a triangle using a vertex array object</span></span><br><span class="line">        <span class="comment">//        glDrawArrays(GL_TRIANGLES, 0, 3);</span></span><br><span class="line">        <span class="comment">// renders the vertices found in the VBO at the order specified in the indices in the EBO</span></span><br><span class="line">        glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换缓存，调用事件</span></span><br><span class="line">        glfwSwapBuffers(window);</span><br><span class="line">        glfwPollEvents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    glDeleteVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">    glDeleteBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">    glDeleteBuffers(<span class="number">1</span>, &amp;EBO);</span><br><span class="line"></span><br><span class="line">    glfwTerminate();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 设置视口，前两个参数设置左下角的位置</span></span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow *window)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 点击返回按钮后，关闭窗口</span></span><br><span class="line">    <span class="keyword">if</span>(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)&#123;</span><br><span class="line">        glfwSetWindowShouldClose(window, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-的知识点"><a href="#C-的知识点" class="headerlink" title="C++的知识点"></a>C++的知识点</h1><p>关键点：</p><ol><li>编译后的机器码与操作系统和CPU的指令集有关，最佳的方式是从源代码编译生成二进制文件</li><li>CMake是一个工程文件生成工具。用户可以使用预定义好的CMake脚本，根据自己的选择（像是Visual Studio, XCode, Eclipse）生成不同IDE的工程文件</li><li>Linux下的静态库以.a结尾(Winodws下为.lib)</li><li>Linux下的动态库以.so 或 .so.y结尾，其中y代表版本号(Windows下为.dll)</li><li>C++的include：<ol><li>&lt;&gt; 系统目录空间</li><li>“” 用户目录空间</li></ol></li><li>宏定义：#define &lt;宏名&gt; &lt;字符串&gt;</li><li>指针，*，&amp;的区别<ol><li>*，表示指针变量地址所指向的值</li><li>&amp; 表示取变量的地址</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习教程&quot;&gt;&lt;a href=&quot;#学习教程&quot; class=&quot;headerlink&quot; title=&quot;学习教程&quot;&gt;&lt;/a&gt;学习教程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;零基础开始学习OpenGL的最佳教程learnOpenGL：&lt;a href=&quot;https://le</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="OpenGL" scheme="https://handsomeliuyang.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>动态规划与贪心算法学习笔记</title>
    <link href="https://handsomeliuyang.github.io/2019/06/11/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://handsomeliuyang.github.io/2019/06/11/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-06-11T01:13:40.000Z</published>
    <updated>2020-10-24T06:15:24.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>关键点：</p><ol><li>动态规划理解：<ol><li>适用场景：通过组合子问题的解来求解原问题，同时子问题有重叠的情况。— 如递归函数</li><li>思路：内存换时间，先求解子问题的解并保存，减少重复计算</li><li>注意：动态规划求解的值是最优的，但最优解的路径不唯一，可能有多条</li></ol></li><li>动态规划的步骤：<ol><li>计算出状态转移方程，递归地定义最优解的值 —- 如递归函数</li><li>自底向上的方法计算，并保存计算结果</li><li>保存最优解的计算路径 — 使用链表记录</li></ol></li><li>分治法与动态规划的区别：都是通过组合子问题的解来求解原问题，但动态规划会把子问题的解保存下来，减少重复计算，内存与速度的选择。</li><li>时间复杂度：通过状态转移方程，可以构建一个棵树，树的很多结点是重复的，分治法的时间复杂度与结点有关，动态规划的时间复杂度与深度有关</li><li>递归函数的非递归实现：动态规划</li><li>KV键值对的存储方案：<ol><li>散列表：HashMap</li><li>二叉搜索树（红黑树）：当散列结果不佳时，比HashMap更节省内存</li></ol></li></ol><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>关键点：</p><ol><li>定义：动态规划主要减少了子问题重复计算问题，但所有子问题都被计算一次，对于有些问题，可以进步提升性能，如每次计算局部最优，以此局最优的选择推导出全局最优，这样就不用整体计算所有的子问题，这种算法称为贪心算法</li><li>步骤：与动态规划类似<ol><li>计算出状态转移方程，递归地定义最优解的值 —- 如递归函数</li><li>自顶向下求解，先选择当前最优化的解，再去计算剩余的最优子问题 —- 动态规划是自底向上的方法计算，并保存计算结果</li><li>计算出状态转移方程，递归地定义最优解的值 —— 与动态规划一样</li><li>选择一个贪心选择，并证明贪选择总是安全的（此过程是自顶向下，不依赖子问题的解）</li><li>使用递归算法实现贪心策略</li><li>再使用动态规划的思路，先计算子问题，并保存，实现迭代算法</li></ol></li><li>使用贪心算法求解的问题，总有一个更繁琐的动态规划算法，其区别：<ol><li>贪心算法：自顶向下求解，先选择当前最优化的解，再去计算剩余的最优子问题</li><li>动态规则：自底向上，先把最小的子问题求解，再利用子问题求解，需要求解所有的子问题</li></ol></li></ol><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h2><p><strong>问题简单描述：</strong></p><ol><li>活动集合：S = {a1, a2, …, an}，使用同一个教室</li><li>每个活动ai，都有一个开始时间si和结束时间fi</li><li>两个活动[si, fi), [sj, fj]不重叠，表示兼容</li><li>问题：选择最大的兼容活动集？</li></ol><p><strong>贪心算法的过程</strong></p><ol><li>状态转移方程：<ol><li>c[i, j]：表示活动ai,…,aj的最大兼容活动集</li><li>i &lt;= k &lt;=j, 假定最大兼容活动集里必定包含活动ak</li><li>c[i, j] = max(c[i, k] + c[k, j] + 1)</li></ol></li><li>贪心策略：结束时间最早的活动一定属于最大的兼容活动集中，证明过程简述：<ol><li>S = {a1, a2, …., an}，最大兼容活动子集为Ak = {aj, aj+1, …}，且aj是Ak中结束最早的活动，am是S中结束时间最早的活动</li><li>因为 am的结束时间 &lt; aj的结束时间，因此 A’k = {am, aj+1, …}也是S中最大兼容子集</li><li><font color="#ff0000">注意：</font>此证明过程，仅仅只是说明包含最早结束活动的集合是其中一个最优解，但并不是唯一的唯</li></ol></li><li>递归函数：<ol><li>S = {ai, …, aj} 按结束时间排序，由小到大</li><li>c[i, j] = 1 + c[k, j] // ak的开始时间第一个大于ai的结束时间的活动</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归算法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* int[] s: 表示所有的开始时间</span></span><br><span class="line"><span class="comment">* int[] f: 表示所有的结束时间</span></span><br><span class="line"><span class="comment">* int k: 表示子集的开始</span></span><br><span class="line"><span class="comment">* int n: 表示子集的结束</span></span><br><span class="line"><span class="comment">* List&lt;Integer&gt; maxList: 用于记录最大子集的集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursiveActivitySelector</span><span class="params">(<span class="keyword">int</span>[] s, <span class="keyword">int</span>[] f, <span class="keyword">int</span> k, <span class="keyword">int</span> n, List&lt;Integer&gt; maxList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子集中&#123;ak, ..., an&#125;中ak的结束时间最小</span></span><br><span class="line">    maxList.add(k);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找到第一个sm &gt; fk的下标m</span></span><br><span class="line">    m = k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(m &lt;= n &amp;&amp; s[m] &lt; f[k])&#123;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    recursiveActivitySelector(s, f, m, n, maxList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：已经按结束时间排序</span></span><br><span class="line"><span class="keyword">int</span>[] s; <span class="comment">// 开始时间数组</span></span><br><span class="line"><span class="keyword">int</span>[] f; <span class="comment">// 结束时间数组</span></span><br><span class="line">recursiveActivitySelector(s, f, <span class="number">0</span>, s.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代算法</span></span><br><span class="line"><span class="function">List&lt;Integer&gt; <span class="title">greedyActivitySelector</span><span class="params">(<span class="keyword">int</span>[] s, <span class="keyword">int</span>[] f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length - <span class="number">1</span>;</span><br><span class="line">    List&lt;Integer&gt; maxList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    maxList.add(<span class="number">0</span>);</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>; m&lt;=n; m++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[m] &gt;= f[k])&#123;</span><br><span class="line">            maxList.add(m);</span><br><span class="line">            k = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h2><p><strong>问题描述：</strong> 一个正在抢劫商店的小偷发现了n个商品，第i个商品价值vi美元，重wi磅，vi和wi都是整数。这个小偷希望拿走价值尽量高的商品，但他的背包最多能容纳W磅重的商品，W是一个整数。他应该拿哪些物品？</p><p><strong>分析：</strong></p><ol><li>状态转移方程：<ol><li>m(i, W)：表示从前i个物品中，选择重量不超过W的物品的最大价值</li><li>每个物品，有选择与不选择两个决策，进而转化为子问题<br><img src="/../../hexo-img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190616110416541.png"></li></ol></li><li>此问题无法使用贪心算法实现，只能使用动态规划求解</li></ol><h2 id="分数背包问题"><a href="#分数背包问题" class="headerlink" title="分数背包问题"></a>分数背包问题</h2><p><strong>问题描述：</strong>与上述的0-1背包问题类似，但对于每个商品，小偷可以拿走其一部分，而不是做（0-1）选择。</p><p><strong>分析：</strong>此问题就可以使用贪心算法实现，计算每个物品的价值，依次选择价值最高的物品，直到重量达到W</p><h2 id="赫夫曼编码（Huffman-Code）"><a href="#赫夫曼编码（Huffman-Code）" class="headerlink" title="赫夫曼编码（Huffman Code）"></a>赫夫曼编码（Huffman Code）</h2><p><strong>问题描述：</strong>如何对数据进行压缩</p><p><strong>思路：</strong></p><ol><li>通过变长的编码实现压缩，实现减少整体字节数，如下所示：<br> <img src="/../../hexo-img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190616111910139.png"></li><li>由于连字符，为了实现唯一解码结果，不能随意使用变长编码，满足要求的变长编码方式：前缀码<ol><li>前缀码：没有任何字符是其他字符的前缀，即每次定位唯一的编码，不会出现多种解码结果</li></ol></li></ol><p>赫夫曼编码：就是使用贪心算法求解的最优前缀码，其大概过程：</p><ol><li>初始队列：按频率由低到高</li><li>合并最左边两个元素，权重相加构建新元素</li><li>按新元素的权重重新排序</li><li>重复2，3过程</li><li>得到最终的赫夫曼二叉树后，左边路径编码为0，右边的路径编译为1</li><li>得到字符的编码，即赫夫曼编码</li></ol><blockquote><p>详情请参考：<a href="https://blog.csdn.net/FX677588/article/details/70767446">详细图解哈夫曼Huffman编码树</a></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>算法导论</li><li><a href="https://blog.csdn.net/FX677588/article/details/70767446">详细图解哈夫曼Huffman编码树</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;p&gt;关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态规划理解：&lt;ol&gt;
&lt;li&gt;适用场景：通过组合子问题的解来求解原问题，同时子问题有重</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Lepton支持gitlab的改造路程</title>
    <link href="https://handsomeliuyang.github.io/2019/06/05/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Lepton%E6%94%AF%E6%8C%81gitlab%E7%9A%84%E6%94%B9%E9%80%A0%E8%B7%AF%E7%A8%8B/"/>
    <id>https://handsomeliuyang.github.io/2019/06/05/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Lepton%E6%94%AF%E6%8C%81gitlab%E7%9A%84%E6%94%B9%E9%80%A0%E8%B7%AF%E7%A8%8B/</id>
    <published>2019-06-05T01:46:31.000Z</published>
    <updated>2020-10-24T06:12:41.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在一套成熟的App框架里，有非常丰富的基础库，中间件等等模块。新的需求都是基于这些基础能力来开发的，RD在开发时，大部分都是Copy再做二次开发，容易产生如下问题：</p><ol><li>Copy的是有问题的代码：如老的网络请求代码</li><li>缺少必须文档，Copy后理解不到位，改动时容易出现Bug</li><li>代码融合了特定的业务逻辑，需要删除成本</li></ol><p>除了必要的文档外，希望有相应的代码片段库，同时具有分类，搜索等等功能。</p><p>调研后的结果是：Github Gists + Lepton，由于是公司级的片段库，希望的组合是：GitLab Snippets + Lepton</p><h1 id="Github-Gists-与-Gitlab-Snippets"><a href="#Github-Gists-与-Gitlab-Snippets" class="headerlink" title="Github Gists 与 Gitlab Snippets"></a>Github Gists 与 Gitlab Snippets</h1><p>对应的Api文档：</p><ol><li><a href="https://developer.github.com/v3/gists/">Github Gists的Api文档</a></li><li><a href="https://docs.gitlab.com/ee/user/snippets.html">Gitlab Snippets的Api文档</a></li></ol><p>差异：</p><ol><li>Gist是以用户纬度，Snippets是以项目为维度</li><li>每个Gist支持多个文件，Snippet只支持一个文件</li><li>Gist详情Api里，同时会返回文件内容，Snippet不会，还要单独请求</li></ol><h1 id="Lepton简介"><a href="#Lepton简介" class="headerlink" title="Lepton简介"></a>Lepton简介</h1><blockquote><p>lepton详情：<a href="https://github.com/hackjutsu/Lepton">https://github.com/hackjutsu/Lepton</a></p></blockquote><p>Lepton简介：</p><ol><li>Framework: Electron</li><li>Library: React, Redux, Redux Thunk, Redux Form</li></ol><p>所有与github相关的请求的逻辑都在：Lepton/app/utilities/githubApi/index.js</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>整体方案：抽象接口层，转换Gitlab Snippets Api的数据。</p><p><img src="/../../hexo-img/Lepton%E6%94%AF%E6%8C%81gitlab%E7%9A%84%E6%94%B9%E9%80%A0%E8%B7%AF%E7%A8%8B/%E6%8A%BD%E8%B1%A1%E7%BB%93%E6%9E%84.png"></p><p>抽象接口层：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; remote &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> githubApi <span class="keyword">from</span> <span class="string">&#x27;./githubApi&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gitlabApi <span class="keyword">from</span> <span class="string">&#x27;./gitlabApi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> conf = remote.getGlobal(<span class="string">&#x27;conf&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> logger = remote.getGlobal(<span class="string">&#x27;logger&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> api = githubApi</span><br><span class="line"><span class="keyword">if</span> (conf) &#123;</span><br><span class="line">  <span class="keyword">if</span> (conf.get(<span class="string">&#x27;gitlab:enable&#x27;</span>)) &#123;</span><br><span class="line">    api = gitlabApi</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EXCHANGE_ACCESS_TOKEN = <span class="string">&#x27;EXCHANGE_ACCESS_TOKEN&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_ALL_GISTS = <span class="string">&#x27;GET_ALL_GISTS&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_ALL_GISTS_V1 = <span class="string">&#x27;GET_ALL_GISTS_V1&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_SINGLE_GIST = <span class="string">&#x27;GET_SINGLE_GIST&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_USER_PROFILE = <span class="string">&#x27;GET_USER_PROFILE&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CREATE_SINGLE_GIST = <span class="string">&#x27;CREATE_SINGLE_GIST&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EDIT_SINGLE_GIST = <span class="string">&#x27;EDIT_SINGLE_GIST&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DELETE_SINGLE_GIST = <span class="string">&#x27;DELETE_SINGLE_GIST&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getGitHubApi</span> (<span class="params">selection</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (selection) &#123;</span><br><span class="line">    <span class="keyword">case</span> EXCHANGE_ACCESS_TOKEN:</span><br><span class="line">      <span class="keyword">return</span> api.exchangeAccessToken</span><br><span class="line">    <span class="keyword">case</span> GET_ALL_GISTS:</span><br><span class="line">      <span class="keyword">return</span> api.getAllGistsV2</span><br><span class="line">    <span class="keyword">case</span> GET_ALL_GISTS_V1:</span><br><span class="line">      <span class="keyword">return</span> api.getAllGistsV1</span><br><span class="line">    <span class="keyword">case</span> GET_SINGLE_GIST:</span><br><span class="line">      <span class="keyword">return</span> api.getSingleGist</span><br><span class="line">    <span class="keyword">case</span> GET_USER_PROFILE:</span><br><span class="line">      <span class="keyword">return</span> api.getUserProfile</span><br><span class="line">    <span class="keyword">case</span> CREATE_SINGLE_GIST:</span><br><span class="line">      <span class="keyword">return</span> api.createSingleGist</span><br><span class="line">    <span class="keyword">case</span> EDIT_SINGLE_GIST:</span><br><span class="line">      <span class="keyword">return</span> api.editSingleGist</span><br><span class="line">    <span class="keyword">case</span> DELETE_SINGLE_GIST:</span><br><span class="line">      <span class="keyword">return</span> api.deleteSingleGist</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      logger.debug(<span class="string">&#x27;GitApi Not implemented yet.&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决gitlab的一个snippet只支持一个文件的方案：</p><ol><li>使用多个snippet来合并为一个gist的结构</li><li>通过设置相同的title名称，来归类多个snippet</li><li>对应关系表：<ol><li>md5(gist.description) —&gt; snippet.title</li><li>gist.description      —&gt; snippet.description</li><li>gist.files            —&gt; 多个snippet.file</li></ol></li></ol><h1 id="接口层具体实现"><a href="#接口层具体实现" class="headerlink" title="接口层具体实现"></a>接口层具体实现</h1><h2 id="登录与获取token接口"><a href="#登录与获取token接口" class="headerlink" title="登录与获取token接口"></a>登录与获取token接口</h2><p>解决方案：</p><ol><li>去掉账号登录，与获取token过程</li><li>通过配置文件.leptonrc直接获取</li></ol><p>.leptonrc扩展内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;gitlab&quot;: &#123;</span><br><span class="line">    &quot;enable&quot;: false,</span><br><span class="line">    &quot;host&quot;: &quot;&quot;,</span><br><span class="line">    &quot;token&quot;: &quot;&quot;,</span><br><span class="line">    &quot;avatarUrl&quot;: &quot;&quot;,</span><br><span class="line">    &quot;group&quot;:&quot;&quot;,</span><br><span class="line">    &quot;name&quot;:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取Api：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remote &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">const</span> conf = remote.getGlobal(<span class="string">&#x27;conf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conf.get(<span class="string">&#x27;gitlab:enable&#x27;</span>)) &#123;</span><br><span class="line">    token = conf.get(<span class="string">&#x27;gitlab:token&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getUserProfile（获取用户简介接口）"><a href="#getUserProfile（获取用户简介接口）" class="headerlink" title="getUserProfile（获取用户简介接口）"></a>getUserProfile（获取用户简介接口）</h2><p>接口作用：</p><ol><li>github：获取username，请求gist的必要参数</li><li>gitlab：获取username和projectid<ol><li>username：用于显示</li><li>projectid：请求snippet的必要参数</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserProfile</span> (<span class="params">token</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> ReqPromise(&#123;</span><br><span class="line">        uri: <span class="string">`http://<span class="subst">$&#123;hostApi&#125;</span>/user`</span>,</span><br><span class="line">        agent: proxyAgent,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: userAgent,</span><br><span class="line">        &#125;,</span><br><span class="line">        method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        qs: &#123;</span><br><span class="line">            private_token: token</span><br><span class="line">        &#125;,</span><br><span class="line">        json: <span class="literal">true</span>,</span><br><span class="line">        timeout: <span class="number">2</span> * kTimeoutUnit</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">profile</span>) =&gt;</span> &#123;</span><br><span class="line">        result.login = profile.username</span><br><span class="line">        <span class="comment">// 请求ProjectId</span></span><br><span class="line">        <span class="keyword">return</span> getProjectId(token, group, name)</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">projectId</span>) =&gt;</span> &#123;</span><br><span class="line">        result.projectId = projectId</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getAllGistsV2（获取所有片段）"><a href="#getAllGistsV2（获取所有片段）" class="headerlink" title="getAllGistsV2（获取所有片段）"></a>getAllGistsV2（获取所有片段）</h2><p>作用：请求所有的片段，用于统计所有的TAG，语言等等</p><p>由于snippet只支持一个file，此接口需添加转换逻辑：</p><ol><li>请求所有的snippets，分页请求，请求完所有的页面</li><li>通过title对snippets排序</li><li>通过相同的title，对snippets归类</li><li>按gist的json格式，添加必要信息，如updated_at，created_at，html_url，user</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllGistsV2</span> (<span class="params">token, userId, projectId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> snippetsList = []</span><br><span class="line">    <span class="keyword">return</span> requestGists(token, <span class="number">1</span>, snippetsList, projectId)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> maxPage = res.headers[<span class="string">&#x27;x-total-pages&#x27;</span>]</span><br><span class="line">      logger.debug(TAG + <span class="string">`The max page number for gist is <span class="subst">$&#123;maxPage&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> requests = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= maxPage; ++i) &#123; requests.push(requestGists(token, i, snippetsList, projectId)) &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requests)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> snippetsList.sort(<span class="function">(<span class="params">g1, g2</span>) =&gt;</span> g2.title.localeCompare(g1.title))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> gistList = []</span><br><span class="line">      <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; snippetsList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> snippet = snippetsList[i]</span><br><span class="line">        <span class="keyword">let</span> gist = map[snippet.title]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gist) &#123;</span><br><span class="line">          gist = &#123;&#125;</span><br><span class="line">          map[snippet.title] = gist</span><br><span class="line">          gistList.push(gist)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gist.files = gist.files || &#123;&#125;</span><br><span class="line">        gist.files[snippet[<span class="string">&#x27;file_name&#x27;</span>]] = snippet</span><br><span class="line">        snippet[<span class="string">&#x27;language&#x27;</span>] = judgeLanguage(snippet[<span class="string">&#x27;file_name&#x27;</span>])</span><br><span class="line">        snippet[<span class="string">&#x27;filename&#x27;</span>] = snippet[<span class="string">&#x27;file_name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        gist.description = snippet[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        gist.id = snippet[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        gist[<span class="string">&#x27;updated_at&#x27;</span>] = snippet[<span class="string">&#x27;updated_at&#x27;</span>]</span><br><span class="line">        gist[<span class="string">&#x27;created_at&#x27;</span>] = snippet[<span class="string">&#x27;created_at&#x27;</span>]</span><br><span class="line">        gist[<span class="string">&#x27;html_url&#x27;</span>] = snippet[<span class="string">&#x27;web_url&#x27;</span>]</span><br><span class="line">        gist[<span class="string">&#x27;user&#x27;</span>] = snippet[<span class="string">&#x27;author&#x27;</span>][<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        gist[<span class="string">&#x27;project_id&#x27;</span>] = snippet[<span class="string">&#x27;project_id&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;gistList=&#x27;</span>, gistList)</span><br><span class="line">      <span class="comment">// 做归类处理</span></span><br><span class="line">      <span class="keyword">return</span> gistList</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      logger.debug(TAG + <span class="string">`[V2] Something wrong happens <span class="subst">$&#123;err&#125;</span>. Falling back to [V1]...`</span>)</span><br><span class="line">      <span class="comment">// return getAllGistsV1(token, userId)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getSingleGist（获取片段详情）"><a href="#getSingleGist（获取片段详情）" class="headerlink" title="getSingleGist（获取片段详情）"></a>getSingleGist（获取片段详情）</h2><p>作用：主要返回file内容</p><p>gitlab的处理逻辑：</p><ol><li>遍历请求所有files的内容</li><li>按gist的格式添加到content字段里</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSingleGist</span> (<span class="params">token, gistId, oldGist</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> requests = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> filename <span class="keyword">in</span> oldGist.brief.files) &#123;</span><br><span class="line">        requests.push(requestSnippetContent(oldGist.brief.files[filename], token, oldGist.brief.project_id))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requests)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> oldGist.brief</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestSnippetContent</span> (<span class="params">snippet, token, projectId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> SINGLE_GIST_URI = <span class="string">`http://<span class="subst">$&#123;hostApi&#125;</span>/projects/<span class="subst">$&#123;projectId&#125;</span>/snippets/<span class="subst">$&#123;snippet.id&#125;</span>/raw`</span></span><br><span class="line">    <span class="keyword">return</span> ReqPromise(&#123;</span><br><span class="line">        uri: SINGLE_GIST_URI,</span><br><span class="line">        agent: proxyAgent,</span><br><span class="line">        headers: &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: userAgent</span><br><span class="line">        &#125;,</span><br><span class="line">        method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        qs: &#123;</span><br><span class="line">            private_token: token</span><br><span class="line">        &#125;,</span><br><span class="line">        json: <span class="literal">true</span>, <span class="comment">// Automatically parses the JSON string in the response</span></span><br><span class="line">        timeout: <span class="number">2</span> * kTimeoutUnit</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        snippet.content = res</span><br><span class="line">        <span class="keyword">return</span> snippet</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="createSingleGist（创建片段）"><a href="#createSingleGist（创建片段）" class="headerlink" title="createSingleGist（创建片段）"></a>createSingleGist（创建片段）</h2><p>作用：创建片段</p><p>gitlab的逻辑：</p><ol><li>按转换方案，分成多个snippet创建</li><li>创建成功后，按转换方案，合并成一个gist对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSingleGist</span> (<span class="params">token, description, files, isPublic, projectId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过description，生成其md5值，当作title</span></span><br><span class="line">    <span class="keyword">const</span> title = md5(description)</span><br><span class="line">    <span class="keyword">const</span> requests = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> filename <span class="keyword">in</span> files) &#123;</span><br><span class="line">        requests.push(createSingleSnippet(token, title, description, filename, files[filename].content, <span class="literal">false</span>, projectId))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requests)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;create res&#x27;</span>, res)</span><br><span class="line">            <span class="comment">// 转换所有的结果</span></span><br><span class="line">            <span class="keyword">const</span> gist = &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> isInit = <span class="literal">false</span></span><br><span class="line">            gist.files = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> snippet = res[i]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!isInit) &#123;</span><br><span class="line">                    isInit = <span class="literal">true</span></span><br><span class="line">                    gist.description = snippet[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">                    gist.id = snippet[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">                    gist[<span class="string">&#x27;updated_at&#x27;</span>] = snippet[<span class="string">&#x27;updated_at&#x27;</span>]</span><br><span class="line">                    gist[<span class="string">&#x27;created_at&#x27;</span>] = snippet[<span class="string">&#x27;created_at&#x27;</span>]</span><br><span class="line">                    gist[<span class="string">&#x27;html_url&#x27;</span>] = snippet[<span class="string">&#x27;web_url&#x27;</span>]</span><br><span class="line">                    gist[<span class="string">&#x27;user&#x27;</span>] = snippet[<span class="string">&#x27;author&#x27;</span>][<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">                    gist[<span class="string">&#x27;project_id&#x27;</span>] = snippet[<span class="string">&#x27;project_id&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                gist.files[snippet[<span class="string">&#x27;file_name&#x27;</span>]] = snippet</span><br><span class="line">                snippet[<span class="string">&#x27;language&#x27;</span>] = judgeLanguage(snippet[<span class="string">&#x27;file_name&#x27;</span>])</span><br><span class="line">                snippet[<span class="string">&#x27;filename&#x27;</span>] = snippet[<span class="string">&#x27;file_name&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;createSingleGist&#x27;</span>, gist)</span><br><span class="line">            <span class="keyword">return</span> gist</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="editSingleGist（编辑片段）"><a href="#editSingleGist（编辑片段）" class="headerlink" title="editSingleGist（编辑片段）"></a>editSingleGist（编辑片段）</h2><p>作用：修改片段</p><p>gitlab的逻辑：按file名称，比较修改后updategist与原gist，规则如下：</p><ol><li>文件名相同：更新操作</li><li>新增文件名：创建操作</li><li>删除文件名：删除操作</li></ol><p><strong>核心代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">editSingleGist</span> (<span class="params">token, gistId, updatedDescription, updatedFiles, gist</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> requests = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> filename <span class="keyword">in</span> updatedFiles) &#123;</span><br><span class="line">        <span class="keyword">let</span> file = gist.brief.files[filename]</span><br><span class="line">        <span class="keyword">if</span> (file) &#123;</span><br><span class="line">            <span class="keyword">if</span> (updatedFiles[filename] == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 删除</span></span><br><span class="line">                requests.push(deleteSingleSnippet(token, gist.brief.files[filename].id, gist.brief.project_id))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 更新</span></span><br><span class="line">                requests.push(updateSingleSnippet(token, file.id, file.title, updatedDescription, filename, updatedFiles[filename].content, gist.brief.project_id))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建</span></span><br><span class="line">            requests.push(createSingleSnippet(token, gist.brief.id, updatedDescription, filename, updatedFiles[filename].content, <span class="literal">false</span>, gist.brief.project_id))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deleteSingleGist（删除片段）"><a href="#deleteSingleGist（删除片段）" class="headerlink" title="deleteSingleGist（删除片段）"></a>deleteSingleGist（删除片段）</h2><p>作用：删除片段</p><p>gitlab的逻辑：遍历files，逐一删除snippet</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteSingleGist</span> (<span class="params">token, gistId, gist</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> requests = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> filename <span class="keyword">in</span> gist.brief.files) &#123;</span><br><span class="line">        requests.push(deleteSingleSnippet(token, gist.brief.files[filename].id, gist.brief.project_id))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requests)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码及使用文档"><a href="#源码及使用文档" class="headerlink" title="源码及使用文档"></a>源码及使用文档</h1><p><strong>源码：</strong></p><ul><li>github地址：<a href="https://github.com/handsomeliuyang/Lepton">https://github.com/handsomeliuyang/Lepton</a></li><li>分支：f-gitlab-ly</li></ul><p><strong>Lepton-Gitlab软件下载：</strong>链接:<a href="https://pan.baidu.com/s/17GSxKzEuP9ItYm11NgJRgw">https://pan.baidu.com/s/17GSxKzEuP9ItYm11NgJRgw</a>  密码:btq0</p><p><strong>使用文档</strong></p><ol><li>在gitlab上创建一个Project用于存储代码片段，如group/project</li><li>配置.leptonrc文件，新增如下配置：<a href="https://gist.github.com/hackjutsu/1ad7e4968eb64d881ec9dedd6c0f400b">更多参考</a> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;gitlab&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;gitlab的服务器host&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;avatarUrl&quot;</span>:<span class="string">&quot;https://img.icons8.com/color/480/000000/gitlab.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;group&quot;</span>:<span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;xxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 字段说明：<ol><li>enable：打开使用gitlab开关</li><li>host：gitlab的host</li><li>token：gitlab账号的token，登录gitlab，【setting】-&gt;【Access Tokens】</li><li>avatarUrl：头像图标地址</li><li>group：读取Snippets的Project的group</li><li>name：读取Snippets的Project的name</li></ol></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://developer.github.com/v3/">GitHub API</a></li><li><a href="https://docs.gitlab.com/ee/api/">GitLab API</a></li><li><a href="https://github.com/hackjutsu/Lepton">hackjutsu/Lepton</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在一套成熟的App框架里，有非常丰富的基础库，中间件等等模块。新的需求都是基于这些基础能力来开发的，RD在开发时，大部分都是Copy再做二次</summary>
      
    
    
    
    <category term="经验总结" scheme="https://handsomeliuyang.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="electron" scheme="https://handsomeliuyang.github.io/tags/electron/"/>
    
    <category term="前端" scheme="https://handsomeliuyang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习笔记</title>
    <link href="https://handsomeliuyang.github.io/2019/06/04/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://handsomeliuyang.github.io/2019/06/04/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-06-04T01:43:09.000Z</published>
    <updated>2020-10-24T06:15:23.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>关键点：</p><ol><li>后进先出（last in, first out）</li><li>插入操作称为Push（压入），删除操作称为Pop（弹出）</li><li>数组实现栈：top指针指向栈顶元素 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> top = -<span class="number">1</span>; <span class="comment">// top指针</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">stackEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    top++;</span><br><span class="line">    stack[top] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = stack[top];</span><br><span class="line">    top--;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>关键点：</p><ol><li>先进先出（first in, first out）</li><li>插件操作称为Enqueue（入队），删除操作称为Dequeue（出队）</li><li>数组实现队列：<ol><li>充分利用数组，实现循环</li><li>两个指针：head，tail<ol><li>head指向队尾元素</li><li>tail指向队尾的下一个元素 – 目的是为了判断队满与队空</li></ol></li><li>队空判断：head == tail</li><li>队满判断：tail + 1 = head<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] queue = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">private</span> head, tail = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断队满</span></span><br><span class="line">    <span class="keyword">if</span>((tail + <span class="number">1</span>) == head) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[tail] = x;</span><br><span class="line">    tail = (tail+<span class="number">1</span>)%queue.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function">Integer <span class="title">dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断队空</span></span><br><span class="line">    <span class="keyword">if</span>(tail == head) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> value = queue[head];</span><br><span class="line">    head = (head+<span class="number">1</span>)%queue.length;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="散列表（hash-table）"><a href="#散列表（hash-table）" class="headerlink" title="散列表（hash table）"></a>散列表（hash table）</h1><p>关键点：</p><ol><li>实现字典操作的一种数据结构</li><li>思想：数组的推广使用，利用数组下标的快速寻址，同时控制数组的大小</li><li>平均时间复杂度O(1)，最坏时间复杂度O(n)</li><li>寻址：通过散列函数（hash function）计算其散列值<ol><li>除法散列法：h(k)=k mod m（m为槽数，即数组长度）— m最好是素数，不应为2的幂</li><li>乘法散列法： m 乘以 kA 的小数部分（m为槽数，即数组长度）— 对m没有取值要求，一般为2的幂</li></ol></li><li>冲突：链表法<ol><li>数组+链表实现</li><li>装载因子（load factor）的定义：能存放n个元素的、具有m个槽位的散列表T，T的装载因子（load factor）a = n/m，即一个链的平均存储元素数</li></ol></li></ol><p>Java的HashMap：</p><ol><li>HashMap非线程安全，Collections.synchronizedMap()使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</li><li>冲突：使用链地址法解决</li><li>存储结构：<strong>数组+链表+红黑树</strong>（JDK1.8增加了红黑树部分），链表长度大于8时转换为红黑树，复杂度从O(n)降到O(logn)</li><li>寻址：<ol><li>取key的hashCode值，h = key.hashCode()； </li><li>高位参与运算，h ^ (h &gt;&gt;&gt; 16)； —- 由于模运算比较耗时，减少参与模运行的位数</li><li>取模运算，h &amp; (length-1) — 由于length总是2的n次方，h &amp; (length-1)运算等价于对length取模</li></ol></li><li>扩容时机：<ol><li>数组length默认值为16</li><li>load factor(装载因子)默认为0.75<ol><li>默认的负载因子0.75是对空间和时间效率的一个平衡选择</li><li>内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1</li></ol></li><li>当前的扩容阀值：threshold = length * load factor，即在length和load factor固定的情况下，最大的存储链值对</li></ol></li><li>扩容：数组的length扩大2倍，目的是不用重新计算hashcode，<strong>元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置</strong></li><li>其他点：<ol><li>在HashMap中，数组的长度length大小必须为2的n次方(一定是合数)，这是一种非常规的设计。— HashMap采用这种非常规设计，主要是为了在取模和扩容时做优化，同时减少冲突，HashMap定位哈希桶索引位置时，也加入了高位参与运算的过程。<ol><li>常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数，<a href="http://blog.csdn.net/liuqiyao_01/article/details/14475159">具体证明</a>，Hashtable初始化桶大小为11，就是桶大小设计为素数的应用（Hashtable扩容后不能保证还是素数）</li></ol></li><li>这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响HashMap的性能。于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能。</li></ol></li><li>使用注意点：<ol><li>扩容是一个特别耗性能的操作，所以使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。</li><li>HashMap是线程不安全的，在并发的环境中建议使用ConcurrentHashMap</li></ol></li></ol><h1 id="树的遍历方式"><a href="#树的遍历方式" class="headerlink" title="树的遍历方式"></a>树的遍历方式</h1><p>通过key的输出位置命名遍历方法：</p><ol><li>先序遍历：<ol><li>print key</li><li>print left.key</li><li>print right.key</li></ol></li><li>中序遍历：<ol><li>print left.key</li><li>print key</li><li>print right.key</li></ol></li><li>后序遍历：<ol><li>print left.key</li><li>print right.key</li><li>print key</li></ol></li></ol><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><p>关键点：</p><ol><li>定义：所有的结点都满足left.key &lt;= key &lt;= right.key</li><li>顺序输出：中序遍历顺序输出</li><li>后继和前驱：<ol><li>概念：中序遍历的下一个元素和上一个元素</li><li>key的后继为key的右子树中的最左结点</li><li>key的前驱为key的左子树中的最右结点</li></ol></li><li>插入：先找到插入点 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">public</span> Node p;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">tree_insert</span><span class="params">(Node root, Node z)</span></span>&#123;</span><br><span class="line">    Node x = root;</span><br><span class="line">    Node y = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="keyword">null</span>)&#123;</span><br><span class="line">        y = x;</span><br><span class="line">        x = (z.key &gt;= x.key) ? x.right : x.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// root为null</span></span><br><span class="line">    <span class="keyword">if</span>(y == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(z.key &gt;= y.key)&#123;</span><br><span class="line">        y.right = z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y.left = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除：三种情况<ol><li>待删除结点z，没有左右结点，直接删除</li><li>待删除结点z，有且只有一个结点，直接替换就行</li><li>待删除结点z，有两个结点，使用z的后继y来替换，y的右结点替换y的位置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">public</span> Node p;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">tree_delete</span><span class="params">(Node root, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 先查找到对应的节点z</span></span><br><span class="line">    Node z = tree_search(root, key);</span><br><span class="line">    <span class="comment">// 没有左结点，直接替换</span></span><br><span class="line">    <span class="keyword">if</span>(z.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">        transplant(root, z, z.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(z.right == <span class="keyword">null</span>)&#123; <span class="comment">// 没有右结点，直接替换</span></span><br><span class="line">        transplant(root, z, z.left);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左右结点都有</span></span><br><span class="line">        <span class="comment">// z.right的最小元素，就是z的后继</span></span><br><span class="line">        z_succeed = tree_mininum(z.right);</span><br><span class="line">        <span class="comment">// z_succeed有两种情况</span></span><br><span class="line">        <span class="keyword">if</span>(z.right != z_succeed)&#123; <span class="comment">// 后继是z.right的最小结点</span></span><br><span class="line">            <span class="comment">// 先把 z_succeed.right 接上 z_succeed.p</span></span><br><span class="line">            transplant(root, z_succeed, z_succeed.right);</span><br><span class="line">            z_succeed.right = z.right;</span><br><span class="line">            z_succeed.right.p = z;</span><br><span class="line">        &#125; </span><br><span class="line">        transplant(root, z, z_succeed);</span><br><span class="line">        z_succeed.left = z.left;</span><br><span class="line">        z_succeed.left.p = z_succeed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>时间复杂度：O(h), h是二叉搜索做的高度<ol><li>最坏查找性能：O(n) — 单链</li><li>最好查找性能：O(lgn) — 刚好是完全二叉树</li></ol></li><li>二叉搜索树的优化思路：平衡二叉搜索树</li></ol><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>关键点：</p><ol><li>意义：是一棵二叉搜索做，保证最坏情况的时间复杂度为O(lgn)</li><li>实现思路：红黑树是一棵二叉搜索做，它在每个结点上增加一个存储位来表示结点的颜色，可以是Red或Back。通过对任何一条从根到叶子的简单路径上各个结点的颜色进行约束，红黑树确保没有一条路径会比其他路径长出2倍，因而返似于平衡的。</li><li>定义：满足如下红黑性质的二叉搜索做<ol><li>每个节点要么是红色，要么是黑色。</li><li>根节点必须是黑色</li><li>红色节点不能连续（也即是，红色节点的孩子和父亲都不能是红色）。</li><li>对于每个节点，从该点至null（树尾端）的任何路径，都含有相同个数的黑色节点。</li></ol></li><li>操作：<ol><li>旋转：左旋，右旋，都能保持二叉搜索树的特性</li><li>插入：<ol><li>按二叉搜索树插入z，并把z标记为RED</li><li>保持红黑树性质：通过着色与旋转恢复红黑树的特性，有如下几种情况：<ol><li>Case1：当前节点的父节点是红色，且当前节点的祖父节点的另一个子节点（叔叔节点）也是红色。<ol><li>将“父节点”设为黑色。</li><li>将“叔叔节点”设为黑色。</li><li>将“祖父节点”设为“红色”。</li><li>将“祖父节点”设为“当前节点”(红色节点)；即，之后继续对“当前节点”进行操作。</li></ol></li><li>Case2：当前节点的父节点是红色，叔叔节点是黑色，且当前节点是其父节点的右孩子<ol><li>将“父节点”作为“新的当前节点”。</li><li>以“新的当前节点”为支点进行左旋。</li></ol></li><li>Case3：当前节点的父节点是红色，叔叔节点是黑色，且当前节点是其父节点的左孩子<ol><li>将“父节点”设为“黑色”。</li><li>将“祖父节点”设为“红色”。</li><li>以“祖父节点”为支点进行右旋。</li></ol></li></ol></li></ol></li><li>删除：<ol><li>先找到需删除的元素</li><li>按二叉搜索树的方式删除元素</li><li>保持红黑树性质：着色与旋转（只有删除点是BLACK的时候，才会触发调整函数）<ol><li>略，请查看参考里的文章</li></ol></li></ol></li></ol></li><li>时间复杂度：插入，删除，查询的时间复杂度都是O(lgn)</li><li>问题：<ol><li>插件时，为什么要默认设置为Red？ — 如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑节点，为了满足定义，那就要调整其他路径上的黑节点数量</li><li>删除时，为什么只只有删除点是BLACK的时候，才会触发调整函数？ — 因为删除RED节点不会破坏红黑树的任何约束，而删除BLACK节点会破坏规则4</li></ol></li></ol><p>Java里的TreeMap是通过红黑树实现：可以顺序输出所有的元素，所有操作的时间复杂度为O(lgn)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>算法导论</li><li><a href="https://blog.csdn.net/login_sonata/article/details/76598675">Java8的HashMap详解（存储结构，功能实现，扩容优化，线程安全，遍历方法）</a></li><li><a href="https://www.cnblogs.com/CarpenterLee/p/5503882.html">史上最清晰的红黑树讲解（上）</a></li><li><a href="https://www.cnblogs.com/CarpenterLee/p/5525688.html#4255742">史上最清晰的红黑树讲解（下）</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后进先出（last in, first out）&lt;/li&gt;
&lt;li&gt;插入操作称为Push（压入），删除操作称为P</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习笔记</title>
    <link href="https://handsomeliuyang.github.io/2019/05/07/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://handsomeliuyang.github.io/2019/05/07/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-05-07T06:47:09.000Z</published>
    <updated>2020-10-24T06:13:55.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin优势"><a href="#Kotlin优势" class="headerlink" title="Kotlin优势"></a>Kotlin优势</h1><ol><li>更安全，避免NPE（NullPointerException），强制判断再使用</li><li>更多的语言特性（如java8新特性，类扩展等等），使用代码更简洁</li><li>与Java互调，能使用Java所有的工具库（<font color="#ff0000">原因：</font>Kotlin编译为JVM上运行的字节码，与java的原生字节码基本一致，部份情况下，性能更强）</li></ol><h1 id="Kotlin基础类型"><a href="#Kotlin基础类型" class="headerlink" title="Kotlin基础类型"></a>Kotlin基础类型</h1><p>Kotlin是强类型语言，即确定类型后，就不能再修改其类型。JavaScript就是弱类型语言</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>抛弃了Java的基本类型，都是引用类型：</p><ol><li>整数：Byte-1, Short-2, Int-4, Long-8</li><li>浮点型：Float-4, Double-8</li><li>字符型：Char，’a’</li><li>Boolean类型：Boolean</li><li>字符串：String，”abc”</li><li><font color="#ff0000">字符串模板：</font>”图书价格是: ${bookPrice }”</li><li><font color="#ff0000">类型别名：</font>typealias 类型别名=已有类型</li></ol><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>语法：var|val 变量名[:类型] [= 初始值]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读写变量</span></span><br><span class="line"><span class="keyword">var</span> name: String = <span class="string">&quot;ly&quot;</span></span><br><span class="line"><span class="comment">// 只读变量</span></span><br><span class="line"><span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>val表示只读变量，不同的变量类型，其初始值有一定的区别：</p><ol><li>局部变量：只要在第一次使用之前初始化值就行</li><li>类属性：可以声明时，或构造函数里初始化</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span> <span class="comment">// = 18</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> tempVar: String</span><br><span class="line">        ...</span><br><span class="line">        tempVar = <span class="string">&quot;初始值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Null安全"><a href="#Null安全" class="headerlink" title="Null安全"></a>Null安全</h2><p>通过如下语法保证Null安全：</p><ol><li>类属性没有默认值，强制设置初始值</li><li>var a:String 不支持null值</li><li>var a:String? 支持null值，但不能直接调用其方法与属性</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> a:String = <span class="literal">null</span> <span class="comment">// 编译报错</span></span><br><span class="line">        <span class="keyword">var</span> a:String? = <span class="literal">null</span> <span class="comment">// 编译通过</span></span><br><span class="line">        <span class="keyword">if</span>(savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">            a = <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;a.length&#125;</span>&quot;</span>) <span class="comment">// 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可空变量使用姿式：</strong></p><ol><li>先判空再使用 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a != <span class="literal">null</span>)&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123; a.length &#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>安全调用 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123; a?.length &#125;</span>&quot;</span>) <span class="comment">// 当a==null时，返回null</span></span><br></pre></td></tr></table></figure></li><li>Elvis运算，对安全调用的补充，允许修改为null时的返回值 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123; a?.length ?: <span class="string">&quot;&quot;</span> &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>强制调用，可能引发NPE异常 — <font color="#ff0000">不推荐</font> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123; a!!.length &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="Kotlin运算符"><a href="#Kotlin运算符" class="headerlink" title="Kotlin运算符"></a>Kotlin运算符</h1><p>两个关键点：</p><ol><li>运算符通过方法实现，即运算符都是编译时使用，编译后都是方法</li><li>支持运算符重载</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运算符重载</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal: Animal = Animal(<span class="string">&quot;animal&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> animal2: Animal = Animal(<span class="string">&quot;animal2&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> animal3: Animal</span><br><span class="line"><span class="comment">// 下面两个写法是一样的</span></span><br><span class="line">animal3 = animal.plus(animal2);</span><br><span class="line">animal3 = animal + animal2 <span class="comment">// 编译为字节码的代码：animal.plus(animal2);</span></span><br></pre></td></tr></table></figure><p><strong>常用运算符对应表</strong></p><table><thead><tr><th>运算符</th><th>对应方法</th></tr></thead><tbody><tr><td>a - b</td><td>a.minus(b)</td></tr><tr><td>a + b</td><td>a.plus(b)</td></tr><tr><td>a * b</td><td>a.times(b)</td></tr><tr><td>a / b</td><td>a.div(b)</td></tr><tr><td>a[i]</td><td>a.get(i)</td></tr><tr><td>a[i]=b</td><td>a.set(i, b)</td></tr><tr><td><font color="#ff0000">a == b</font></td><td>a?.equals(b) ?: (b === null)</td></tr><tr><td>a != b</td><td>!(a?.equals(b) ?: (b === null)))</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr><tr><td>a !in b</td><td>!b.minus(a)</td></tr></tbody></table><p><strong>三个等号===</strong></p><p>=== 三个等号的意思，则比较的是内存地址，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;字符串&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line"><span class="keyword">var</span> c = a</span><br><span class="line">print(b === c) <span class="comment">// 结果为true</span></span><br></pre></td></tr></table></figure><p>但对于Int类型的变量有差异，有兴趣的同学可以进一步再了解</p><h1 id="Kotlin流程控制"><a href="#Kotlin流程控制" class="headerlink" title="Kotlin流程控制"></a>Kotlin流程控制</h1><p>关键点：</p><ol><li>没有三目运算符，if表达式支持返回值 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不支持三目运算符</span></span><br><span class="line"><span class="comment">// min = (a &gt; b) ? a : b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过if替换</span></span><br><span class="line">min = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure></li><li>when 替换 switch <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">when</span> (score)&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> -&gt; println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span> -&gt; println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span> -&gt; println(<span class="string">&quot;中&quot;</span>)</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span> -&gt; println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>for的语法：for (常量名 in 对象) {} <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历1-5</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span>)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list: Array&lt;String&gt; = arrayOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> list)&#123;</span><br><span class="line">    println(<span class="string">&quot;<span class="subst">$&#123;key&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面的写法不支持</span></span><br><span class="line"><span class="comment">//for(int i=0; i&lt;list.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//    println(&quot;$&#123;list[i]&#125;&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Kotlin的数组和集合"><a href="#Kotlin的数组和集合" class="headerlink" title="Kotlin的数组和集合"></a>Kotlin的数组和集合</h1><h2 id="Array，Set，List"><a href="#Array，Set，List" class="headerlink" title="Array，Set，List"></a>Array，Set，List</h2><ol><li>创建对象<ol><li>xxxOf(参数) — 长度固定</li><li>mutableXXXOf(参数) — 长度可变（Array除外）</li></ol></li><li>常用功能<ol><li>长度：xxx.size属性</li><li>包含：”java” in xxx 对应方法：xxx.contains(“java”)</li><li>…</li></ol></li><li>遍历<ol><li>遍历值：for (book in books) { }</li><li>遍历下标：for (i in books.indices) {}</li><li>遍历下标与值：for ( (index, value) in books.withindex() ) { }</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">var</span> array: Array&lt;String&gt;</span><br><span class="line">array = arrayOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">array = Array&lt;String&gt;(<span class="number">3</span>, &#123;index-&gt; <span class="string">&quot;a<span class="subst">$&#123;index&#125;</span>&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建List</span></span><br><span class="line"><span class="keyword">var</span> list: List&lt;String&gt;</span><br><span class="line">list = listOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)        <span class="comment">// 长度不可变</span></span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>) <span class="comment">// 无此方法，编译报错</span></span><br><span class="line">list = mutableListOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>) <span class="comment">// 长度可变</span></span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>) <span class="comment">// 编译成功</span></span><br><span class="line">list = arrayListOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)   <span class="comment">// ArrayList</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Set</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span>: Set&lt;String&gt;</span><br><span class="line"><span class="keyword">set</span> = setOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)          <span class="comment">// 长度不可变</span></span><br><span class="line"><span class="keyword">set</span>.add(<span class="string">&quot;d&quot;</span>) <span class="comment">// 无此方法，编译报错</span></span><br><span class="line"><span class="keyword">set</span> = mutableSetOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)   <span class="comment">// 长度可变</span></span><br><span class="line"><span class="keyword">set</span>.add(<span class="string">&quot;d&quot;</span>) <span class="comment">// 编译成功</span></span><br><span class="line"><span class="keyword">set</span> = hashSetOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)      <span class="comment">// HashSet</span></span><br><span class="line"><span class="keyword">set</span> = linkedSetOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)    <span class="comment">// LinkedHashSet</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历值</span></span><br><span class="line"><span class="keyword">for</span> (value <span class="keyword">in</span> array) &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历下标</span></span><br><span class="line"><span class="keyword">for</span> (index <span class="keyword">in</span> array.indices)&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;array[index]&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历下标与值</span></span><br><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex())&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;index&#125;</span>,<span class="subst">$&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ol><li>创建对象<ol><li>mapOf(”Java” to 86, “xxx” to xx) — 长度固定</li><li>mutableMapOf(”Java” to 86, “xxx” to xx) — 长度可变</li></ol></li><li>常用功能<ol><li>长度：map.size属性</li><li>包含：key in map 对应方法：map.contains(key)</li></ol></li><li>遍历<ol><li>遍历Entry：for (en in map.entries) { en.key  en.value}</li><li>解构遍历key，value：for ( (key, value) in map) {}</li><li>遍历key：for (key in map.keys ) {}</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Map</span></span><br><span class="line"><span class="keyword">var</span> map: Map&lt;String, <span class="built_in">Int</span>&gt;</span><br><span class="line">map = mapOf(<span class="string">&quot;Java&quot;</span> to <span class="number">86</span>, <span class="string">&quot;Kotlin&quot;</span> to <span class="number">87</span>)         <span class="comment">// 长度不可变</span></span><br><span class="line"><span class="comment">// map.put(&quot;Flutter&quot;, 88) // 无此方法，编译报错</span></span><br><span class="line">map = mutableMapOf(<span class="string">&quot;Java&quot;</span> to <span class="number">86</span>, <span class="string">&quot;Kotlin&quot;</span> to <span class="number">87</span>)  <span class="comment">// 长度可变</span></span><br><span class="line">map.put(<span class="string">&quot;Flutter&quot;</span>, <span class="number">88</span>) <span class="comment">// 编译成功</span></span><br><span class="line">map = hashMapOf(<span class="string">&quot;Java&quot;</span> to <span class="number">86</span>, <span class="string">&quot;Kotlin&quot;</span> to <span class="number">87</span>)     <span class="comment">// HashMap</span></span><br><span class="line">map = linkedMapOf(<span class="string">&quot;Java&quot;</span> to <span class="number">86</span>, <span class="string">&quot;Kotlin&quot;</span> to <span class="number">87</span>)   <span class="comment">// LinkedHashMap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历Entry</span></span><br><span class="line"><span class="keyword">for</span> (en <span class="keyword">in</span> map.entries) &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;en.key&#125;</span>,<span class="subst">$&#123;en.value&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解构遍历key，value</span></span><br><span class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;key&#125;</span>,<span class="subst">$&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历key</span></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> map.keys) &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;key&#125;</span>,<span class="subst">$&#123;map[key]&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin的函数或方法"><a href="#Kotlin的函数或方法" class="headerlink" title="Kotlin的函数或方法"></a>Kotlin的函数或方法</h1><p>关键点：</p><ol><li>独立存在称为函数（function），存在类里的称为方法（method）</li><li><font color="#ff0000">语法：</font> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> 函数名<span class="params">(参数名 : 参数类型)</span></span>[:返回值类型]&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 无法返回值：省略 或 :<span class="built_in">Unit</span>（相当于Java的void）</span><br><span class="line"><span class="number">2</span>. 参数：支持命名参数，默认值，可变参数(<span class="keyword">vararg</span>)</span><br></pre></td></tr></table></figure></li><li>函数可当变量的类型：var myfun : (Int , Int) -&gt; Int = ::pow</li><li>函数在字节码里，通过类来实现</li><li>匿名函数的语法：fun(参数名 : 参数类型)[:返回值类型]{ }</li><li>内联函数：<ol><li>语法：inline fun 函数名(参数名:参数类型)[:返回值类型]{ }</li><li>意义：提升代码量很少，但调用很频繁的函数开销</li><li>原理：增加代码来减少函数调用的时间开销，适用于代码量非常少的函数，如单表达式</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="keyword">var</span> c: <span class="built_in">Int</span> = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> d: <span class="built_in">Int</span> = add( b = <span class="number">1</span>, a = <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 创建一个函数类型</span></span><br><span class="line"><span class="keyword">var</span> e: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = ::add</span><br><span class="line"><span class="keyword">var</span> f: <span class="built_in">Int</span> = e(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">//var g: Int = e(a=1, b=2) // 编译不通过</span></span><br></pre></td></tr></table></figure><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>关键点</p><ol><li>语法： <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; 参数名 : 参数类型 -&gt;  函数体 &#125;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 最后一行默认<span class="keyword">return</span></span><br><span class="line"><span class="number">2</span>. 如果只有一个参数，可以省略参数，使用it代替</span><br><span class="line"><span class="number">3</span>. 显示添加<span class="keyword">return</span>语句，不是返回其本身，而是返回其所在的函数</span><br></pre></td></tr></table></figure></li><li>意义：<ol><li>简化局部函数</li><li>简化函数式接口（函数式接口：只包含一个抽象方法的接口）</li></ol></li><li>使用注意点：<ol><li>方法的参数是函数或函数式接口时：<ol><li>只一个参数：可省略括号</li><li>最后一参数时：Lambda表达式可写在圆括号外面</li></ol></li><li>与局部函数或匿名内部类一样，可以访问所在函数的局部变量 — 注意：是变量的副本</li><li>支持解构，括号里的参数表示是解析的变量，如下两种写法：<ol><li>map.mapValues { entry -&gt;”${entry.key}-${entry.value}!”} // 正常参数</li><li>map.mapValues { (key, value) -&gt; ”${key}-${value}!” } // 解构</li></ol></li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> clickTime: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> text: TextView = findViewById(R.id.textView2)</span><br><span class="line">        <span class="keyword">var</span> btn: Button = findViewById(R.id.btn)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// OnClickListener是一个函数式接口（只有onClick(View)的方法）</span></span><br><span class="line">        <span class="comment">// setOnClickListener(OnClickListener) 此方法只有一个函数式接口参数，可省略括号</span></span><br><span class="line">        btn.setOnClickListener &#123; view -&gt;</span><br><span class="line">            text.setText(<span class="string">&quot;<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// postDelayed(Runnable, long) 有两个参数，且Runnable参数不在最后，不能省略</span></span><br><span class="line">        btn.postDelayed(&#123;</span><br><span class="line">            text.setText(<span class="string">&quot;<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin的面向对象：类"><a href="#Kotlin的面向对象：类" class="headerlink" title="Kotlin的面向对象：类"></a>Kotlin的面向对象：类</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>关键点：</p><ol><li>分为主构造器与次构造器，互为重载方法，其语法如下： <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主构造器，可以省略constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化块，相当于主构造器的函数体，注意：可以有多个初始化块</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 次构造器，必须调用主构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>() :<span class="keyword">this</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 次构造器，必须调用主构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String): <span class="keyword">this</span>(name, <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 次构造器，必须调用主构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>(age: <span class="built_in">Int</span>): <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>, age) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>主构造器的参数使用var|val修饰时，即表示形参，也表示类的属性 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主构造器，可以省略constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"><span class="comment">//    var name: String</span></span><br><span class="line"><span class="comment">//    var age: Int</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    init &#123;</span></span><br><span class="line"><span class="comment">//        this.name = name</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>意义：把构造器中相同的逻辑放在初始化块中，个性化的放在次构造器中</li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>关键点：</p><ol><li>语法与变量一样</li><li>对属性，默认生成getter，setter方法（val属性只提供getter），编译为字节码后生成如下成员：<ol><li>backing field： xxx属性</li><li>getter方法：    getXXX()</li><li>setter方法：    setXXX()</li></ol></li><li>getter,setter方法可重载，在重载方法里，通过field访问backing field（为防止死循环）</li><li>注意：<ol><li>val属性会出现两种情况：— 判断依据：getter方法里没有调用field，就是计算属性<ol><li>只有getter方法 — 称为计算属性</li><li>backing field 和 getter方法 — 只读属性</li></ol></li><li>private属性，默认不会生成getter, setter方法，但如果重写getter，setter方法后，会生成</li></ol></li><li>意义：很方便实现数据监听机制，类型Vue的MVVM框架</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只读属性</span></span><br><span class="line"><span class="keyword">val</span> fur: String = <span class="string">&quot;red&quot;</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fur=<span class="subst">$&#123;field&#125;</span>&quot;</span> <span class="comment">// 拦截fur变量，添加前缀</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">val</span> nameAndAge: String</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="comment">// 没有使用field属性，所以不会生成backing field</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;this.name&#125;</span>-<span class="subst">$&#123;this.age&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h2><p>方法与函数基本一致，略</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>关键点：</p><ol><li>创建对象省略new关键字，如：var animal: Animal = Animal()</li><li>访问属性，本质是调用getter，setter方法： <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal: Animal = Animal()</span><br><span class="line"><span class="keyword">var</span> name: String = animal.name <span class="comment">// 实现是调用animal.getName()</span></span><br><span class="line">animal.age = <span class="number">3</span> <span class="comment">// 实际是调用animal.setAge(3)</span></span><br></pre></td></tr></table></figure></li><li>支持解构：（解构：相当于一个运算符，通过operator重载） <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Animal通过重载，支持解构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">constructor</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重载解构</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component1</span><span class="params">()</span></span>: String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重载解构</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component2</span><span class="params">()</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Animal</span>)</span></span>: Animal&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + other.name</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="keyword">this</span>.age + other.age</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景1</span></span><br><span class="line"><span class="keyword">var</span> animal: Animal = Animal(<span class="string">&quot;&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> (name, age) = animal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景2</span></span><br><span class="line"><span class="keyword">var</span> list:List&lt;Animal&gt; = mutableListOf();</span><br><span class="line"><span class="keyword">for</span>((name, age) <span class="keyword">in</span> list)&#123;</span><br><span class="line">    printlin(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>-<span class="subst">$&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数据类：<ol><li>语法：data class XXX()</li><li>意义：用于替换Java的Bean，自动提供解构方法，使用很方便<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过数据类定义Animal</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动支持解构</span></span><br><span class="line"><span class="keyword">var</span> animal:Animal = Animal(<span class="string">&quot;&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> (name, age) = animal</span><br></pre></td></tr></table></figure></li></ol></li><li>import支持起别名<ol><li>意义：方便包名不同，名称相同的类的使用</li><li>语法：import xxx as 别名</li></ol></li></ol><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>关键点：</p><ol><li>类，方法，属性默认情况下：final public，通过open修饰后，才能被继承与重写</li><li>注意：在Kotlin里，final表示的含义与java有区别，只表示不能继承与重写，不表示只读，只读与常量的写法：<ol><li>只读：val 变量名 —》java里的final 变量名</li><li>常量：const val 变量名 —》java里的static final 变量名   //同时只能定义在top-level，属于文件，不属于类</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量，需处于top-level</span></span><br><span class="line"><span class="comment">// 相当于java里的：static final String TAG = &quot;liuyang&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> TAG: String = <span class="string">&quot;liuyang&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">constructor</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="comment">// 相当于java里的：final String description = &quot;Animal Class&quot;</span></span><br><span class="line">    <span class="keyword">val</span> description: String = <span class="string">&quot;Animal Class&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2><p>关键点：</p><ol><li>继承：<ol><li>语法：class SubClass : Superclass {}</li><li>顶级父类是Any，不是Object，区别：方法较少</li><li>构造器的执行顺序：<ol><li>父类的主构造器（即初始化块）</li><li>父类的次构造器（前题是子类调了相应的次构造器）</li><li>子类的主构造器（即初始化块）</li><li>子类的次构造器</li></ol></li></ol></li><li>重写（方法和属性）<ol><li>方法重写：override fun xxx() {}</li><li>属性重写：override var xxx: String = “图片”</li></ol></li><li>使用：<ol><li>类型判断：is 或 !is —&gt;java里的instanceOf</li><li>强制转换：<ol><li>xxx as 类：强制转换，可能崩溃</li><li>xxx as? 类：安全的强制转换，转换失败返回null</li></ol></li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">constructor</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">showDescription</span><span class="params">()</span></span>: String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Animal description is <span class="subst">$&#123;this.name&#125;</span>-<span class="subst">$&#123;this.age&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承Animal，并调用其主构造器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>(age: <span class="built_in">Int</span>): Animal(<span class="string">&quot;dog&quot;</span>, age) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的showDescription()方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">showDescription</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog description is <span class="subst">$&#123;this.name&#125;</span>-<span class="subst">$&#123;this.age&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> animal: Animal = Dog(<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 按java的思路的写法，不然会崩溃</span></span><br><span class="line"><span class="keyword">if</span>(animal <span class="keyword">is</span> Dog) &#123;</span><br><span class="line">    <span class="keyword">var</span> dog: Dog = animal <span class="keyword">as</span> Dog</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更简单写法</span></span><br><span class="line"><span class="keyword">var</span> dog: Dog? = animal <span class="keyword">as</span>? Dog</span><br></pre></td></tr></table></figure><h2 id="类的扩展"><a href="#类的扩展" class="headerlink" title="类的扩展"></a>类的扩展</h2><p>关键点：</p><ol><li>语法：<ol><li>方法扩展：fun Raw.info() { }</li><li>属性扩展：var Raw.fullName: String get(){} – <font color="#ff0000">注意：</font>由于只是添加了getter，setter方法，没有backing field，所以只能是计算属性</li></ol></li><li>扩展的意义：<ol><li>扩展可动态地为己有的类添加方法或属性，方式不在限定于继承或动态代理来实现</li><li>扩展能以更好的形式组织一些工具方法，更好的面向对象的代码风格，如Collections.sort()，应该是list.sort()</li></ol></li><li>扩展的实现机制：Java是静态语言，类定义后，不支持扩展，kotlin的扩展不是真正的修改类，而是创建了一个函数，通过编译时，进行替换为调用对应的函数实现</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list: List&lt;<span class="built_in">Int</span>&gt; = mutableListOf(<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给List类扩展sort排序方法</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> List<span class="type">&lt;Int&gt;</span>.<span class="title">sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collections.sort(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">list.sort()</span><br><span class="line"></span><br><span class="line">Log.d(<span class="string">&quot;liuyang&quot;</span>, <span class="string">&quot;<span class="subst">$&#123;list&#125;</span>&quot;</span>) <span class="comment">// 输出结果为：[1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="抽象与接口"><a href="#抽象与接口" class="headerlink" title="抽象与接口"></a>抽象与接口</h2><p>关键点：</p><ol><li>抽象类：通过abstract修饰的类</li><li>接口：<ol><li>语法：interface修饰，没有构造器与初始化块</li><li>方法：除了抽象方法外，还可包含有非抽象方法</li><li>属性：没有backing field，无法保存数据，默认都是抽象属性，但通过提供getter方法，可以改为非抽象属性</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只读属性定义了 getter 方法，非抽象属性</span></span><br><span class="line">    <span class="keyword">val</span> description: String</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读写属性没有定义 getter、setter 方法，抽象属性</span></span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">(food: <span class="type">String</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">(<span class="keyword">vararg</span> msgs: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (msg <span class="keyword">in</span> msgs) &#123;</span><br><span class="line">            println(msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象表达式-amp-amp-对象声明-amp-amp-伴生对象"><a href="#对象表达式-amp-amp-对象声明-amp-amp-伴生对象" class="headerlink" title="对象表达式 &amp;&amp; 对象声明 &amp;&amp; 伴生对象"></a>对象表达式 &amp;&amp; 对象声明 &amp;&amp; 伴生对象</h2><p>关键点：</p><ol><li>对象表达式：<ol><li>作用：用于创建匿名内部类（区别在于：可以实现多个接口）</li><li>语法：object[: 0~N 个父类型] { //对象表达式的类体部分 }</li><li>注意：接口是函数式接口时，可以使用Lambda表达式，进一步简写，不一定要用对象表达式</li></ol></li><li>对象声明：<ol><li>作用：用于创建单例，无法再创建新的对象</li><li>语法：object ObjectName[: 0咽个父类型]{ } ObjectName是单例的名称</li></ol></li><li>伴生对象<ol><li>作用：用于实现Java里的静态成员，Kotlin为了保证面向对象的纯度，通过对象来实现静态成员的能力</li><li>语法：在类中定义的对象声明，可使用 companion修饰，这样该对象就变成了伴生对象</li><li>注意：<ol><li>一个类只能定义一个伴生对象</li><li>伴生对象的对象名称可以省略</li></ol></li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn: Button = findViewById(R.id.btn)</span><br><span class="line"><span class="comment">// 对象表达式实现匿名内部类</span></span><br><span class="line">btn.setOnClickListener(<span class="keyword">object</span>: View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">        text.setText(<span class="string">&quot;<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// OnClickListener是函数式接口，可使用Lambda表达式</span></span><br><span class="line">btn.setOnClickListener &#123; view -&gt;</span><br><span class="line">    text.setText(<span class="string">&quot;<span class="subst">$&#123;text.text&#125;</span> <span class="subst">$&#123;++clickTime&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象志明---单例</span></span><br><span class="line"><span class="keyword">object</span> FoodManager &#123;</span><br><span class="line">    <span class="keyword">var</span> foods: MutableList&lt;String&gt;</span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        foods = mutableListOf&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化食物池</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">9</span>) &#123;</span><br><span class="line">            foods.add(<span class="string">&quot;food<span class="subst">$&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foods = FoodManager.foods <span class="comment">// 使用对象声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生对象---静态成员</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Outputable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义的MyClass的伴生对象</span></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>: Outputable&#123;</span><br><span class="line">        <span class="keyword">val</span> name = ”name属性值” </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//重写父接口中的抽象方法</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">6</span>)&#123;</span><br><span class="line">                println (”&lt;h$(i&#125;&gt;$&#123; msg&#125;&lt;/h$&#123;i&#125;&gt;”)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用伴生对象里的方法与属性，与调用静态成员一样</span></span><br><span class="line">    MyClass.output(<span class="string">&quot;fkit.org&quot;</span>)</span><br><span class="line">    println(MyClass.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类委托-amp-amp-属性委托"><a href="#类委托-amp-amp-属性委托" class="headerlink" title="类委托 &amp;&amp; 属性委托"></a>类委托 &amp;&amp; 属性委托</h2><p>关键点：</p><ol><li>类委托<ol><li>用处：让多个对象共享同一个委托对象，代理模式的应用，继承的一种替代，让本类需要实现的部分方法委托给其他对象</li><li>语法：接口 by 对象</li></ol></li><li>属性委托<ol><li>用处：多个类的类似属性统一交给委托对象集中实现</li><li>语法：var属性名:属性类型 by 对象</li></ol></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Outputable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type: String</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个DefaultOutput类实现Outputable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultOutput</span>: <span class="type">Outputable &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> type: String = <span class="string">&quot;输出设备&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">6</span>)&#123;</span><br><span class="line">            println(<span class="string">&quot;&lt;h<span class="subst">$&#123;i&#125;</span>&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/h<span class="subst">$&#123;i&#125;</span>&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定b为委托对象，也可以通过继承DefaultOutput来实现，java里还可以通过Proxy来实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span></span>(b: DefaultOutput): Outputable <span class="keyword">by</span> b</span><br><span class="line"><span class="comment">// 接口被委托后，还可以重写方法，重写后，就会调用自己重新的方法了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span></span>(b: DefaultOutput): Outputable <span class="keyword">by</span> b &#123;</span><br><span class="line">    <span class="comment">// 重写被委托的方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">output</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        javax.swing.JOptionPane . showMessageDialog(<span class="literal">null</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性委托</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyDelegation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: String <span class="keyword">by</span> MyDelegation()</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDelegation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _backValue = <span class="string">&quot;默认值&quot;</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">PropertyDelegation</span>, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;thisRef&#125;</span>的<span class="subst">$&#123;property.name&#125;</span>属性执行getter方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> _backValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">PropertyDelegation</span>, property: <span class="type">KProperty</span>&lt;*&gt;, newValue: <span class="type">String</span>)</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;thisRef&#125;</span>的<span class="subst">$&#123;property.name&#125;</span>属性执行setter方法&quot;</span>)</span><br><span class="line">        _backValue = newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin的异常处理"><a href="#Kotlin的异常处理" class="headerlink" title="Kotlin的异常处理"></a>Kotlin的异常处理</h1><p>关键点：</p><ol><li>与java的区别：Kotlin抛弃了checked异常，所有异常都是runtime异常，可捕获也可不捕获</li><li>finally块里的return语句会导致try catch里的return语句失效</li></ol><h1 id="Kotlin的泛型"><a href="#Kotlin的泛型" class="headerlink" title="Kotlin的泛型"></a>Kotlin的泛型</h1><p>关键点：</p><ol><li>泛型的语法与Java的类似：open class Apple<T>{ }</li><li>型变：<ol><li>用处：当实际类型是泛型的子类时，Kotlin使用型变替换了Java的通配符</li><li>分为：声明处型变，类型投影等等，就不详细介绍了，网上有很多资源</li></ol></li></ol><p><strong>与Java的泛型的对比</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java的基本泛型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">T</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 对应Kotlin的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">T</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java的通配符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">T extends View</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 对应Kotlin的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="type">out T: View</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin的注解"><a href="#Kotlin的注解" class="headerlink" title="Kotlin的注解"></a>Kotlin的注解</h1><p>流程与Java类似，三个过程：</p><ol><li>注解定义：annotation class Test(val name: String)</li><li>注解使用：@Test(name=“xx”) class MyClass{ } — 注意：属性名为value时，可以省略属性名value</li><li>读取注解：val anArr = Test: :info .annotations</li></ol><p><strong>修饰注解：元注解</strong></p><ol><li>@Retention：注解的保留时间，SOURCE，BINARY，RUNTIME</li><li>@Target：修饰哪些程序单元，即范围。CLASS，FUNCTION，FIELD</li><li>@MustBeDocumented：此注解将会被提取到Api文档里</li><li>@Repeatable：可重复注解</li></ol><h1 id="Kotlin与Java互调的注意点"><a href="#Kotlin与Java互调的注意点" class="headerlink" title="Kotlin与Java互调的注意点"></a>Kotlin与Java互调的注意点</h1><p>看如下例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> static String format(String text) &#123;</span><br><span class="line">        <span class="keyword">return</span> text.isEmpty() ? <span class="literal">null</span> : text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// kotlin调用此java类的三种方式</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSth</span><span class="params">(text: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 方式一：指定为不为null类型</span></span><br><span class="line">    <span class="keyword">val</span> f: String = Utils.format(text) <span class="comment">// 能通过编译</span></span><br><span class="line">    println (<span class="string">&quot;f.len : <span class="subst">$&#123;f.length&#125;</span>&quot;</span>) <span class="comment">// 运行时可能会报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式二：不指定类型，让其做类型推断</span></span><br><span class="line">    <span class="keyword">val</span> f = Utils.format(text) <span class="comment">// 能通过编译</span></span><br><span class="line">    println (<span class="string">&quot;f.len : <span class="subst">$&#123;f.length&#125;</span>&quot;</span>) <span class="comment">// 运行时可能会报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式三：指定为可null类型</span></span><br><span class="line">    <span class="keyword">val</span> f: String? = Utils.format(text) <span class="comment">// 能通过编译</span></span><br><span class="line">    println (<span class="string">&quot;f.len : <span class="subst">$&#123;f.length&#125;</span>&quot;</span>) <span class="comment">// 编译报错</span></span><br><span class="line">    println (<span class="string">&quot;f.len : <span class="subst">$&#123;f?.length&#125;</span>&quot;</span>) <span class="comment">// 编译成功，运行时不会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法的正确姿势：（应该养成如下编译习惯）</p><ol><li>了解方法的返回值文档，了解其是否会返回null — 不管是调用Java方法还是Kotlin方法</li><li>变量指定类型，而不是使用推断类型（推断有时不是那么的智能）</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>书籍：疯狂Kotlin讲义</li><li><a href="https://kotlinlang.org/docs/reference/basic-types.html">Kotlin官方文档</a></li><li><a href="http://blog.oneapm.com/apm-tech/226.html">深入浅出 Java 8 Lambda 表达式</a></li><li><a href="https://blog.csdn.net/csdnnews/article/details/80746096">抛弃 Java 改用 Kotlin 的六个月后，我后悔了</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kotlin优势&quot;&gt;&lt;a href=&quot;#Kotlin优势&quot; class=&quot;headerlink&quot; title=&quot;Kotlin优势&quot;&gt;&lt;/a&gt;Kotlin优势&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;更安全，避免NPE（NullPointerException），强制判断再使用&lt;</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Kotlin" scheme="https://handsomeliuyang.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Largest Number</title>
    <link href="https://handsomeliuyang.github.io/2019/04/26/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/LeetCodeLargestNumber/"/>
    <id>https://handsomeliuyang.github.io/2019/04/26/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/LeetCodeLargestNumber/</id>
    <published>2019-04-26T00:42:51.000Z</published>
    <updated>2020-10-24T06:14:09.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given a list of non negative integers, arrange them such that they form the largest number.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [10,2]</span><br><span class="line">Output: &quot;210&quot;</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,30,34,5,9]</span><br><span class="line">Output: &quot;9534330&quot;</span><br></pre></td></tr></table></figure><p>Note: The result may be very large, so you need to return a string instead of an integer.</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>看到此题目后的直接思路是：按位排序，再合并为字符串，如[3,30,34,5,9]</p><ol><li>先按首位3, 3, 3, 5, 9排序：[9,5,3,30,34]</li><li>再排序3, 30, 34, 取其第二位排序（如没有第二位，假定与第一位一样）：[34, 3, 30]</li><li>最后的排序结果：[9, 5, 34, 3, 30]</li></ol><p>实现代码的思路: 此思路与基数排序的过程类似，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 思路：利用基数排序类似的思想排序</span></span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            array.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; result = RadixSort(array, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=result.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            buffer.append(result.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">RadixSort</span><span class="params">(ArrayList&lt;Integer&gt; array, <span class="keyword">int</span> digit)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 分配桶</span></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucket = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">9</span>; i++)&#123;</span><br><span class="line">            bucket.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 入桶</span></span><br><span class="line">        <span class="keyword">int</span> div = <span class="number">10</span> ^ digit;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> value = array.get(i);</span><br><span class="line">            <span class="keyword">while</span>(value &gt;= div)&#123;</span><br><span class="line">                value = value / div;</span><br><span class="line">            &#125;</span><br><span class="line">            value = value % <span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">            bucket.get(value).add(array.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bucket.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = bucket.get(i).size();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(size == <span class="number">1</span>)&#123;</span><br><span class="line">                result.add(bucket.get(i).get(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isFinish = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;bucket.get(i).size(); j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(bucket.get(i).get(j) &gt; div)&#123;</span><br><span class="line">                        isFinish = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(isFinish) &#123;</span><br><span class="line">                    result.addAll(bucket.get(i));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 先递归排序</span></span><br><span class="line">                    ArrayList&lt;Integer&gt; sorted = RadixSort(bucket.get(i), digit+<span class="number">1</span>);</span><br><span class="line">                    result.addAll(sorted);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此算法的问题是：无法处理大数据，计算int div = 10 ^ digit;时，很容易出现div越界的问题，虽然也能解决，但复杂程序太大了。</p><p>优化两个数字的比较过程：</p><ol><li>如数字int a, int b</li><li>先转换为String：String aStr, String bStr</li><li>比较：aStrbStr, bStraStr</li></ol><p>剩下的就是一个排序的过程了，有很多排序算法可以选择，这里直接使用Java的Arrays.sort()方法，其里使用快速排序与归并排序，时间复杂度为O(n*logn)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LargestNumberComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span></span>&#123;</span><br><span class="line">            String order1 = str1+str2;</span><br><span class="line">            String order2 = str2 + str1;</span><br><span class="line">            <span class="keyword">return</span> order2.compareTo(order1); <span class="comment">// 此处是重点，要理解compareTo()方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转换为字符串数组</span></span><br><span class="line">        String[] numStrs = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            numStrs[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对字符串数组进行排序</span></span><br><span class="line">        Arrays.sort(numStrs, <span class="keyword">new</span> LargestNumberComparator());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 特例：全为0的情况</span></span><br><span class="line">        <span class="keyword">if</span>(numStrs[<span class="number">0</span>].equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 拼接为字符串输出</span></span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numStrs.length; i++)&#123;</span><br><span class="line">            buffer.append(numStrs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;Given a list of non negative integers, arrange them such that they for</summary>
      
    
    
    
    <category term="日常学习" scheme="https://handsomeliuyang.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://handsomeliuyang.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
